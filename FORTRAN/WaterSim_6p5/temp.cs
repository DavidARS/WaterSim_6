//////////////////////////////////////////////
// Code Generated By Fort2CSharp
// 9/25/2018 2:48:54 PM
//////////////////////////////////////////////
 
using System;
using System.Collections.Generic;
using System.Text;
using FortranUtils;
 
namespace CodeConversion
{
 
///-------------------------------------------------------------------------------------------------
/// <summary>   WaterShed_CO </summary>
///
///-------------------------------------------------------------------------------------------------
  public class WaterShed_CO
  {
 //    										 //Old-> #       0:    !   
 //   File is WaterShed_CO.f90							 //Old-> #       1:   File is WaterShed_CO.f90!  File is WaterShed_CO.f90
 // 										 //Old-> #       2: !
 //  This file simulates the Colorado River System					 //Old-> #       3:  This file simulates the Colorado River System! This file simulates the Colorado River System
 //  -----------------------------------------------------------------------------------	 //Old-> #       4:  -----------------------------------------------------------------------------------! -----------------------------------------------------------------------------------
 // 										 //Old-> #       5: !
 //       WaterSimDCDC Regional Water Demand and Supply Model Version 5.0			 //Old-> #       6:       WaterSimDCDC Regional Water Demand and Supply Model Version 5.0!      WaterSimDCDC Regional Water Demand and Supply Model Version 5.0

 //        This is the Fortran code for the WaterSim_DCDC FORTRAN dll.			 //Old-> #       8:        This is the Fortran code for the WaterSim_DCDC FORTRAN dll.!       This is the Fortran code for the WaterSim_DCDC FORTRAN dll.

 //        Copyright (C) 2014 , The Arizona Board of Regents				 //Old-> #      10:        Copyright (C) 2014 , The Arizona Board of Regents!       Copyright (C) 2014 , The Arizona Board of Regents
 //               on behalf of Arizona State University					 //Old-> #      11:               on behalf of Arizona State University!              on behalf of Arizona State University

 //        All rights reserved.							 //Old-> #      13:        All rights reserved.!       All rights reserved.

 //        Developed by the Decision Center for a Desert City				 //Old-> #      15:        Developed by the Decision Center for a Desert City!       Developed by the Decision Center for a Desert City
 //        Lead Model Development - David A. Sampson <david.a.sampson@asu.edu>		 //Old-> #      16:        Lead Model Development - David A. Sampson <david.a.sampson@asu.edu>!       Lead Model Development - David A. Sampson <david.a.sampson@asu.edu>

 //        This program is free software: you can redistribute it and/or modify		 //Old-> #      18:        This program is free software: you can redistribute it and/or modify!       This program is free software: you can redistribute it and/or modify
 //        it under the terms of the GNU General Public License version 3 as published by	 //Old-> #      19:        it under the terms of the GNU General Public License version 3 as published by!       it under the terms of the GNU General Public License version 3 as published by
 //        the Free Software Foundation.						 //Old-> #      20:        the Free Software Foundation.!       the Free Software Foundation.

 //        This program is distributed in the hope that it will be useful,		 //Old-> #      22:        This program is distributed in the hope that it will be useful,!       This program is distributed in the hope that it will be useful,
 //        but WITHOUT ANY WARRANTY; without even the implied warranty of			 //Old-> #      23:        but WITHOUT ANY WARRANTY; without even the implied warranty of!       but WITHOUT ANY WARRANTY; without even the implied warranty of
 //        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the			 //Old-> #      24:        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the!       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 //        GNU General Public License for more details.					 //Old-> #      25:        GNU General Public License for more details.!       GNU General Public License for more details.

 //        You should have received a copy of the GNU General Public License		 //Old-> #      27:        You should have received a copy of the GNU General Public License!       You should have received a copy of the GNU General Public License
 //        along with this program.  If not, please see <http:!www.gnu.org/licenses/>.	 //Old-> #      28:        along with this program.  If not, please see <http:!www.gnu.org/licenses/>.!       along with this program.  If not, please see <http:!www.gnu.org/licenses/>.
 // 										 //Old-> #      29: !
 // ====================================================================================	 //Old-> #      30: ====================================================================================!====================================================================================
 // 										 //Old-> #      31: !
 //  Module:       Module lm_River_ba							 //Old-> #      32:  Module:       Module lm_River_ba! Module:       Module lm_River_ba
 //  Subroutines:  subroutine initWSB() 						 //Old-> #      33:  Subroutines:  subroutine initWSB() ! Subroutines:  subroutine initWSB() 
 //                  calls (also present):						 //Old-> #      34:                  calls (also present):!                 calls (also present):
 //                    call openFiles_b()						 //Old-> #      35:                    call openFiles_b()!                   call openFiles_b()
 //                    call readParms_b()						 //Old-> #      36:                    call readParms_b()!                   call readParms_b()
 //                    call readFiles_b()						 //Old-> #      37:                    call readFiles_b()!                   call readFiles_b()
 //                    call initialState_b()						 //Old-> #      38:                    call initialState_b()!                   call initialState_b()
 // 										 //Old-> #      39: !
 //  No Module:    subroutine initializeColorado()					 //Old-> #      40:  No Module:    subroutine initializeColorado()! No Module:    subroutine initializeColorado()
 // 										 //Old-> #      41: !
 //  Module:       Module lms_River_Ba						 //Old-> #      42:  Module:       Module lms_River_Ba! Module:       Module lms_River_Ba
 //  Subroutines:  subroutine aFlow_b(T,acft)						 //Old-> #      43:  Subroutines:  subroutine aFlow_b(T,acft)! Subroutines:  subroutine aFlow_b(T,acft)
 //                subroutine aModifyFlow_ba(T)					 //Old-> #      44:                subroutine aModifyFlow_ba(T)!               subroutine aModifyFlow_ba(T)
 //                subroutine aModifyFlow_bb(T)					 //Old-> #      45:                subroutine aModifyFlow_bb(T)!               subroutine aModifyFlow_bb(T)
 //                subroutine aModifyFlow_bc(T)					 //Old-> #      46:                subroutine aModifyFlow_bc(T)!               subroutine aModifyFlow_bc(T)
 //                subroutine aModifyFlow_bd(T)					 //Old-> #      47:                subroutine aModifyFlow_bd(T)!               subroutine aModifyFlow_bd(T)
 //                subroutine reservoirs_b(T,wsb)					 //Old-> #      48:                subroutine reservoirs_b(T,wsb)!               subroutine reservoirs_b(T,wsb)
 //                subroutine expectedStorage_ba(T,wsb)					 //Old-> #      49:                subroutine expectedStorage_ba(T,wsb)!               subroutine expectedStorage_ba(T,wsb)
 //                subroutine initialStorage_B(T)					 //Old-> #      50:                subroutine initialStorage_B(T)!               subroutine initialStorage_B(T)
 //                subroutine expectedStorage_bb(T,wsb)					 //Old-> #      51:                subroutine expectedStorage_bb(T,wsb)!               subroutine expectedStorage_bb(T,wsb)
 //                function fBankStoragePowell(lvf_diffStorage)				 //Old-> #      52:                function fBankStoragePowell(lvf_diffStorage)!               function fBankStoragePowell(lvf_diffStorage)
 //                function fBankStorageMead(lvf_diffStorage)				 //Old-> #      53:                function fBankStorageMead(lvf_diffStorage)!               function fBankStorageMead(lvf_diffStorage)
 //  Lake Powell									 //Old-> #      54:  Lake Powell! Lake Powell
 //                subroutine aModifyStorage_ba(T,wsb)					 //Old-> #      55:                subroutine aModifyStorage_ba(T,wsb)!               subroutine aModifyStorage_ba(T,wsb)
 //                subroutine actualRelease(T,wsb)					 //Old-> #      56:                subroutine actualRelease(T,wsb)!               subroutine actualRelease(T,wsb)
 //                subroutine overrideRelease(T,wsb)					 //Old-> #      57:                subroutine overrideRelease(T,wsb)!               subroutine overrideRelease(T,wsb)
 //                subroutine adwrRelease(T,wsb)					 //Old-> #      58:                subroutine adwrRelease(T,wsb)!               subroutine adwrRelease(T,wsb)
 //                subroutine actualStorage(T,lvd_Pp,lvd_Pm)				 //Old-> #      59:                subroutine actualStorage(T,lvd_Pp,lvd_Pm)!               subroutine actualStorage(T,lvd_Pp,lvd_Pm)
 //                subroutine threshold_b(T,lvd_Pp,lvd_Pm,lvd_balanceamount,lv_Ssr,vTier)	 //Old-> #      60:                subroutine threshold_b(T,lvd_Pp,lvd_Pm,lvd_balanceamount,lv_Ssr,vTier)!               subroutine threshold_b(T,lvd_Pp,lvd_Pm,lvd_balanceamount,lv_Ssr,vTier)
 //                subroutine targetAmount(T,lvd_balanceamount,lv_Ssr)			 //Old-> #      61:                subroutine targetAmount(T,lvd_balanceamount,lv_Ssr)!               subroutine targetAmount(T,lvd_balanceamount,lv_Ssr)
 //                subroutine equalizationTier(T,lvf_powell_elevation,lvf_useElevation,lvd_balanceamount,lv_Ssr) //Old-> #      62:                subroutine equalizationTier(T,lvf_powell_elevation,lvf_useElevation,lvd_balanceamount,lv_Ssr)!               subroutine equalizationTier(T,lvf_powell_elevation,lvf_useElevation,lvd_balanceamount,lv_Ssr)
 //                subroutine upperElevationTier(T,lvd_balanceamount,lv_Ssr)		 //Old-> #      63:                subroutine upperElevationTier(T,lvd_balanceamount,lv_Ssr)!               subroutine upperElevationTier(T,lvd_balanceamount,lv_Ssr)
 //                subroutine targetElevations(T,lvf_useElevation)			 //Old-> #      64:                subroutine targetElevations(T,lvf_useElevation)!               subroutine targetElevations(T,lvf_useElevation)
 //                subroutine balanceContent(T,lvf_Min,lvf_Max,lvd_balance,release)	 //Old-> #      65:                subroutine balanceContent(T,lvf_Min,lvf_Max,lvd_balance,release)!               subroutine balanceContent(T,lvf_Min,lvf_Max,lvd_balance,release)
 //                subroutine elevationsPowell(state,lvf_powell_elev)			 //Old-> #      66:                subroutine elevationsPowell(state,lvf_powell_elev)!               subroutine elevationsPowell(state,lvf_powell_elev)
 //                subroutine stateFromElevationPowell(state,lvf_powell_elev)		 //Old-> #      67:                subroutine stateFromElevationPowell(state,lvf_powell_elev)!               subroutine stateFromElevationPowell(state,lvf_powell_elev)
 //  Lake Mead									 //Old-> #      68:  Lake Mead! Lake Mead
 //                subroutine elevationsMead(state,lvf_mead_elev)			 //Old-> #      69:                subroutine elevationsMead(state,lvf_mead_elev)!               subroutine elevationsMead(state,lvf_mead_elev)
 //                subroutine aModifyStorage_bb(T,wsb) 					 //Old-> #      70:                subroutine aModifyStorage_bb(T,wsb) !               subroutine aModifyStorage_bb(T,wsb) 
 //                subroutine sevenstates(T,lvf_meadElevation,lv_PMead,lv_SevenStatesLCshortage) //Old-> #      71:                subroutine sevenstates(T,lvf_meadElevation,lv_PMead,lv_SevenStatesLCshortage)!               subroutine sevenstates(T,lvf_meadElevation,lv_PMead,lv_SevenStatesLCshortage)
 //                subroutine designations_B(T,wsb)					 //Old-> #      72:                subroutine designations_B(T,wsb)!               subroutine designations_B(T,wsb)
 //                subroutine updateState_b(T,Bout,wsb)					 //Old-> #      73:                subroutine updateState_b(T,Bout,wsb)!               subroutine updateState_b(T,Bout,wsb)
 //                subroutine outinitialB(T) 						 //Old-> #      74:                subroutine outinitialB(T) !               subroutine outinitialB(T) 
 //                subroutine outputsB(T)						 //Old-> #      75:                subroutine outputsB(T)!               subroutine outputsB(T)
 //                end module							 //Old-> #      76:                end module!               end module
 //                subroutine pFlowsReservoirsColorado(T,acft,Bout)			 //Old-> #      77:                subroutine pFlowsReservoirsColorado(T,acft,Bout)!               subroutine pFlowsReservoirsColorado(T,acft,Bout)

 //  Global OUTPUTS:         							 //Old-> #      79:  Global OUTPUTS:         ! Global OUTPUTS:         
 //                      								 //Old-> #      80:                      !                     
 //  Local OUTPUTS:									 //Old-> #      81:  Local OUTPUTS:! Local OUTPUTS:
 //             									 //Old-> #      82:             !            
 //  Local INPUTS        								 //Old-> #      83:  Local INPUTS        ! Local INPUTS        
 //               									 //Old-> #      84:               !              
 // 										 //Old-> #      85: !
 //  created on 10.01.09								 //Old-> #      86:  created on 10.01.09! created on 10.01.09
 // 										 //Old-> #      87: !
 //  david arthur sampson								 //Old-> #      88:  david arthur sampson! david arthur sampson

 //  last write was: 05.10.13,07.21.14						 //Old-> #      90:  last write was: 05.10.13,07.21.14! last write was: 05.10.13,07.21.14
 //  ---------------------------------						 //Old-> #      91:  ---------------------------------! ---------------------------------
 // 										 //Old-> #      92: !

 //  ====================================================================================================== //Old-> #      94:  ======================================================================================================! ======================================================================================================
 // 										 //Old-> #      95: !

  //* ## ?????  									 //OLD-> #      96: lm_River_ba


  //* ## ?????  									 //OLD-> #      96: 


  //* ## ?????  									 //OLD-> #      97: gm_ModelControl


  //* ## ?????  									 //OLD-> #      97: 


  //* ## ?????  									 //OLD-> #      98: gm_GlobalData


  //* ## ?????  									 //OLD-> #      98: 


  //* ## ?????  									 //OLD-> #      99: gm_Euler


  //* ## ?????  									 //OLD-> #      99: 

 //  										 //Old-> #     100:  ! 
 //  -----										 //Old-> #     101:  -----! -----

  //* ## ?????  									 //OLD-> #     102: "C:\WaterSim\FORTRAN\Include\WaterSim_6\WaterSimDCDC.txt"


  //* ## ?????  									 //OLD-> #     102: 

 // 										 //Old-> #     103: !

  //* ## ?????  									 //OLD-> #     104: 

 //  ------------------								 //Old-> #     105:  ------------------! ------------------

//-----------------------------------------------------
  public void initWSB() { 								 //Old-> #     106: subroutine initWSB()
    openFiles_b() ;									 //Old-> #     107: call openFiles_b()
    readParms_b() ;									 //Old-> #     108: call readParms_b()
    readFiles_b() ;									 //Old-> #     109: call readFiles_b()
    initialState_b() ;								 //Old-> #     110: call initialState_b()
    return;									 //Old-> #     111: return

    }// initWSB									 //Old-> #     112: end subroutine initWSB
 //  --------------------								 //Old-> #     113:  --------------------! --------------------

 //  ----------------------								 //Old-> #     115:  ----------------------! ----------------------

//-----------------------------------------------------
  public void openFiles_b() { 							 //Old-> #     116: subroutine openFiles_b()
 // 										 //Old-> #     117: !
 //  --------------- Types ------------						 //Old-> #     118:  --------------- Types ------------! --------------- Types ------------
    string lvc_DPath = " ";								 //Old-> #     119: character(len=200) :: lvc_DPath=' '
 //  ==================================						 //Old-> #     120:  ==================================! ==================================
 // 										 //Old-> #     121: !
    if ((gpl_release) ) {								 //Old-> #     122: if(gpl_release)then
      lvc_DPath = trim(gvc_DPath) ;							 //Old-> #     123: lvc_DPath=trim(gvc_DPath)

      //* ## ?????  								 //OLD-> #     124: 

      lvc_DPath = gvc_Path ;								 //Old-> #     125: lvc_DPath=gvc_Path
      } // if (gpl_release)								 //Old-> #     126: endif

 // 										 //Old-> #     127: !
    module = "lm_River_ba" ;								 //Old-> #     128: module="lm_River_ba"
 // 										 //Old-> #     129: !
    Infile = "App_Data\Data\CORiver_BofRbase.txt"; LU=10 ;				 //Old-> #     130: Infile='App_Data\Data\CORiver_BofRbase.txt'; LU=10
 //                Infile='App_Data\Data\USGS_CObase.txt'; LU=10				 //Old-> #     131:                Infile='App_Data\Data\USGS_CObase.txt'; LU=10!               Infile='App_Data\Data\USGS_CObase.txt'; LU=10

    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     133: call openFiles(module,lvc_DPath,Infile,LU)
 //            call readFiles_st(module,Infile,LU)					 //Old-> #     134:            call readFiles_st(module,Infile,LU)!           call readFiles_st(module,Infile,LU)
 // 										 //Old-> #     135: !
    Infile = "App_Data\Data\CORiver_BofR.txt"; LU=11 ;					 //Old-> #     136: Infile='App_Data\Data\CORiver_BofR.txt'; LU=11
    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     137: call openFiles(module,lvc_DPath,Infile,LU)

    Infile = "App_Data\Data\CORiver_paleo.txt"; LU=12 ;					 //Old-> #     139: Infile='App_Data\Data\CORiver_paleo.txt'; LU=12
    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     140: call openFiles(module,lvc_DPath,Infile,LU)

    Infile = "App_Data\Data\CORiver_scenario.txt"; LU=13 ;				 //Old-> #     142: Infile='App_Data\Data\CORiver_scenario.txt'; LU=13
    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     143: call openFiles(module,lvc_DPath,Infile,LU)

    Infile = "App_Data\Data\COinFlowPowellToMead_year.txt"; LU=14 ;			 //Old-> #     145: Infile='App_Data\Data\COinFlowPowellToMead_year.txt'; LU=14
 //                Infile='App_Data\Data\COinFlowPowellToMead.txt'; LU=14			 //Old-> #     146:                Infile='App_Data\Data\COinFlowPowellToMead.txt'; LU=14!               Infile='App_Data\Data\COinFlowPowellToMead.txt'; LU=14
    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     147: call openFiles(module,lvc_DPath,Infile,LU)

    Infile = "App_Data\Data\UpperBasin.txt"; LU=15 ;					 //Old-> #     149: Infile='App_Data\Data\UpperBasin.txt'; LU=15
    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     150: call openFiles(module,lvc_DPath,Infile,LU)

    Infile = "App_Data\Data\powellequalizations.txt"; LU=16 ;				 //Old-> #     152: Infile='App_Data\Data\powellequalizations.txt'; LU=16
    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     153: call openFiles(module,lvc_DPath,Infile,LU)

    Infile = "App_Data\Data\Initial_storage.txt"; LU=17 ;				 //Old-> #     155: Infile='App_Data\Data\Initial_storage.txt'; LU=17
    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     156: call openFiles(module,lvc_DPath,Infile,LU)

    Infile = "App_Data\Parameters\parm_CO.dat"; LU=30 ;					 //Old-> #     158: Infile='App_Data\Parameters\parm_CO.dat'; LU=30
    openFiles(module,lvc_DPath,Infile,LU) ;						 //Old-> #     159: call openFiles(module,lvc_DPath,Infile,LU)
 // 										 //Old-> #     160: !
    return;									 //Old-> #     161: return


    //* ## ?????  									 //OLD-> #     162:        continue


    //* ## ?????  									 //OLD-> #     162: 


    if ((gvl_writeLog) ) {								 //Old-> #     164: if(gvl_writeLog)then
      string = 24 ;									 //Old-> #     165: string=24
      sStrings(string,errorString) ;							 //Old-> #     166: call sStrings(string,errorString)
      eWrite(errorString,LU) ;							 //Old-> #     167: call eWrite(errorString,LU)
      } // if (gvl_writeLog)								 //Old-> #     168: endif

    gvl_errorFlag = .false. ;							 //Old-> #     169: gvl_errorFlag=.false.
 // 										 //Old-> #     170: !

    //* ## ?????  									 //OLD-> #     171: 103)


    //* ## ?????  									 //OLD-> #     171: 

    }// openFiles_b									 //Old-> #     172: end subroutine openFiles_b
 //  -------------------------							 //Old-> #     173:  -------------------------! -------------------------

 //  ----------------------								 //Old-> #     175:  ----------------------! ----------------------

//-----------------------------------------------------
  public void readFiles_b() { 							 //Old-> #     176: subroutine readFiles_b()
 // 										 //Old-> #     177: !
 //  --------------- Types ------------------						 //Old-> #     178:  --------------- Types ------------------! --------------- Types ------------------
    int i, j, iyear;								 //Old-> #     179: integer :: i,j,iyear
    int rec, ios;									 //Old-> #     180: integer :: rec,ios
 // real :: A(2000:2010),temp(2000:2015,2)    						 //Old-> #     181: real :: A(2000:2010),temp(2000:2015,2)    !real :: A(2000:2010),temp(2000:2015,2)    
    HighLowDoubleArray A = new HighLowDoubleArray(2010,2000 );				 //Old-> #     182: real :: A(2000:2010),temp(2000:2014,2)  
 //  ========================================						 //Old-> #     183:  ========================================! ========================================
 // 										 //Old-> #     184: !
    ios = 0 ;									 //Old-> #     185: ios=0
    rec = 0 ;									 //Old-> #     186: rec=0
    LU = 0 ;									 //Old-> #     187: LU=0
 //  Prior to 02.08.13								 //Old-> #     188:  Prior to 02.08.13! Prior to 02.08.13
 //  Read Unit 10; Colorado River base data 2000 to 2010 data				 //Old-> #     189:  Read Unit 10; Colorado River base data 2000 to 2010 data! Read Unit 10; Colorado River base data 2000 to 2010 data

 //  03.04.13 DAS									 //Old-> #     191:  03.04.13 DAS! 03.04.13 DAS
 //  Read Unit 10; Colorado River base data 2000 through 2012 data			 //Old-> #     192:  Read Unit 10; Colorado River base data 2000 through 2012 data! Read Unit 10; Colorado River base data 2000 through 2012 data

 //  06.02.17 DAS									 //Old-> #     194:  06.02.17 DAS! 06.02.17 DAS
 //  Read Unit 10; Colorado River base data 2000 through 2014 data			 //Old-> #     195:  Read Unit 10; Colorado River base data 2000 through 2014 data! Read Unit 10; Colorado River base data 2000 through 2014 data


 // -----------------------------------------------------				 //Old-> #     198: -----------------------------------------------------!-----------------------------------------------------
 // 										 //Old-> #     199: !
 // do i =2000,2015,1								 //Old-> #     200: do i =2000,2015,1!do i =2000,2015,1
    for (int i=2000; i<=2000; i++ ) {							 //Old-> #     201: do i =2000,2014,1
      for (int j=1; j<=1; j++ ) {							 //Old-> #     202: do j = 1,2,1
        temp(i,j) = 0 ;								 //Old-> #     203: temp(i,j)=0
        } //       for (int j=1; j<=1; j++ ) {						 //Old-> #     204: end do
      } //     for (int i=2000; i<=2000; i++ ) {					 //Old-> #     205: end do
 // 										 //Old-> #     206: !
    LU = 10 ;									 //Old-> #     207: LU=10
    rec = 0 ;									 //Old-> #     208: rec=0
 // read(LU,*,err=1,iostat=ios)((temp(i,j),j=1,2),i=2000,2015)				 //Old-> #     209: read(LU,*,err=1,iostat=ios)((temp(i,j),j=1,2),i=2000,2015)!read(LU,*,err=1,iostat=ios)((temp(i,j),j=1,2),i=2000,2015)
    read(LU,*,err=1,iostat=ios) = 1,2),i=2000,2014) ;					 //Old-> #     210: read(LU,*,err=1,iostat=ios)=1,2),i=2000,2014)

    //* ## ?????  									 //OLD-> #     211: LU)


    //* ## ?????  									 //OLD-> #     211: 

 //  										 //Old-> #     212:  ! 
 // do i = 1,16,1									 //Old-> #     213: do i = 1,16,1!do i = 1,16,1
    for (int i=1; i<=1; i++ ) {							 //Old-> #     214: do i = 1,15,1
      lvd_iflowCObase_acft(i) = 0 ;							 //Old-> #     215: lvd_iflowCObase_acft(i)=0
      lvd_iflowCObase_acft(i) = temp(i+1999,2) ;					 //Old-> #     216: lvd_iflowCObase_acft(i)=temp(i+1999,2)
      } //     for (int i=1; i<=1; i++ ) {						 //Old-> #     217: end do
 // -----------------------------------------------------				 //Old-> #     218: -----------------------------------------------------!-----------------------------------------------------
 // 										 //Old-> #     219: !
    for (int i=1; i<=1; i++ ) {							 //Old-> #     220: do i =1,1250,1
      li_iyearCO(1,i) = 0 ;								 //Old-> #     221: li_iyearCO(1,i)=0
      for (int j=1; j<=1; j++ ) {							 //Old-> #     222: do j = 1,3,1
        li_iflowCOacft(j,i) = 0 ;							 //Old-> #     223: li_iflowCOacft(j,i)=0
        } //       for (int j=1; j<=1; j++ ) {						 //Old-> #     224: end do
      } //     for (int i=1; i<=1; i++ ) {						 //Old-> #     225: end do

    LU = 11 ;									 //Old-> #     227: LU=11
 //  Standard climate data								 //Old-> #     228:  Standard climate data! Standard climate data
 //  changed from 102 to 105 on 03.14.13						 //Old-> #     229:  changed from 102 to 105 on 03.14.13! changed from 102 to 105 on 03.14.13
    rec = 0 ;									 //Old-> #     230: rec=0
    for (int rec=1; rec<=1; rec++ ) {							 //Old-> #     231: do rec=1,105,1

      //* ## ?????  								 //OLD-> #     232: LU,*,err=1)li_iyearCO(1,rec),li_iflowCOacft(1,rec)


      //* ## ?????  								 //OLD-> #     232: *,err=1)li_iyearCO(1,rec),li_iflowCOacft(1,rec)


      //* ## ?????  								 //OLD-> #     232: err=1)li_iyearCO(1,rec),li_iflowCOacft(1,rec)


      //* ## ?????  								 //OLD-> #     232: 1)li_iyearCO(1,rec),li_iflowCOacft(1,rec)


      //* ## ?????  								 //OLD-> #     232: 1,rec),li_iflowCOacft(1,rec)


      //* ## ?????  								 //OLD-> #     232: rec),li_iflowCOacft(1,rec)


      //* ## ?????  								 //OLD-> #     232: li_iflowCOacft(1,rec)


      //* ## ?????  								 //OLD-> #     232: 1,rec)


      //* ## ?????  								 //OLD-> #     232: rec)


      //* ## ?????  								 //OLD-> #     232: 

      } //     for (int rec=1; rec<=1; rec++ ) {					 //Old-> #     233: end do

    //* ## ?????  									 //OLD-> #     234: LU)


    //* ## ?????  									 //OLD-> #     234: 

    lv_recordCO(1) = 0 ;								 //Old-> #     235: lv_recordCO(1)=0
    lv_recordCO(1) = (gv_indexyearCO-li_iyearCO(1,1))  ;				 //Old-> #     236: lv_recordCO(1)=(gv_indexyearCO-li_iyearCO(1,1)) 
 // 										 //Old-> #     237: !
 //                 ! Paleo								 //Old-> #     238:                 ! Paleo!                ! Paleo
 //                 !  1st record is nominally 762 AD					 //Old-> #     239:                 !  1st record is nominally 762 AD!                !  1st record is nominally 762 AD
    LU = 12 ;									 //Old-> #     240: LU=12
    rec = 0 ;									 //Old-> #     241: rec=0
    for (int rec=1; rec<=1; rec++ ) {							 //Old-> #     242: do rec=1,1244,1

      //* ## ?????  								 //OLD-> #     243: LU,*,err=1)li_iyearCO(2,rec),li_iflowCOacft(2,rec)


      //* ## ?????  								 //OLD-> #     243: *,err=1)li_iyearCO(2,rec),li_iflowCOacft(2,rec)


      //* ## ?????  								 //OLD-> #     243: err=1)li_iyearCO(2,rec),li_iflowCOacft(2,rec)


      //* ## ?????  								 //OLD-> #     243: 1)li_iyearCO(2,rec),li_iflowCOacft(2,rec)


      //* ## ?????  								 //OLD-> #     243: 2,rec),li_iflowCOacft(2,rec)


      //* ## ?????  								 //OLD-> #     243: rec),li_iflowCOacft(2,rec)


      //* ## ?????  								 //OLD-> #     243: li_iflowCOacft(2,rec)


      //* ## ?????  								 //OLD-> #     243: 2,rec)


      //* ## ?????  								 //OLD-> #     243: rec)


      //* ## ?????  								 //OLD-> #     243: 

      } //     for (int rec=1; rec<=1; rec++ ) {					 //Old-> #     244: end do

    //* ## ?????  									 //OLD-> #     245: LU)


    //* ## ?????  									 //OLD-> #     245: 

    lv_recordCO(2) = (gv_indexyearCO-li_iyearCO(2,1))  ;				 //Old-> #     246: lv_recordCO(2)=(gv_indexyearCO-li_iyearCO(2,1)) 
 //               									 //Old-> #     247:               !              
    LU = 13 ;									 //Old-> #     248: LU=13
    rec = 0 ;									 //Old-> #     249: rec=0
    for (int rec=1; rec<=1; rec++ ) {							 //Old-> #     250: do rec=1,74,1
      li_iflowCOacftScenario(rec) = 0 ;						 //Old-> #     251: li_iflowCOacftScenario(rec)=0

      //* ## ?????  								 //OLD-> #     252: LU,*,err=1)li_iyearCO(3,rec),li_iflowCOacft(3,rec)


      //* ## ?????  								 //OLD-> #     252: *,err=1)li_iyearCO(3,rec),li_iflowCOacft(3,rec)


      //* ## ?????  								 //OLD-> #     252: err=1)li_iyearCO(3,rec),li_iflowCOacft(3,rec)


      //* ## ?????  								 //OLD-> #     252: 1)li_iyearCO(3,rec),li_iflowCOacft(3,rec)


      //* ## ?????  								 //OLD-> #     252: 3,rec),li_iflowCOacft(3,rec)


      //* ## ?????  								 //OLD-> #     252: rec),li_iflowCOacft(3,rec)


      //* ## ?????  								 //OLD-> #     252: li_iflowCOacft(3,rec)


      //* ## ?????  								 //OLD-> #     252: 3,rec)


      //* ## ?????  								 //OLD-> #     252: rec)


      //* ## ?????  								 //OLD-> #     252: 

      li_iflowCOacftScenario(rec) = li_iflowCOacft(3,rec) ;				 //Old-> #     253: li_iflowCOacftScenario(rec)=li_iflowCOacft(3,rec)
      } //     for (int rec=1; rec<=1; rec++ ) {					 //Old-> #     254: end do

    //* ## ?????  									 //OLD-> #     255: LU)


    //* ## ?????  									 //OLD-> #     255: 

    lv_recordCO(3) = 1  ;								 //Old-> #     256: lv_recordCO(3)=1 
 //                  !								 //Old-> #     257:                  !!                 !
 //                  ! Inflows between Powell and Mead					 //Old-> #     258:                  ! Inflows between Powell and Mead!                 ! Inflows between Powell and Mead
 //                  ! New on 12.19.12 DAS - Data From Don Gross: ADWR xls Infile labeled 	 //Old-> #     259:                  ! New on 12.19.12 DAS - Data From Don Gross: ADWR xls Infile labeled !                 ! New on 12.19.12 DAS - Data From Don Gross: ADWR xls Infile labeled 
 //                  ! "InterveningNaturalFlows1906-2008_withExtensions_1.26.11.xlsx"	 //Old-> #     260:                  ! "InterveningNaturalFlows1906-2008_withExtensions_1.26.11.xlsx"!                 ! "InterveningNaturalFlows1906-2008_withExtensions_1.26.11.xlsx"
 //                  ! Data columns W trough AA					 //Old-> #     261:                  ! Data columns W trough AA!                 ! Data columns W trough AA
    LU = 14 ;									 //Old-> #     262: LU=14
 //               read(LU,*,err=1,iostat=ios)((gvf_COInFlowPowellToMead_acft(i,j),j=1,2),i=1906,2012) //Old-> #     263:               read(LU,*,err=1,iostat=ios)((gvf_COInFlowPowellToMead_acft(i,j),j=1,2),i=1906,2012)!              read(LU,*,err=1,iostat=ios)((gvf_COInFlowPowellToMead_acft(i,j),j=1,2),i=1906,2012)
    rec = 0 ;									 //Old-> #     264: rec=0
    for (int rec=1906; rec<=1906; rec++ ) {						 //Old-> #     265: do rec=1906,2012,1 ! 1906 through 2010
      gvf_COInFlowPowellToMead_acft(rec,1) = 0. ;					 //Old-> #     266: gvf_COInFlowPowellToMead_acft(rec,1)=0.
      gvf_COInFlowPowellToMead_acft(rec,2) = 0. ;					 //Old-> #     267: gvf_COInFlowPowellToMead_acft(rec,2)=0.

      //* ## ?????  								 //OLD-> #     268: LU,*,err=1,iostat=ios)gvf_COInFlowPowellToMead_acft(rec,1),gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: *,err=1,iostat=ios)gvf_COInFlowPowellToMead_acft(rec,1),gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: err=1,iostat=ios)gvf_COInFlowPowellToMead_acft(rec,1),gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: 1,iostat=ios)gvf_COInFlowPowellToMead_acft(rec,1),gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: iostat=ios)gvf_COInFlowPowellToMead_acft(rec,1),gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: ios)gvf_COInFlowPowellToMead_acft(rec,1),gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: rec,1),gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: 1),gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: gvf_COInFlowPowellToMead_acft(rec,2)


      //* ## ?????  								 //OLD-> #     268: rec,2)


      //* ## ?????  								 //OLD-> #     268: 2)


      //* ## ?????  								 //OLD-> #     268: 

      } //     for (int rec=1906; rec<=1906; rec++ ) {					 //Old-> #     269: end do

    //* ## ?????  									 //OLD-> #     270: LU)


    //* ## ?????  									 //OLD-> #     270: 


    //* ## ?????  									 //OLD-> #     271:           continue


    //* ## ?????  									 //OLD-> #     271: 

    if ((ios >0) ) {								 //Old-> #     272: if(ios >0)then

      //* ## ?????  								 //OLD-> #     274: 1000


      //* ## ?????  								 //OLD-> #     274: 

      } // if (ios >0)								 //Old-> #     275: endif

 //                 !								 //Old-> #     276:                 !!                !
    LU = 15 ;									 //Old-> #     277: LU=15
    read(LU,*,err=2,iostat=ios) = 1,3),i=2000,2060) ;					 //Old-> #     278: read(LU,*,err=2,iostat=ios)=1,3),i=2000,2060)

    //* ## ?????  									 //OLD-> #     279: LU)


    //* ## ?????  									 //OLD-> #     279: 


    //* ## ?????  									 //OLD-> #     280:           continue


    //* ## ?????  									 //OLD-> #     280: 

    if ((ios >0) ) {								 //Old-> #     281: if(ios >0)then

      //* ## ?????  								 //OLD-> #     283: 1000


      //* ## ?????  								 //OLD-> #     283: 

      } // if (ios >0)								 //Old-> #     284: endif

 // 										 //Old-> #     285: !
 // 										 //Old-> #     286: !
 //                 !--------------------------------------------------------------------------- //Old-> #     287:                 !---------------------------------------------------------------------------!                !---------------------------------------------------------------------------
 //                 !								 //Old-> #     288:                 !!                !
 //                 ! ft3 s-1 on a monthly basis					 //Old-> #     289:                 ! ft3 s-1 on a monthly basis!                ! ft3 s-1 on a monthly basis
 //                 ! USGS monthly data from lee's Ferry, AZ				 //Old-> #     290:                 ! USGS monthly data from lee's Ferry, AZ!                ! USGS monthly data from lee's Ferry, AZ
 //                 !http://waterdata.usgs.gov/nwis/monthly?referred_module &		 //Old-> #     291:                 !http://waterdata.usgs.gov/nwis/monthly?referred_module &!                !http://waterdata.usgs.gov/nwis/monthly?referred_module &
 //                 ! =sw&amp;site_no=09380000&amp;por_09380000_1=19133,00060,&		 //Old-> #     292:                 ! =sw&amp;site_no=09380000&amp;por_09380000_1=19133,00060,&!                ! =sw&amp;site_no=09380000&amp;por_09380000_1=19133,00060,&
 //                 ! 1,1921-10,2009-06&amp;start_dt=1922-01&amp;end_dt=2009-01 &		 //Old-> #     293:                 ! 1,1921-10,2009-06&amp;start_dt=1922-01&amp;end_dt=2009-01 &!                ! 1,1921-10,2009-06&amp;start_dt=1922-01&amp;end_dt=2009-01 &
 //                 ! &amp;format=html_table&amp;date_format=YYYY-MM-DD&amp; &		 //Old-> #     294:                 ! &amp;format=html_table&amp;date_format=YYYY-MM-DD&amp; &!                ! &amp;format=html_table&amp;date_format=YYYY-MM-DD&amp; &
 //                 ! rdb_compression=value&amp;submitted_form=parameter_selection_list	 //Old-> #     295:                 ! rdb_compression=value&amp;submitted_form=parameter_selection_list!                ! rdb_compression=value&amp;submitted_form=parameter_selection_list
 //                 ! ----------------------------------------------------------		 //Old-> #     296:                 ! ----------------------------------------------------------!                ! ----------------------------------------------------------
 //                 !--------------------------------------------------------------------------- //Old-> #     297:                 !---------------------------------------------------------------------------!                !---------------------------------------------------------------------------
 //                 !								 //Old-> #     298:                 !!                !
 // 										 //Old-> #     299: !
 //                 ! Read unit 15; powell equalizatoins				 //Old-> #     300:                 ! Read unit 15; powell equalizatoins!                ! Read unit 15; powell equalizatoins
 //                 !-------------------------------------------------------------------------- //Old-> #     301:                 !--------------------------------------------------------------------------!                !--------------------------------------------------------------------------
 //                 !								 //Old-> #     302:                 !!                !
    LU = 16 ;									 //Old-> #     303: LU=16
    read(LU,*,err=6,iostat=ios) = 1,3),i=2000,2037) ;					 //Old-> #     304: read(LU,*,err=6,iostat=ios)=1,3),i=2000,2037)

    //* ## ?????  									 //OLD-> #     305:           continue


    //* ## ?????  									 //OLD-> #     305: 


    //* ## ?????  									 //OLD-> #     306: LU)


    //* ## ?????  									 //OLD-> #     306: 

    if ((ios >0) ) {								 //Old-> #     307: if(ios >0)then
      LU = 16 ;									 //Old-> #     308: LU=16

      //* ## ?????  								 //OLD-> #     309: 1000


      //* ## ?????  								 //OLD-> #     309: 

      } // if (ios >0)								 //Old-> #     310: endif

 // 										 //Old-> #     311: !
 //                 ! http://lakepowell.water-data.com/index2.php			 //Old-> #     312:                 ! http://lakepowell.water-data.com/index2.php!                ! http://lakepowell.water-data.com/index2.php
 //                 ! http://lakemead.water-data.com/index2.php 				 //Old-> #     313:                 ! http://lakemead.water-data.com/index2.php !                ! http://lakemead.water-data.com/index2.php 
 //                 ! Read in WaterShed_SVT.f90 first, and then rewind (line 204)		 //Old-> #     314:                 ! Read in WaterShed_SVT.f90 first, and then rewind (line 204)!                ! Read in WaterShed_SVT.f90 first, and then rewind (line 204)
    LU = 17 ;									 //Old-> #     315: LU=17
    for (int i=2000; i<=2000; i++ ) {							 //Old-> #     316: do i = 2000,2010,1
      li_initstoragePowell(i) = 0 ;							 //Old-> #     317: li_initstoragePowell(i)=0
      li_initstorageMead(i) = 0 ;							 //Old-> #     318: li_initstorageMead(i)=0

      //* ## ?????  								 //OLD-> #     319: LU,*,err=7,iostat=ios)iyear,A(i),li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: *,err=7,iostat=ios)iyear,A(i),li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: err=7,iostat=ios)iyear,A(i),li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: 7,iostat=ios)iyear,A(i),li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: iostat=ios)iyear,A(i),li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: ios)iyear,A(i),li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: A(i),li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: i),li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: li_initstoragePowell(i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: i),li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: li_initstorageMead(i)


      //* ## ?????  								 //OLD-> #     319: i)


      //* ## ?????  								 //OLD-> #     319: 

      A(i) = A(i)*1 ! Only used to stop verbose warnings ;				 //Old-> #     320: A(i)=A(i)*1 ! Only used to stop verbose warnings
      iyear = iyear ;								 //Old-> #     321: iyear=iyear
      } //     for (int i=2000; i<=2000; i++ ) {					 //Old-> #     322: end do
 // lv_firstYear_b=2000								 //Old-> #     323: lv_firstYear_b=2000!lv_firstYear_b=2000

    //* ## ?????  									 //OLD-> #     324:           continue


    //* ## ?????  									 //OLD-> #     324: 


    //* ## ?????  									 //OLD-> #     325: 17)


    //* ## ?????  									 //OLD-> #     325: 

    if ((ios >0) ) {								 //Old-> #     326: if(ios >0)then
      LU = 17 ;									 //Old-> #     327: LU=17

      //* ## ?????  								 //OLD-> #     328: 1000


      //* ## ?????  								 //OLD-> #     328: 

      } // if (ios >0)								 //Old-> #     329: endif

 //  LU 18 is CAGRD									 //Old-> #     330:  LU 18 is CAGRD! LU 18 is CAGRD
    return;									 //Old-> #     331: return


    //* ## ?????  									 //OLD-> #     332: continue


    //* ## ?????  									 //OLD-> #     332: 

    if ((gvl_writeLog) ) {								 //Old-> #     333: if(gvl_writeLog)then
      string = 12 ;									 //Old-> #     334: string=12
      sStrings(string,errorString) ;							 //Old-> #     335: call sStrings(string,errorString)
      eWrite(errorString,LU) ;							 //Old-> #     336: call eWrite(errorString,LU)
      } // if (gvl_writeLog)								 //Old-> #     337: endif

    gvl_errorFlag = .false. ;							 //Old-> #     338: gvl_errorFlag=.false.
 // 										 //Old-> #     339: !
    }// readFiles_b									 //Old-> #     340: end subroutine readFiles_b
 //  -----------------------								 //Old-> #     341:  -----------------------! -----------------------

 //  ----------------------								 //Old-> #     343:  ----------------------! ----------------------

//-----------------------------------------------------
  public void readParms_b() { 							 //Old-> #     344: subroutine readParms_b()
 // 										 //Old-> #     345: !
 //  ------ Types -------------							 //Old-> #     346:  ------ Types -------------! ------ Types -------------
    double lvf_mod_powell = 0.98;							 //Old-> #     347: real :: lvf_mod_powell=0.98
    double lvf_mod_mead = 1.02;							 //Old-> #     348: real :: lvf_mod_mead=1.02
 //  ==========================							 //Old-> #     349:  ==========================! ==========================
 // 										 //Old-> #     350: !
 // 										 //Old-> #     351: !

    //* ## ?????  									 //OLD-> #     352: 30,*)li_capcapacity


    //* ## ?????  									 //OLD-> #     352: *)li_capcapacity


    //* ## ?????  									 //OLD-> #     352: 


    //* ## ?????  									 //OLD-> #     353: 30,*)li_capevapconst


    //* ## ?????  									 //OLD-> #     353: *)li_capevapconst


    //* ## ?????  									 //OLD-> #     353: 


    //* ## ?????  									 //OLD-> #     354: 30,*)li_capmaricopashare


    //* ## ?????  									 //OLD-> #     354: *)li_capmaricopashare


    //* ## ?????  									 //OLD-> #     354: 


    //* ## ?????  									 //OLD-> #     355: 30,*)gv_climatefactorCO


    //* ## ?????  									 //OLD-> #     355: *)gv_climatefactorCO


    //* ## ?????  									 //OLD-> #     355: 


    //* ## ?????  									 //OLD-> #     356: 30,*)gv_droughtfactorCO


    //* ## ?????  									 //OLD-> #     356: *)gv_droughtfactorCO


    //* ## ?????  									 //OLD-> #     356: 


    //* ## ?????  									 //OLD-> #     357: 30,*)gv_droughtyearCO


    //* ## ?????  									 //OLD-> #     357: *)gv_droughtyearCO


    //* ## ?????  									 //OLD-> #     357: 


    //* ## ?????  									 //OLD-> #     358: 30,*)gv_indexyearCO 


    //* ## ?????  									 //OLD-> #     358: *)gv_indexyearCO 


    //* ## ?????  									 //OLD-> #     358: 


    //* ## ?????  									 //OLD-> #     359: 30,*)li_meaddeadpool


    //* ## ?????  									 //OLD-> #     359: *)li_meaddeadpool


    //* ## ?????  									 //OLD-> #     359: 


    //* ## ?????  									 //OLD-> #     360: 30,*)li_meadmax


    //* ## ?????  									 //OLD-> #     360: *)li_meadmax


    //* ## ?????  									 //OLD-> #     360: 


    //* ## ?????  									 //OLD-> #     361: 30,*)li_numdroughtyearsCO


    //* ## ?????  									 //OLD-> #     361: *)li_numdroughtyearsCO


    //* ## ?????  									 //OLD-> #     361: 


    //* ## ?????  									 //OLD-> #     362: 30,*)li_powelldeadpool


    //* ## ?????  									 //OLD-> #     362: *)li_powelldeadpool


    //* ## ?????  									 //OLD-> #     362: 


    //* ## ?????  									 //OLD-> #     363: 30,*)li_powellmax


    //* ## ?????  									 //OLD-> #     363: *)li_powellmax


    //* ## ?????  									 //OLD-> #     363: 


    //* ## ?????  									 //OLD-> #     364: 30,*)li_yumaallocation


    //* ## ?????  									 //OLD-> #     364: *)li_yumaallocation


    //* ## ?????  									 //OLD-> #     364: 

 // 										 //Old-> #     365: !
    li_powellmax = li_powellmax*lvf_mod_powell ;					 //Old-> #     366: li_powellmax=li_powellmax*lvf_mod_powell
    li_meadmax = li_meadmax*lvf_mod_mead ;						 //Old-> #     367: li_meadmax=li_meadmax*lvf_mod_mead
 // 										 //Old-> #     368: !

    //* ## ?????  									 //OLD-> #     369: 30)


    //* ## ?????  									 //OLD-> #     369: 

    gv_droughtyearendCO = gv_droughtyearCO+li_numdroughtyearsCO ;			 //Old-> #     370: gv_droughtyearendCO=gv_droughtyearCO+li_numdroughtyearsCO
 // 										 //Old-> #     371: !
    return;									 //Old-> #     372: return

    }// readParms_b									 //Old-> #     373: end subroutine readParms_b
 //  ------------------------							 //Old-> #     374:  ------------------------! ------------------------

 //  -------------------------							 //Old-> #     376:  -------------------------! -------------------------

//-----------------------------------------------------
  public void initialState_b() { 							 //Old-> #     377: subroutine initialState_b()
 //  Powell 3681 feet on 1 jan 2000 (total storage = live + 2)				 //Old-> #     378:  Powell 3681 feet on 1 jan 2000 (total storage = live + 2)! Powell 3681 feet on 1 jan 2000 (total storage = live + 2)
    vState_Ba_maf(2000) = 23.435 ;							 //Old-> #     379: vState_Ba_maf(2000)=23.435
    vState_Bb_maf(2000) = 27.012167 ;							 //Old-> #     380: vState_Bb_maf(2000)=27.012167

    gv_dataCO = 1 ;									 //Old-> #     382: gv_dataCO=1
    go_riverFlowCO = 0. ;								 //Old-> #     383: go_riverFlowCO=0.
    go_riverFlowCO = li_iflowCOacft(gv_dataCO,lv_recordCO(1)) ;				 //Old-> #     384: go_riverFlowCO=li_iflowCOacft(gv_dataCO,lv_recordCO(1))
    go_StateCO = 0. ;								 //Old-> #     385: go_StateCO=0.
    go_StateCO = nint(vState_Ba_maf(2000)+vState_Bb_maf(2000))*1e6 ;			 //Old-> #     386: go_StateCO=nint(vState_Ba_maf(2000)+vState_Bb_maf(2000))*1e6
    go_deliveriesCO = 0. ;								 //Old-> #     387: go_deliveriesCO=0.
    go_deliveriesCO = nint(1.5*1e6) ;							 //Old-> #     388: go_deliveriesCO=nint(1.5*1e6)
 //  										 //Old-> #     389:  ! 
    return;									 //Old-> #     390: return

    }// initialState_b								 //Old-> #     391: end subroutine initialState_b 
 //  ---------------------------							 //Old-> #     392:  ---------------------------! ---------------------------

  //* ## ?????  									 //OLD-> #     393: Module lm_River_Ba


  //* ## ?????  									 //OLD-> #     393: lm_River_Ba


  //* ## ?????  									 //OLD-> #     393: 

 // 										 //Old-> #     394: !
 //  -----------------------------							 //Old-> #     395:  -----------------------------! -----------------------------

//-----------------------------------------------------
  public void initializeColorado() { 							 //Old-> #     396: subroutine initializeColorado()

    //* ## ?????  									 //OLD-> #     397: lm_River_Ba


    //* ## ?????  									 //OLD-> #     397: 

 // 										 //Old-> #     398: !
    initWSB() ;									 //Old-> #     399: call initWSB()
 // 										 //Old-> #     400: !
    return;									 //Old-> #     401: return

    }// initializeColorado								 //Old-> #     402: end subroutine initializeColorado
 //  -------------------------------							 //Old-> #     403:  -------------------------------! -------------------------------
 // 										 //Old-> #     404: !
 //  ==================								 //Old-> #     405:  ==================! ==================

  //* ## ?????  									 //OLD-> #     406: lms_River_Ba


  //* ## ?????  									 //OLD-> #     406: 


  //* ## ?????  									 //OLD-> #     407: gm_ModelControl


  //* ## ?????  									 //OLD-> #     407: 


  //* ## ?????  									 //OLD-> #     408: gm_GlobalData


  //* ## ?????  									 //OLD-> #     408: 


  //* ## ?????  									 //OLD-> #     409: gm_TypeControl


  //* ## ?????  									 //OLD-> #     409: 


  //* ## ?????  									 //OLD-> #     410: gm_Euler


  //* ## ?????  									 //OLD-> #     410: 


  //* ## ?????  									 //OLD-> #     411: gm_DataAndSensitivity


  //* ## ?????  									 //OLD-> #     411: 


 //  -------------									 //Old-> #     413:  -------------! -------------
 //     logical, private :: lvl_validate=.false.					 //Old-> #     414:     logical, private :: lvl_validate=.false.!    logical, private :: lvl_validate=.false.
 //  -------------------------------------						 //Old-> #     415:  -------------------------------------! -------------------------------------
 //  sent as output to the interface							 //Old-> #     416:  sent as output to the interface! sent as output to the interface
 //  ---------------								 //Old-> #     417:  ---------------! ---------------
 //     integer, public  :: go_riverFlowCO						 //Old-> #     418:     integer, public  :: go_riverFlowCO!    integer, public  :: go_riverFlowCO
 //     integer, public  :: go_StateCO						 //Old-> #     419:     integer, public  :: go_StateCO!    integer, public  :: go_StateCO
 //     integer, public  :: go_StatePowell						 //Old-> #     420:     integer, public  :: go_StatePowell!    integer, public  :: go_StatePowell
 //     integer, public  :: go_StateMead						 //Old-> #     421:     integer, public  :: go_StateMead!    integer, public  :: go_StateMead
 //  -------------------------------------						 //Old-> #     422:  -------------------------------------! -------------------------------------
 //  -----										 //Old-> #     423:  -----! -----

  //* ## ?????  									 //OLD-> #     424: "C:\WaterSim\FORTRAN\Include\WaterSim_6\WaterSimDCDC.txt"


  //* ## ?????  									 //OLD-> #     424: 

 // 										 //Old-> #     425: !

 //  ------------ Module Global Types ----------------------------			 //Old-> #     427:  ------------ Module Global Types ----------------------------! ------------ Module Global Types ----------------------------
  private double lvf_initial_state_Powell, lvf_initial_state_Mead;			 //Old-> #     428: real, private :: lvf_initial_state_Powell,lvf_initial_state_Mead
 //  Total pool, NOT live pool							 //Old-> #     429:  Total pool, NOT live pool! Total pool, NOT live pool
  public const double lvp_powellMax = 26.217;						 //Old-> #     430: real,parameter :: lvp_powellMax=26.217
  public const double lvp_meadMax = 28.12;						 //Old-> #     431: real,parameter :: lvp_meadMax=28.12
  public const double mpf_meadDead = 2.0 ! 895 feel msl;				 //Old-> #     432: real,parameter :: mpf_meadDead=2.0 ! 895 feel msl
  public const double mpf_powellDead = 1.89;						 //Old-> #     433: real,parameter :: mpf_powellDead=1.89 
 // 										 //Old-> #     434: !
  public double mvf_inflow_acft, mvf_FlowsToMead_maf;					 //Old-> #     435: real :: mvf_inflow_acft,mvf_FlowsToMead_maf
  public double mvf_upperBasin_acft, mvf_LeeFerry_acft, mvf_releaseFromPowell_acft;	 //Old-> #     436: real :: mvf_upperBasin_acft,mvf_LeeFerry_acft,mvf_releaseFromPowell_acft
  public double mvf_meadEvaporation_acft, mvf_powellEvaporation_acft;			 //Old-> #     437: real :: mvf_meadEvaporation_acft,mvf_powellEvaporation_acft
  public double mvf_powell_excess_elev;						 //Old-> #     438: real :: mvf_powell_excess_elev
  public double mvf_powell_flux, mvf_mead_flux, mvf_adjustStorage;			 //Old-> #     439: real :: mvf_powell_flux,mvf_mead_flux,mvf_adjustStorage
  public double mvf_powellToMeadInflows_maf;						 //Old-> #     440: real :: mvf_powellToMeadInflows_maf
 //  Module,parameter,float								 //Old-> #     441:  Module,parameter,float! Module,parameter,float
  public const double mpf_seven = 7.0;						 //Old-> #     442: real,parameter :: mpf_seven=7.0
  public const double mpf_sevenFourEight = 7.48;					 //Old-> #     443: real,parameter :: mpf_sevenFourEight=7.48
  public const double mpf_sevenEight = 7.8;						 //Old-> #     444: real,parameter :: mpf_sevenEight=7.8
  public const double mpf_nine = 9.0;							 //Old-> #     445: real,parameter :: mpf_nine=9.0
  public const double mpf_nineFive = 9.5;						 //Old-> #     446: real,parameter :: mpf_nineFive=9.5
  public const double mpf_targetRelease = 8.23;					 //Old-> #     447: real,parameter :: mpf_targetRelease=8.23
 // 										 //Old-> #     448: !
  public double mpf_pan_mead = 2.28092  ! 89.8 inches average (http://pubs.usgs.gov/sir/2006/5252/pdf/sir20065252.pdf); //Old-> #     449: real :: mpf_pan_mead=2.28092  ! 89.8 inches average (http://pubs.usgs.gov/sir/2006/5252/pdf/sir20065252.pdf)
  public double mpf_pan_reach = 4.5;							 //Old-> #     450: real :: mpf_pan_reach=4.5
  public double mpf_pan_powell = 1.763776  ! 0.273386 m or 69.44 inches average (adjusted pan)(http://www.riversimulator.org/Resources/Hydrology/EvaporationAtLakePowellUCRCopt.pdf); //Old-> #     451: real :: mpf_pan_powell=1.763776  ! 0.273386 m or 69.44 inches average (adjusted pan)(http://www.riversimulator.org/Resources/Hydrology/EvaporationAtLakePowellUCRCopt.pdf)
  public double mpf_mod_BankStorage = 1.5;						 //Old-> #     452: real :: mpf_mod_BankStorage=1.5
 // 										 //Old-> #     453: !
  public const double mpf_maxEnvRiver = 0.15;						 //Old-> #     454: real, parameter ::  mpf_maxEnvRiver=0.15

  //* ## ?????  									 //OLD-> #     455: mvf_totalCOallocatedUB


  //* ## ?????  									 //OLD-> #     455: 

 // 										 //Old-> #     456: !
  public double mpf_bankStoragePowell = 0.08;						 //Old-> #     457: real :: mpf_bankStoragePowell=0.08
  public double mpf_bankStorageMead = 0.065;						 //Old-> #     458: real :: mpf_bankStorageMead=0.065
 // 										 //Old-> #     459: !
 //  =================================================================			 //Old-> #     460:  =================================================================! =================================================================
 // 										 //Old-> #     461: !
 //  ------------- Local Type Constructs -------------------------------------		 //Old-> #     462:  ------------- Local Type Constructs -------------------------------------! ------------- Local Type Constructs -------------------------------------

  //* ## ?????  									 //OLD-> #     463: watershed_B


  //* ## ?????  									 //OLD-> #     463: 

  public double 8);									 //Old-> #     464: real(8):: vState_Ba_pred_maf(gpi_lBY:gpi_uBY)
  public double 8);									 //Old-> #     465: real(8):: vState_Bb_pred_maf(gpi_lBY:gpi_uBY)
 // 										 //Old-> #     466: !
  public double 8);									 //Old-> #     467: real(8):: powell_flux_maf(gpi_lBY:gpi_uBY)
  public double 8);									 //Old-> #     468: real(8):: mead_flux_maf(gpi_lBY:gpi_uBY)
 // 										 //Old-> #     469: !
  public double 8);									 //Old-> #     470: real(8):: lv_BaToBb(gpi_lBY:gpi_uBY),lv_OverFlow_ba(gpi_lBY:gpi_uBY)
  public double 8);									 //Old-> #     471: real(8):: lv_AZshareCO,lv_CAPmaricopa(gpi_lBY:gpi_uBY)
  public HighLowDoubleArray lvf_preCAP = new HighLowDoubleArray(gpi_uBY,gpi_lBY );		 //Old-> #     472: real :: lvf_preCAP(gpi_lBY:gpi_uBY),lv_CAP(gpi_lBY:gpi_uBY),lv_AZshortageCO,lvd_upperBasin

  //* ## ?????  									 //OLD-> #     473: type watershed_B


  //* ## ?????  									 //OLD-> #     473: watershed_B


  //* ## ?????  									 //OLD-> #     473: 

 //  ==============================================================================	 //Old-> #     474:  ==============================================================================! ==============================================================================
 //  										 //Old-> #     475:  ! 

  //* ## ?????  									 //OLD-> #     476: 

 //  ======									 //Old-> #     477:  ======! ======
 // 										 //Old-> #     478: !
 //  ------------------------							 //Old-> #     479:  ------------------------! ------------------------

//-----------------------------------------------------
  public void initial_CO(wsb , wsb) {							 //Old-> #     480: subroutine initial_CO(wsb)
 // 										 //Old-> #     481: !
 //  ----- Types -----								 //Old-> #     482:  ----- Types -----! ----- Types -----
    int yr;									 //Old-> #     483: integer :: yr
 //  =================								 //Old-> #     484:  =================! =================
 // 										 //Old-> #     485: !

 //  ---- Type Construct ----							 //Old-> #     487:  ---- Type Construct ----! ---- Type Construct ----

    //* ## ?????  									 //OLD-> #     488: watershed_B)::wsb


    //* ## ?????  									 //OLD-> #     488: 

 //  ========================							 //Old-> #     489:  ========================! ========================
 // 										 //Old-> #     490: !

    //* ## ?????  									 //OLD-> #     491: yr = gpi_lBY,gpi_uBY,1


    //* ## ?????  									 //OLD-> #     491: = gpi_lBY,gpi_uBY,1


    //* ## ?????  									 //OLD-> #     491: gpi_uBY,1


    //* ## ?????  									 //OLD-> #     491: 1


    //* ## ?????  									 //OLD-> #     491: 

    wsb%vState_Ba_pred_maf(yr) = 0 ;							 //Old-> #     492: wsb%vState_Ba_pred_maf(yr)=0
    wsb%vState_Bb_pred_maf(yr) = 0 ;							 //Old-> #     493: wsb%vState_Bb_pred_maf(yr)=0
    wsb%lv_BaToBb(yr) = 0 ;								 //Old-> #     494: wsb%lv_BaToBb(yr)=0
    wsb%lv_OverFlow_ba(yr) = 0 ;							 //Old-> #     495: wsb%lv_OverFlow_ba(yr)=0
    wsb%lv_CAPmaricopa(yr) = 0 ;							 //Old-> #     496: wsb%lv_CAPmaricopa(yr)=0
    wsb%lv_CAP(yr) = 0 ;								 //Old-> #     497: wsb%lv_CAP(yr)=0
											 //Old-> #     498: end do

    // ## ERROR 30									 //OLD-> #     498: do

    wsb%lv_AZshareCO = 0 ;								 //Old-> #     499: wsb%lv_AZshareCO=0
    wsb%lv_AZshortageCO = 0 ;							 //Old-> #     500: wsb%lv_AZshortageCO=0
    wsb%lvd_upperBasin = 0 ;								 //Old-> #     501: wsb%lvd_upperBasin=0
 // 										 //Old-> #     502: !
 // 										 //Old-> #     503: !
    return;									 //Old-> #     504: return

    }// initial_CO									 //Old-> #     505: end subroutine initial_CO
 //  -----------------------								 //Old-> #     506:  -----------------------! -----------------------

 //  -----------------------								 //Old-> #     508:  -----------------------! -----------------------

//-----------------------------------------------------
  public void aFlow_b(bool Trace , int acft) {						 //Old-> #     509: subroutine aFlow_b(T,acft)
 // 										 //Old-> #     510: !
 //  ----------------- Types ---------------						 //Old-> #     511:  ----------------- Types ---------------! ----------------- Types ---------------
    // Skipped									 //OLD-> #     512:         integer :: acft,LU
    int i, j, lvi_totalyears;							 //Old-> #     513: integer :: i,j,lvi_totalyears
    int lvi_addRecords;								 //Old-> #     514: integer :: lvi_addRecords
    int stop = 15 ! use 13 for 2000 through 2012;					 //Old-> #     515: integer :: stop=15 ! use 13 for 2000 through 2012

    // Skipped									 //OLD-> #     517:         logical :: lvl_noTrace=.false.
    bool lvl_start2000;								 //Old-> #     518: logical :: lvl_start2000
 //  ========================================						 //Old-> #     519:  ========================================! ========================================
 // 										 //Old-> #     520: !

 //  - Type Constructs -								 //Old-> #     522:  - Type Constructs -! - Type Constructs -

    //* ## ?????  									 //OLD-> #     523: runTime)T  


    //* ## ?????  									 //OLD-> #     523:  

 //  ===================								 //Old-> #     524:  ===================! ===================
 // 										 //Old-> #     525: !
    lvl_start2000 = .true. ;								 //Old-> #     526: lvl_start2000=.true.
 //         lvi_addRec=0								 //Old-> #     527:         lvi_addRec=0!        lvi_addRec=0
    lvi_addRecords = 0   ;								 //Old-> #     528: lvi_addRecords=0  
    if ((gv_dataCO < 1)gv_dataCO=1 ) {						 //Old-> #     529: if(gv_dataCO < 1)gv_dataCO=1
      lv_flow_B_maf(T%year) = 0 ;							 //Old-> #     530: lv_flow_B_maf(T%year)=0
      if ((acft > 0) ) {								 //Old-> #     531: if(acft > 0)then
 //  For testing purposes (i.e., Testing.f90)						 //Old-> #     532:  For testing purposes (i.e., Testing.f90)! For testing purposes (i.e., Testing.f90)
        lv_flow_B_maf(T%year) = acft*gpd_acftTomaf ;					 //Old-> #     533: lv_flow_B_maf(T%year)=acft*gpd_acftTomaf

        //* ## ?????  								 //OLD-> #     534: 

 //    Actual simulations: gpi_timeStep = 1, use annual data, otherwise, sum the monthly data //Old-> #     535:    Actual simulations: gpi_timeStep = 1, use annual data, otherwise, sum the monthly data!   Actual simulations: gpi_timeStep = 1, use annual data, otherwise, sum the monthly data
 //  (so that annual and monthly simulations are using the same input data (for runoff)	 //Old-> #     536:  (so that annual and monthly simulations are using the same input data (for runoff)! (so that annual and monthly simulations are using the same input data (for runoff)
 // 										 //Old-> #     537: !
        if ((T%year == T%startyear) ) {						 //Old-> #     538: if(T%year == T%startyear)then
 // 										 //Old-> #     539: !
          for (int i=1; i<=1; i++ ) {							 //Old-> #     540: do i = 1,200,1
            for (int j=1; j<=1; j++ ) {						 //Old-> #     541: do j = 1,3,1
              lvi_flowCOacftMod(j,i) = 0 ;						 //Old-> #     542: lvi_flowCOacftMod(j,i)=0
              } //             for (int j=1; j<=1; j++ ) {				 //Old-> #     543: end do
            } //           for (int i=1; i<=1; i++ ) {					 //Old-> #     544: end do
 // 										 //Old-> #     545: !
          vArecB = 1208            ;							 //Old-> #     546: vArecB=1208           
          vArecB = (gv_indexyearCO-li_iyearCO(gv_dataCO,1)) ;				 //Old-> #     547: vArecB=(gv_indexyearCO-li_iyearCO(gv_dataCO,1))
 // 										 //Old-> #     548: !
          lvi_totalyears = T%endyear-T%startyear  +1 ;					 //Old-> #     549: lvi_totalyears=T%endyear-T%startyear  +1
 // 										 //Old-> #     550: !
          lvl_noTrace = .false. ;							 //Old-> #     551: lvl_noTrace=.false.
          if ((gv_dataCO == 1) ) {							 //Old-> #     552: if(gv_dataCO == 1)then
             } else if ( gv_dataCO == 2) ) {						 //Old-> #     553: else if(gv_dataCO == 2)then
             } else if ( gv_dataCO == 3) ) {						 //Old-> #     554: else if(gv_dataCO == 3)then
            lvl_noTrace = .true. ;							 //Old-> #     555: lvl_noTrace=.true.
             } else if ( gv_dataCO == 4) ) {						 //Old-> #     556: else if(gv_dataCO == 4)then
            lvl_noTrace = .true. ;							 //Old-> #     557: lvl_noTrace=.true.
            } // if (gv_dataCO == 1)							 //Old-> #     558: endif

 // 										 //Old-> #     559: !
          if ((gvi_COtrace < 1)gvi_COtrace=30 ) {					 //Old-> #     560: if(gvi_COtrace < 1)gvi_COtrace=30
 // 										 //Old-> #     561: !
 //  Force no-trace for Don Gross (ADWR) comparisons					 //Old-> #     562:  Force no-trace for Don Gross (ADWR) comparisons! Force no-trace for Don Gross (ADWR) comparisons
 //  05.08.13									 //Old-> #     563:  05.08.13! 05.08.13
            if ((gpl_comparisons) ) {							 //Old-> #     564: if(gpl_comparisons)then
              stop = 15 ;								 //Old-> #     565: stop=15
              lvl_noTrace = .true. ;							 //Old-> #     566: lvl_noTrace=.true.
              } // if (gpl_comparisons)						 //Old-> #     567: endif

 // 										 //Old-> #     568: !
            if ((lvl_noTrace) ) {							 //Old-> #     569: if(lvl_noTrace)then
 // 										 //Old-> #     570: !
              if ((gpl_comparisons) ) {						 //Old-> #     571: if(gpl_comparisons)then
 // 										 //Old-> #     572: !
                for (int i=1; i<=1; i++ ) {						 //Old-> #     573: do i = 1,stop,1
                  lvi_flowCOacftMod(gv_dataCO,i) = lvd_iflowCObase_acft(i) ;		 //Old-> #     574: lvi_flowCOacftMod(gv_dataCO,i)=lvd_iflowCObase_acft(i)
                  } //                 for (int i=1; i<=1; i++ ) {			 //Old-> #     575: end do !li_iflowCOacft(3,rec)


                //* ## ?????  							 //OLD-> #     577: j = stop+1,86,1


                //* ## ?????  							 //OLD-> #     577: = stop+1,86,1


                //* ## ?????  							 //OLD-> #     577: 86,1


                //* ## ?????  							 //OLD-> #     577: 1


                //* ## ?????  							 //OLD-> #     577: 

                lvi_flowCOacftMod(gv_dataCO,j) = li_iflowCOacftScenario(j-stop)  ;		 //Old-> #     578: lvi_flowCOacftMod(gv_dataCO,j)=li_iflowCOacftScenario(j-stop) 
											 //Old-> #     579: end do

                // ## ERROR 30							 //OLD-> #     579: do

 // 										 //Old-> #     580: !

                //* ## ?????  							 //OLD-> #     581: 

 // 										 //Old-> #     582: !
                for (int i=1; i<=1; i++ ) {						 //Old-> #     583: do i = 1,stop,1
                  lvi_flowCOacftMod(gv_dataCO,i) = lvd_iflowCObase_acft(i) ;		 //Old-> #     584: lvi_flowCOacftMod(gv_dataCO,i)=lvd_iflowCObase_acft(i)
                  } //                 for (int i=1; i<=1; i++ ) {			 //Old-> #     585: end do !li_iflowCOacft(3,rec)


                //* ## ?????  							 //OLD-> #     587: j = stop+1,86,1


                //* ## ?????  							 //OLD-> #     587: = stop+1,86,1


                //* ## ?????  							 //OLD-> #     587: 86,1


                //* ## ?????  							 //OLD-> #     587: 1


                //* ## ?????  							 //OLD-> #     587: 

                lvi_flowCOacftMod(gv_dataCO,j) = li_iflowCOacftScenario(j-stop)  ;		 //Old-> #     588: lvi_flowCOacftMod(gv_dataCO,j)=li_iflowCOacftScenario(j-stop) 
											 //Old-> #     589: end do

                // ## ERROR 30							 //OLD-> #     589: do

 // 										 //Old-> #     590: !
                } // if (gpl_comparisons)						 //Old-> #     591: endif

              vArecB = 0  ;								 //Old-> #     592: vArecB=0 
 // 										 //Old-> #     593: !

              //* ## ?????  								 //OLD-> #     594: 

 //  										 //Old-> #     595:  ! 
              if ((lvl_start2000) ) {							 //Old-> #     596: if(lvl_start2000)then
 //  Actually start in 2001								 //Old-> #     597:  Actually start in 2001! Actually start in 2001
                for (int i=1; i<=1; i++ ) {						 //Old-> #     598: do i = 1,stop,1
                  lvi_flowCOacftMod(gv_dataCO,i) = lvd_iflowCObase_acft(i) ;		 //Old-> #     599: lvi_flowCOacftMod(gv_dataCO,i)=lvd_iflowCObase_acft(i)
                  } //                 for (int i=1; i<=1; i++ ) {			 //Old-> #     600: end do
 // 										 //Old-> #     601: !

                //* ## ?????  							 //OLD-> #     602: i = stop+1,lvi_totalyears,1


                //* ## ?????  							 //OLD-> #     602: = stop+1,lvi_totalyears,1


                //* ## ?????  							 //OLD-> #     602: lvi_totalyears,1


                //* ## ?????  							 //OLD-> #     602: 1


                //* ## ?????  							 //OLD-> #     602: 


                lvi_flowCOacftMod(gv_dataCO,i) = li_iflowCOacft(gv_dataCO,vArecB+1+lvi_addRecords) ; //Old-> #     604: lvi_flowCOacftMod(gv_dataCO,i)=li_iflowCOacft(gv_dataCO,vArecB+1+lvi_addRecords)
                lvi_addRecords = lvi_addRecords+1 ;					 //Old-> #     605: lvi_addRecords=lvi_addRecords+1

                if ((vArecB+lvi_addRecords > vArecB+gvi_COtrace) ) {			 //Old-> #     607: if(vArecB+lvi_addRecords > vArecB+gvi_COtrace)then
 //  set back to the "index" year, whatever it was set at in the interface		 //Old-> #     608:  set back to the "index" year, whatever it was set at in the interface! set back to the "index" year, whatever it was set at in the interface
                  lvi_addRecords = 0 ;						 //Old-> #     609: lvi_addRecords=0
                  lvi_flowCOacftMod(gv_dataCO,i) = li_iflowCOacft(gv_dataCO,vArecB+1+lvi_addRecords) ; //Old-> #     610: lvi_flowCOacftMod(gv_dataCO,i)=li_iflowCOacft(gv_dataCO,vArecB+1+lvi_addRecords)
                  lvi_addRecords = lvi_addRecords+1 ;					 //Old-> #     611: lvi_addRecords=lvi_addRecords+1
                  } // if (vArecB+lvi_addRecords > vArecB+gvi_COtrace)			 //Old-> #     612: endif

											 //Old-> #     613: end do

                // ## ERROR 30							 //OLD-> #     613: do

 // 										 //Old-> #     614: !
                vArecB = 0 !+ lvi_addRec ;						 //Old-> #     615: vArecB=0 !+ lvi_addRec

                //* ## ?????  							 //OLD-> #     616: 

                for (int i=1; i<=1; i++ ) {						 //Old-> #     617: do i = 1,lvi_totalyears,1
                  lvi_flowCOacftMod(gv_dataCO,i) = li_iflowCOacft(gv_dataCO,vArecB+1+lvi_addRecords) ; //Old-> #     618: lvi_flowCOacftMod(gv_dataCO,i)=li_iflowCOacft(gv_dataCO,vArecB+1+lvi_addRecords)
                  lvi_addRecords = lvi_addRecords+1 ;					 //Old-> #     619: lvi_addRecords=lvi_addRecords+1
                  if ((vArecB+lvi_addRecords >vArecB+gvi_COtrace) ) {			 //Old-> #     620: if(vArecB+lvi_addRecords >vArecB+gvi_COtrace)then
                    lvi_addRecords = 0 ;						 //Old-> #     621: lvi_addRecords=0
                    lvi_flowCOacftMod(gv_dataCO,i) = li_iflowCOacft(gv_dataCO,vArecB+1+lvi_addRecords) ; //Old-> #     622: lvi_flowCOacftMod(gv_dataCO,i)=li_iflowCOacft(gv_dataCO,vArecB+1+lvi_addRecords)
                    lvi_addRecords = lvi_addRecords+1 ;					 //Old-> #     623: lvi_addRecords=lvi_addRecords+1
                    } // if (vArecB+lvi_addRecords >vArecB+gvi_COtrace)			 //Old-> #     624: endif

                  } //                 for (int i=1; i<=1; i++ ) {			 //Old-> #     625: end do
                vArecB = 0 ;								 //Old-> #     626: vArecB=0
                } // if (lvl_start2000)  ! end of start2000				 //Old-> #     627: endif ! end of start2000
              } // if (lvl_noTrace)  ! of noTrace					 //Old-> #     628: endif ! of noTrace
            } // if (gvi_COtrace < 1)gvi_COtrace=30  ! End of T%startyear			 //Old-> #     629: endif ! End of T%startyear
 // 										 //Old-> #     630: !
          vArecB = vArecB+1 ;							 //Old-> #     631: vArecB=vArecB+1
 // 										 //Old-> #     632: !

 //  New Code 06.22.11								 //Old-> #     634:  New Code 06.22.11! New Code 06.22.11
          lv_flow_B_maf(T%year) = lvi_flowCOacftMOD(gv_dataCO,vArecB)*gpd_acftTomaf !/1e6 ;	 //Old-> #     635: lv_flow_B_maf(T%year)=lvi_flowCOacftMOD(gv_dataCO,vArecB)*gpd_acftTomaf !/1e6
 // 										 //Old-> #     636: !
          if ((lvl_noTrace) ) {							 //Old-> #     637: if(lvl_noTrace)then
            if ((1 < vArecB) ) {							 //Old-> #     638: if(1 < vArecB)then
              lv_flow_B_maf(T%year-1) = lvi_flowCOacftMOD(gv_dataCO,vArecB-1)*gpd_acftTomaf ; //Old-> #     639: lv_flow_B_maf(T%year-1)=lvi_flowCOacftMOD(gv_dataCO,vArecB-1)*gpd_acftTomaf

              //* ## ?????  								 //OLD-> #     640: 

 //  start year									 //Old-> #     641:  start year! start year
              lv_flow_B_maf(T%year) = lvi_flowCOacftMOD(gv_dataCO,vArecB)*gpd_acftTomaf ;	 //Old-> #     642: lv_flow_B_maf(T%year)=lvi_flowCOacftMOD(gv_dataCO,vArecB)*gpd_acftTomaf
              } // if (1 < vArecB)							 //Old-> #     643: endif


            //* ## ?????  								 //OLD-> #     644: 

            if ((2000 < T%year) ) {							 //Old-> #     645: if(2000 < T%year)then
              if ((1 < vArecB) ) {							 //Old-> #     646: if(1 < vArecB)then
                lv_flow_B_maf(T%year-1) = lvi_flowCOacftMOD(gv_dataCO,vArecB-1)*gpd_acftTomaf ; //Old-> #     647: lv_flow_B_maf(T%year-1)=lvi_flowCOacftMOD(gv_dataCO,vArecB-1)*gpd_acftTomaf

                //* ## ?????  							 //OLD-> #     648: 

                lv_flow_B_maf(T%year-1) = lvi_flowCOacftMOD(gv_dataCO,vArecB)*gpd_acftTomaf ; //Old-> #     649: lv_flow_B_maf(T%year-1)=lvi_flowCOacftMOD(gv_dataCO,vArecB)*gpd_acftTomaf
                } // if (1 < vArecB)							 //Old-> #     650: endif


              //* ## ?????  								 //OLD-> #     651: 

              if ((1 < vArecB) ) {							 //Old-> #     652: if(1 < vArecB)then
                lv_flow_B_maf(T%year) = lvi_flowCOacftMOD(gv_dataCO,vArecB-1)*gpd_acftTomaf ; //Old-> #     653: lv_flow_B_maf(T%year)=lvi_flowCOacftMOD(gv_dataCO,vArecB-1)*gpd_acftTomaf

                //* ## ?????  							 //OLD-> #     654: 

                lv_flow_B_maf(T%year) = lvi_flowCOacftMOD(gv_dataCO,vArecB)*gpd_acftTomaf ;	 //Old-> #     655: lv_flow_B_maf(T%year)=lvi_flowCOacftMOD(gv_dataCO,vArecB)*gpd_acftTomaf
                } // if (1 < vArecB)							 //Old-> #     656: endif

              } // if (2000 < T%year)							 //Old-> #     657: endif

            } // if (lvl_noTrace)							 //Old-> #     658: endif

 // 										 //Old-> #     659: !
          if (( lv_flow_B_maf(T%year) <=0) ) {						 //Old-> #     660: if( lv_flow_B_maf(T%year) <=0)then
 //  catch this exception								 //Old-> #     661:  catch this exception! catch this exception
            lv_flow_B_maf(T%year) = 0. ;						 //Old-> #     662: lv_flow_B_maf(T%year)=0.

            //* ## ?????  								 //OLD-> #     663: 100


            //* ## ?????  								 //OLD-> #     663: 

            } // if ( lv_flow_B_maf(T%year) <=0)					 //Old-> #     664: endif


          } // if (T%year == T%startyear)						 //Old-> #     666: endif

 // 										 //Old-> #     667: !
											 //Old-> #     668: return


        //* ## ?????  								 //OLD-> #     669:     continue


        //* ## ?????  								 //OLD-> #     669: 

 // 										 //Old-> #     670: !
        if ((T%year .EQ. T%startyear) ) {						 //Old-> #     671: if(T%year .EQ. T%startyear)then
          if ((gvl_WriteLog) ) {							 //Old-> #     672: if(gvl_WriteLog)then
            string = 11 ;								 //Old-> #     673: string=11
            LU = 0 ;								 //Old-> #     674: LU=0
            sStrings(string,errorString) ;						 //Old-> #     675: call sStrings(string,errorString)
            eWrite(errorString,LU) ;							 //Old-> #     676: call eWrite(errorString,LU)
            } // if (gvl_WriteLog)							 //Old-> #     677: endif

          } // if (T%year .EQ. T%startyear)						 //Old-> #     678: endif

 // 										 //Old-> #     679: !
											 //Old-> #     680: return


        //* ## ?????  								 //OLD-> #     681: subroutine aFlow_b


        //* ## ?????  								 //OLD-> #     681: aFlow_b


        //* ## ?????  								 //OLD-> #     681: 

 // ---------------------								 //Old-> #     682: ---------------------!---------------------
 //  --------------------------							 //Old-> #     684:  --------------------------! --------------------------

//-----------------------------------------------------
        public void aModifyFlow_ba(T , T) {						 //Old-> #     685: subroutine aModifyFlow_ba(T)
 // 										 //Old-> #     686: !
 //  ------- Types ---------								 //Old-> #     687:  ------- Types ---------! ------- Types ---------
          double cf, lvf_inflows;							 //Old-> #     688: real :: cf,lvf_inflows
          double lvf_droughtFactor;							 //Old-> #     689: real :: lvf_droughtFactor
          int rec, dif, newRec;							 //Old-> #     690: integer :: rec,dif,newRec
 //  =======================								 //Old-> #     691:  =======================! =======================
 // 										 //Old-> #     692: !

 //  - Type Constructs -								 //Old-> #     694:  - Type Constructs -! - Type Constructs -

          //* ## ?????  								 //OLD-> #     695: runTime)T


          //* ## ?????  								 //OLD-> #     695: 

 //  ===================								 //Old-> #     696:  ===================! ===================
 // 										 //Old-> #     697: !
          lvf_droughtFactor = 1 ;							 //Old-> #     698: lvf_droughtFactor=1
 // 										 //Old-> #     699: !
 //  Moved here on 12 April, 2013							 //Old-> #     700:  Moved here on 12 April, 2013! Moved here on 12 April, 2013
 //  ----------------------------							 //Old-> #     701:  ----------------------------! ----------------------------
 //                 call aOutToInterface(T)						 //Old-> #     702:                 call aOutToInterface(T)!                call aOutToInterface(T)
 // 										 //Old-> #     703: !
          mvf_LeeFerry_acft = 0 ;							 //Old-> #     704: mvf_LeeFerry_acft=0
          mvf_LeeFerry_acft = lv_flow_B_maf(T%year)*(1/gpd_acftTomaf) ;			 //Old-> #     705: mvf_LeeFerry_acft=lv_flow_B_maf(T%year)*(1/gpd_acftTomaf)
 // 										 //Old-> #     706: !
 //  Read into the module inflow data between Powell and Mead				 //Old-> #     707:  Read into the module inflow data between Powell and Mead! Read into the module inflow data between Powell and Mead
 //  ------------------------------------------------------------------------		 //Old-> #     708:  ------------------------------------------------------------------------! ------------------------------------------------------------------------
          lvf_inflows = 0. ;								 //Old-> #     709: lvf_inflows=0.
          if ((T%year <=T%startyear) ) {						 //Old-> #     710: if(T%year <=T%startyear)then
            gvf_averageInFlowCO = 0. ;						 //Old-> #     711: gvf_averageInFlowCO=0.
            gvf_totalInFlowCO = 0. ;							 //Old-> #     712: gvf_totalInFlowCO=0.
            } // if (T%year <=T%startyear)						 //Old-> #     713: endif

          if ((.not. gpl_comparisons) ) {						 //Old-> #     714: if(.not. gpl_comparisons)then
            if ((T%year <= 2012) ) {							 //Old-> #     715: if(T%year <= 2012)then
              lvf_inflows = max(0,gvf_COInFlowPowellToMead_acft(T%year,2))* gpd_acftTomaf ;	 //Old-> #     716: lvf_inflows=max(0,gvf_COInFlowPowellToMead_acft(T%year,2))* gpd_acftTomaf

              //* ## ?????  								 //OLD-> #     717: 

              dif = 2013-gv_indexyearCO ;						 //Old-> #     718: dif=2013-gv_indexyearCO
              rec = T%year-dif ;							 //Old-> #     719: rec=T%year-dif
              newRec = 0 ;								 //Old-> #     720: newRec=0
 // 										 //Old-> #     721: !
              if ((rec <=2012) ) {							 //Old-> #     722: if(rec <=2012)then
                lvf_inflows = max(0,gvf_COInFlowPowellToMead_acft(rec,2))* gpd_acftTomaf ;	 //Old-> #     723: lvf_inflows=max(0,gvf_COInFlowPowellToMead_acft(rec,2))* gpd_acftTomaf

                //* ## ?????  							 //OLD-> #     724: 

 //  Added on 03.14.13								 //Old-> #     725:  Added on 03.14.13! Added on 03.14.13
                newRec = T%year-(dif * 2) ;						 //Old-> #     726: newRec=T%year-(dif * 2)
                if ((newRec <=2012) ) {						 //Old-> #     727: if(newRec <=2012)then
                  lvf_inflows = max(0,gvf_COInFlowPowellToMead_acft(newRec,2))* gpd_acftTomaf ; //Old-> #     728: lvf_inflows=max(0,gvf_COInFlowPowellToMead_acft(newRec,2))* gpd_acftTomaf

                  //* ## ?????  							 //OLD-> #     729: 

                  newRec = T%year-(dif * 3) ;						 //Old-> #     730: newRec=T%year-(dif * 3)
                  lvf_inflows = max(0,gvf_COInFlowPowellToMead_acft(newRec,2))* gpd_acftTomaf ; //Old-> #     731: lvf_inflows=max(0,gvf_COInFlowPowellToMead_acft(newRec,2))* gpd_acftTomaf
                  } // if (newRec <=2012)						 //Old-> #     732: endif

                } // if (rec <=2012)							 //Old-> #     733: endif

              } // if (T%year <= 2012)						 //Old-> #     734: endif


            //* ## ?????  								 //OLD-> #     735: 

            lvf_inflows = 0. ;							 //Old-> #     736: lvf_inflows=0.
            if ((T%year <=T%startyear) ) {						 //Old-> #     737: if(T%year <=T%startyear)then
              gvf_averageInFlowCO = 0. ;						 //Old-> #     738: gvf_averageInFlowCO=0.
              gvf_totalInFlowCO = 0. ;						 //Old-> #     739: gvf_totalInFlowCO=0.
              } // if (T%year <=T%startyear)						 //Old-> #     740: endif

            if ((T%year <= 2011) ) {							 //Old-> #     741: if(T%year <= 2011)then
              lvf_inflows = max(0,gvf_COInFlowPowellToMead_acft(T%year,2))* gpd_acftTomaf ;	 //Old-> #     742: lvf_inflows=max(0,gvf_COInFlowPowellToMead_acft(T%year,2))* gpd_acftTomaf

              //* ## ?????  								 //OLD-> #     743: 

              dif = 2012-gv_indexyearCO ;						 //Old-> #     744: dif=2012-gv_indexyearCO
              rec = T%year-(dif) ;							 //Old-> #     745: rec=T%year-(dif)
              newRec = 0 ;								 //Old-> #     746: newRec=0
 // 										 //Old-> #     747: !
              if ((rec <=2011) ) {							 //Old-> #     748: if(rec <=2011)then
                lvf_inflows = max(0,gvf_COInFlowPowellToMead_acft(rec,2))* gpd_acftTomaf ;	 //Old-> #     749: lvf_inflows=max(0,gvf_COInFlowPowellToMead_acft(rec,2))* gpd_acftTomaf

                //* ## ?????  							 //OLD-> #     750: 

                newRec = T%year-(dif * 2) ;						 //Old-> #     751: newRec=T%year-(dif * 2)
                if ((rec <= 2011) ) {							 //Old-> #     752: if(rec <= 2011)then
                  lvf_inflows = max(0,gvf_COInFlowPowellToMead_acft(rec,2))* gpd_acftTomaf ; //Old-> #     753: lvf_inflows=max(0,gvf_COInFlowPowellToMead_acft(rec,2))* gpd_acftTomaf

                  //* ## ?????  							 //OLD-> #     754: 

                  newRec = T%year-(dif * 3) ;						 //Old-> #     755: newRec=T%year-(dif * 3)
                  lvf_inflows = max(0,gvf_COInFlowPowellToMead_acft(newRec,2))* gpd_acftTomaf ; //Old-> #     756: lvf_inflows=max(0,gvf_COInFlowPowellToMead_acft(newRec,2))* gpd_acftTomaf
                  } // if (rec <= 2011)						 //Old-> #     757: endif

                } // if (rec <=2011)							 //Old-> #     758: endif

              } // if (T%year <= 2011)						 //Old-> #     759: endif

            } // if (.not. gpl_comparisons)						 //Old-> #     760: endif

 // 										 //Old-> #     761: !
 //  Module variable for inflow to be used below					 //Old-> #     762:  Module variable for inflow to be used below! Module variable for inflow to be used below
 //  03.14.13									 //Old-> #     763:  03.14.13! 03.14.13
          mvf_inflow_acft = 0 ;							 //Old-> #     764: mvf_inflow_acft=0
          mvf_inflow_acft = (lvf_inflows*(1./gpd_acftTomaf)) ;				 //Old-> #     765: mvf_inflow_acft=(lvf_inflows*(1./gpd_acftTomaf))
 // 										 //Old-> #     766: !
 //  Add inflow data to the Lee Ferry flow data					 //Old-> #     767:  Add inflow data to the Lee Ferry flow data! Add inflow data to the Lee Ferry flow data
          gvf_totalInFlowCO = (gvf_totalInFlowCO+lvf_inflows) ;				 //Old-> #     768: gvf_totalInFlowCO=(gvf_totalInFlowCO+lvf_inflows)
 // 										 //Old-> #     769: !
 //  Call the subroutine that calculates the climate factor (cf)				 //Old-> #     770:  Call the subroutine that calculates the climate factor (cf)! Call the subroutine that calculates the climate factor (cf)
 //  read from the interface								 //Old-> #     771:  read from the interface! read from the interface
 //  -                                                         -				 //Old-> #     772:  -                                                         -! -                                                         -
 //  Cannot index on zero, thus the +1 on T%simyear					 //Old-> #     773:  Cannot index on zero, thus the +1 on T%simyear! Cannot index on zero, thus the +1 on T%simyear
 //  ----------------------------------						 //Old-> #     774:  ----------------------------------! ----------------------------------
          ClimateFactorCO(T%simyear+1,cf) ;						 //Old-> #     775: call ClimateFactorCO(T%simyear+1,cf)
 // 										 //Old-> #     776: !
          lv_flow_B_maf(T%year) = (lv_flow_B_maf(T%year))*cf  ;				 //Old-> #     777: lv_flow_B_maf(T%year)=(lv_flow_B_maf(T%year))*cf 
 // 										 //Old-> #     778: !
 //  05.09.13									 //Old-> #     779:  05.09.13! 05.09.13
          mvf_powellToMeadInflows_maf = 0 ;						 //Old-> #     780: mvf_powellToMeadInflows_maf=0
          mvf_powellToMeadInflows_maf = lvf_inflows*cf  ;				 //Old-> #     781: mvf_powellToMeadInflows_maf=lvf_inflows*cf 
 //  06.26.13									 //Old-> #     782:  06.26.13! 06.26.13
 //  										 //Old-> #     783:  ! 
          lvf_powToMeadInFlowsYearMinus1(T%jumpYear) = 0 ;				 //Old-> #     784: lvf_powToMeadInFlowsYearMinus1(T%jumpYear)=0
          lvf_powToMeadInFlowsYearMinus1(T%jumpYear) = lvf_inflows*cf  ;			 //Old-> #     785: lvf_powToMeadInFlowsYearMinus1(T%jumpYear)=lvf_inflows*cf 
 // 										 //Old-> #     786: !

 //  Drought years and length of drought						 //Old-> #     788:  Drought years and length of drought! Drought years and length of drought
 //  -------------------------------------						 //Old-> #     789:  -------------------------------------! -------------------------------------
          lvf_droughtFactor = gv_droughtfactorCO ;					 //Old-> #     790: lvf_droughtFactor=gv_droughtfactorCO
          if ((T%year >= gv_droughtyearCO) ) {						 //Old-> #     791: if(T%year >= gv_droughtyearCO)then
            if ((T%year <=  gv_droughtyearendCO) ) {					 //Old-> #     792: if(T%year <=  gv_droughtyearendCO)then
              lv_flow_B_maf(T%year) = lv_flow_B_maf(T%year)*lvf_droughtFactor !gv_droughtfactorCO ; //Old-> #     793: lv_flow_B_maf(T%year)=lv_flow_B_maf(T%year)*lvf_droughtFactor !gv_droughtfactorCO
              mvf_powellToMeadInflows_maf =    mvf_powellToMeadInflows_maf* lvf_droughtFactor !gv_droughtfactorCO ; //Old-> #     794: mvf_powellToMeadInflows_maf=   mvf_powellToMeadInflows_maf* lvf_droughtFactor !gv_droughtfactorCO

              //* ## ?????  								 //OLD-> #     795: 

              lvf_droughtFactor = 1 ;							 //Old-> #     796: lvf_droughtFactor=1
              } // if (T%year <=  gv_droughtyearendCO)					 //Old-> #     797: endif


            //* ## ?????  								 //OLD-> #     798: 

            lvf_droughtFactor = 1 ;							 //Old-> #     799: lvf_droughtFactor=1
            } // if (T%year >= gv_droughtyearCO)					 //Old-> #     800: endif

 //  										 //Old-> #     801:  ! 
          return;									 //Old-> #     802: return

          }// aModifyFlow_ba								 //Old-> #     803: end subroutine aModifyFlow_ba
 // ----------------------------							 //Old-> #     804: ----------------------------!----------------------------

 //  ------------------------------							 //Old-> #     806:  ------------------------------! ------------------------------

//-----------------------------------------------------
        public void aModifyFlow_bb(T , T) {						 //Old-> #     807: subroutine aModifyFlow_bb(T)
 // 										 //Old-> #     808: !
 //  -------------- Types ----------------						 //Old-> #     809:  -------------- Types ----------------! -------------- Types ----------------
 //         real :: AfterFlowToEnvironment						 //Old-> #     810:         real :: AfterFlowToEnvironment!        real :: AfterFlowToEnvironment
 //  =====================================						 //Old-> #     811:  =====================================! =====================================
 // 										 //Old-> #     812: !

 //  - Type Constructs -								 //Old-> #     814:  - Type Constructs -! - Type Constructs -

          //* ## ?????  								 //OLD-> #     815: runTime)T


          //* ## ?????  								 //OLD-> #     815: 

 //  ===================								 //Old-> #     816:  ===================! ===================
 // 										 //Old-> #     817: !

 //  Water for the environment							 //Old-> #     819:  Water for the environment! Water for the environment
 //  maximum of 15% as of this writing						 //Old-> #     820:  maximum of 15% as of this writing! maximum of 15% as of this writing
 //  01.20.15 now will be determined by the pulse-flow					 //Old-> #     821:  01.20.15 now will be determined by the pulse-flow! 01.20.15 now will be determined by the pulse-flow
 //  minute 319 document of a portion of the						 //Old-> #     822:  minute 319 document of a portion of the! minute 319 document of a portion of the
 //  158,088.0 AF									 //Old-> #     823:  158,088.0 AF! 158,088.0 AF
 //  Reference:  http://ibwc.state.gov/Files/Minutes/Minute_319.pdf			 //Old-> #     824:  Reference:  http://ibwc.state.gov/Files/Minutes/Minute_319.pdf! Reference:  http://ibwc.state.gov/Files/Minutes/Minute_319.pdf
 //  -------------------------------------						 //Old-> #     825:  -------------------------------------! -------------------------------------
 //              AfterFlowToEnvironment=0						 //Old-> #     826:              AfterFlowToEnvironment=0!             AfterFlowToEnvironment=0
 //  02.25.15 Hardwired here until we use this variable					 //Old-> #     827:  02.25.15 Hardwired here until we use this variable! 02.25.15 Hardwired here until we use this variable
 //              gvi_WaterToEnvironCO_acft_a=0						 //Old-> #     828:              gvi_WaterToEnvironCO_acft_a=0!             gvi_WaterToEnvironCO_acft_a=0
 //             if(0. < gvi_WaterToEnvironCO_acft_a)then				 //Old-> #     829:             if(0. < gvi_WaterToEnvironCO_acft_a)then!            if(0. < gvi_WaterToEnvironCO_acft_a)then
 //                 ! 08.02.12 DAS							 //Old-> #     830:                 ! 08.02.12 DAS!                ! 08.02.12 DAS
 //                  maxEnvCO=mpf_maxEnvRiver*(lv_flow_B_maf(T%year)*(1./gpd_acftTomaf))	 //Old-> #     831:                  maxEnvCO=mpf_maxEnvRiver*(lv_flow_B_maf(T%year)*(1./gpd_acftTomaf))!                 maxEnvCO=mpf_maxEnvRiver*(lv_flow_B_maf(T%year)*(1./gpd_acftTomaf))
 //                 if(gvi_WaterToEnvironCO_acft_a < maxEnvCO)then			 //Old-> #     832:                 if(gvi_WaterToEnvironCO_acft_a < maxEnvCO)then!                if(gvi_WaterToEnvironCO_acft_a < maxEnvCO)then
 //                   AfterFlowToEnvironment=max(0.,lv_flow_B_maf(T%year)-(gvi_WaterToEnvironCO_acft_a*gpd_acftTomaf)) //Old-> #     833:                   AfterFlowToEnvironment=max(0.,lv_flow_B_maf(T%year)-(gvi_WaterToEnvironCO_acft_a*gpd_acftTomaf))!                  AfterFlowToEnvironment=max(0.,lv_flow_B_maf(T%year)-(gvi_WaterToEnvironCO_acft_a*gpd_acftTomaf))
 //                 else								 //Old-> #     834:                 else!                else
 //                   AfterFlowToEnvironment= lv_flow_B_maf(T%year)-(maxEnvCO*gpd_acftTomaf) //Old-> #     835:                   AfterFlowToEnvironment= lv_flow_B_maf(T%year)-(maxEnvCO*gpd_acftTomaf)!                  AfterFlowToEnvironment= lv_flow_B_maf(T%year)-(maxEnvCO*gpd_acftTomaf)
 //                 endif								 //Old-> #     836:                 endif!                endif
 //                 !								 //Old-> #     837:                 !!                !
 //                  lv_flow_B_maf(T%year)=AfterFlowToEnvironment			 //Old-> #     838:                  lv_flow_B_maf(T%year)=AfterFlowToEnvironment!                 lv_flow_B_maf(T%year)=AfterFlowToEnvironment
 //                 !								 //Old-> #     839:                 !!                !
 //                 !								 //Old-> #     840:                 !!                !
 //                 ! 08.07.12							 //Old-> #     841:                 ! 08.07.12!                ! 08.07.12
 //                 ! 1000 AF minimum set on 02.25.15					 //Old-> #     842:                 ! 1000 AF minimum set on 02.25.15!                ! 1000 AF minimum set on 02.25.15
 //                 if(lv_flow_B_maf(T%year) < 0.001)then				 //Old-> #     843:                 if(lv_flow_B_maf(T%year) < 0.001)then!                if(lv_flow_B_maf(T%year) < 0.001)then
 //                     if(gvl_writeLog)then						 //Old-> #     844:                     if(gvl_writeLog)then!                    if(gvl_writeLog)then
 //                         string=23							 //Old-> #     845:                         string=23!                        string=23
 //                         LU=0							 //Old-> #     846:                         LU=0!                        LU=0
 //                         call sStrings(string,errorString)				 //Old-> #     847:                         call sStrings(string,errorString)!                        call sStrings(string,errorString)
 //                         call eWrite(errorString,LU)					 //Old-> #     848:                         call eWrite(errorString,LU)!                        call eWrite(errorString,LU)
 //                     endif							 //Old-> #     849:                     endif!                    endif
 //                   !gvl_errorFlag=.false. Removed from use on 02.25.15			 //Old-> #     850:                   !gvl_errorFlag=.false. Removed from use on 02.25.15!                  !gvl_errorFlag=.false. Removed from use on 02.25.15
 //                 endif								 //Old-> #     851:                 endif!                endif
 //             else								 //Old-> #     852:             else!            else
 //             endif								 //Old-> #     853:             endif!            endif
 //  Move here on 01.24.2014 das							 //Old-> #     854:  Move here on 01.24.2014 das! Move here on 01.24.2014 das
 //                 call aOutToInterface(T)						 //Old-> #     855:                 call aOutToInterface(T)!                call aOutToInterface(T)
 // 										 //Old-> #     856: !
 // 										 //Old-> #     857: !
          return;									 //Old-> #     858: return

          }// aModifyFlow_bb								 //Old-> #     859: end subroutine aModifyFlow_bb
 // ---------------------------							 //Old-> #     860: ---------------------------!---------------------------

 //  --------------------------							 //Old-> #     862:  --------------------------! --------------------------

//-----------------------------------------------------
        public void aModifyFlow_bc(T , T) {						 //Old-> #     863: subroutine aModifyFlow_bc(T)
 // 										 //Old-> #     864: !
 //  ---------- Types --------------							 //Old-> #     865:  ---------- Types --------------! ---------- Types --------------
          double 8) = 5.5;								 //Old-> #     866: real(8) :: lv_first=5.5
          double 8) = 4.45;								 //Old-> #     867: real(8) :: lv_second=4.45
          double 8);								 //Old-> #     868: real(8) :: lv_third

          double 8);								 //Old-> #     870: real(8) :: lv_upperBasin  ! maf
          double 8);								 //Old-> #     871: real(8) :: vMax
          HighLowDoubleArray UBCU = new HighLowDoubleArray(2012,2000 );			 //Old-> #     872: real :: UBCU(2000:2012)
 //  ===============================							 //Old-> #     873:  ===============================! ===============================
 // 										 //Old-> #     874: !

 //  - Type Construct -								 //Old-> #     876:  - Type Construct -! - Type Construct -

          //* ## ?????  								 //OLD-> #     877: runTime)T


          //* ## ?????  								 //OLD-> #     877: 

 //  ==================								 //Old-> #     878:  ==================! ==================
 //  										 //Old-> #     879:  ! 
 //  12.20.12 DAS									 //Old-> #     880:  12.20.12 DAS! 12.20.12 DAS
 //  Year=1, 									 //Old-> #     881:  Year=1, ! Year=1, 
 //  2=2007 Upper CO River Comission Schedule						 //Old-> #     882:  2=2007 Upper CO River Comission Schedule! 2=2007 Upper CO River Comission Schedule
 //  3=Arizona Upper Basin Depletion schedule- Don Gross- ADWR, 30 November 2012 		 //Old-> #     883:  3=Arizona Upper Basin Depletion schedule- Don Gross- ADWR, 30 November 2012 ! 3=Arizona Upper Basin Depletion schedule- Don Gross- ADWR, 30 November 2012 
 //  4=simulated estimates								 //Old-> #     884:  4=simulated estimates! 4=simulated estimates
 //  ================================================================================ 	 //Old-> #     885:  ================================================================================ ! ================================================================================ 
 // 										 //Old-> #     886: !
          lv_upperBasin = 0. ;							 //Old-> #     887: lv_upperBasin=0.
          if ((gvf_upperBasinEstimate < 4) ) {						 //Old-> #     888: if(gvf_upperBasinEstimate < 4)then
            if ((1 < gvf_upperBasinEstimate) ) {					 //Old-> #     889: if(1 < gvf_upperBasinEstimate)then
              if ((T%year < 2061) ) {							 //Old-> #     890: if(T%year < 2061)then
 //  Upper basin data read as thousand acre-feet					 //Old-> #     891:  Upper basin data read as thousand acre-feet! Upper basin data read as thousand acre-feet
                lv_upperBasin = gvf_upperBasinDeliveries(T%year,int(gvf_upperBasinEstimate)) ; //Old-> #     892: lv_upperBasin=gvf_upperBasinDeliveries(T%year,int(gvf_upperBasinEstimate))

                //* ## ?????  							 //OLD-> #     893: 

                lv_upperBasin = gvf_upperBasinDeliveries(2060,int(gvf_upperBasinEstimate)) ; //Old-> #     894: lv_upperBasin=gvf_upperBasinDeliveries(2060,int(gvf_upperBasinEstimate))
                } // if (T%year < 2061)						 //Old-> #     895: endif


              //* ## ?????  								 //OLD-> #     896: 

              if ((T%year < 2061) ) {							 //Old-> #     897: if(T%year < 2061)then
                lv_upperBasin = gvf_upperBasinDeliveries(T%year,2) ;			 //Old-> #     898: lv_upperBasin=gvf_upperBasinDeliveries(T%year,2)

                //* ## ?????  							 //OLD-> #     899: 

                lv_upperBasin = gvf_upperBasinDeliveries(2060,2) ;			 //Old-> #     900: lv_upperBasin=gvf_upperBasinDeliveries(2060,2)
                } // if (T%year < 2061)						 //Old-> #     901: endif

              } // if (1 < gvf_upperBasinEstimate)					 //Old-> #     902: endif

 // 										 //Old-> #     903: !
 // 										 //Old-> #     904: !
 //  06.26.13 data from James Prairie (BofRec)upperbasinCUL_2015v1.10 1971-2015-4.1.13.xlsm	 //Old-> #     905:  06.26.13 data from James Prairie (BofRec)upperbasinCUL_2015v1.10 1971-2015-4.1.13.xlsm! 06.26.13 data from James Prairie (BofRec)upperbasinCUL_2015v1.10 1971-2015-4.1.13.xlsm
 //  --------------------								 //Old-> #     906:  --------------------! --------------------
            if ((T%year < 2013) ) {							 //Old-> #     907: if(T%year < 2013)then
              upperBasinEmpirical(T,UBCU) ;						 //Old-> #     908: call upperBasinEmpirical(T,UBCU)
              lv_upperBasin = UBCU(T%year) ! k AF units ;				 //Old-> #     909: lv_upperBasin=UBCU(T%year) ! k AF units
              } // if (T%year < 2013)							 //Old-> #     910: endif

 // 										 //Old-> #     911: !
 // 										 //Old-> #     912: !
            vMax = lv_flow_B_maf(T%year)-((lv_UpperBasin*1000)* gpd_acftTomaf)  ;		 //Old-> #     913: vMax=lv_flow_B_maf(T%year)-((lv_UpperBasin*1000)* gpd_acftTomaf) 
 // 										 //Old-> #     914: !
            go_upperBasinDeliveries = 0. ;						 //Old-> #     915: go_upperBasinDeliveries=0.
            go_upperBasinDeliveries = anint(lv_UpperBasin*1000)     ;			 //Old-> #     916: go_upperBasinDeliveries=anint(lv_UpperBasin*1000)    
 // 										 //Old-> #     917: !

            //* ## ?????  								 //OLD-> #     918: 

 //  million acre-feet								 //Old-> #     919:  million acre-feet! million acre-feet
            lv_third = (0.98/55.) * T%simyear ;					 //Old-> #     920: lv_third=(0.98/55.) * T%simyear
            lv_upperBasin = (min(lv_first,lv_second+lv_third))     ;			 //Old-> #     921: lv_upperBasin=(min(lv_first,lv_second+lv_third))    
 // 										 //Old-> #     922: !
            vMax = lv_flow_B_maf(T%year)-(lv_UpperBasin ) ;				 //Old-> #     923: vMax=lv_flow_B_maf(T%year)-(lv_UpperBasin )
 //  acre-feet									 //Old-> #     924:  acre-feet! acre-feet
            go_upperBasinDeliveries = anint(lv_UpperBasin*(1/gpd_acftTomaf))     ;		 //Old-> #     925: go_upperBasinDeliveries=anint(lv_UpperBasin*(1/gpd_acftTomaf))    
 // 										 //Old-> #     926: !
            } // if (gvf_upperBasinEstimate < 4)					 //Old-> #     927: endif

 // 										 //Old-> #     928: !
          lv_flow_B_maf(T%year) = max(0., (anint(vMax*(1/gpd_acftTomaf)) )* gpd_acftTomaf ) ; //Old-> #     929: lv_flow_B_maf(T%year)=max(0., (anint(vMax*(1/gpd_acftTomaf)) )* gpd_acftTomaf )
 // 										 //Old-> #     930: !
          mvf_upperBasin_acft = 0 ;							 //Old-> #     931: mvf_upperBasin_acft=0
          mvf_upperBasin_acft = lv_UpperBasin*1000 ;					 //Old-> #     932: mvf_upperBasin_acft=lv_UpperBasin*1000
 // 										 //Old-> #     933: !
          gvf_upperBasinCUse_acft_a = mvf_upperBasin_acft ;				 //Old-> #     934: gvf_upperBasinCUse_acft_a=mvf_upperBasin_acft
          mvf_totalCOallocatedUB = mvf_upperBasin_acft ;				 //Old-> #     935: mvf_totalCOallocatedUB=mvf_upperBasin_acft
 // 										 //Old-> #     936: !
          return;									 //Old-> #     937: return

          }// aModifyFlow_bc								 //Old-> #     938: end subroutine aModifyFlow_bc
 // ----------------------------							 //Old-> #     939: ----------------------------!----------------------------


//-----------------------------------------------------
        public void upperBasinEmpirical(T , double actualUBCU) {				 //Old-> #     941: subroutine upperBasinEmpirical(T,actualUBCU)
 // 										 //Old-> #     942: !
 //  ---- Types ----------------							 //Old-> #     943:  ---- Types ----------------! ---- Types ----------------
 //  Upper Basin Consumptive Use							 //Old-> #     944:  Upper Basin Consumptive Use! Upper Basin Consumptive Use
          // Skipped								 //OLD-> #     945:         real :: actualUBCU(2000:2012)
 //  ===========================							 //Old-> #     946:  ===========================! ===========================
 // 										 //Old-> #     947: !

 //  - Type Construct -								 //Old-> #     949:  - Type Construct -! - Type Construct -

          //* ## ?????  								 //OLD-> #     950: runTime)T


          //* ## ?????  								 //OLD-> #     950: 

 //  ==================								 //Old-> #     951:  ==================! ==================
 // 										 //Old-> #     952: !
 //  Units are Thousand AF								 //Old-> #     953:  Units are Thousand AF! Units are Thousand AF
          actualUBCU(2000) = 3955.722; actualUBCU(2001)=4218.954 ;			 //Old-> #     954: actualUBCU(2000)=3955.722; actualUBCU(2001)=4218.954
          actualUBCU(2002) = 3774.367; actualUBCU(2003)=3789.496 ;			 //Old-> #     955: actualUBCU(2002)=3774.367; actualUBCU(2003)=3789.496
          actualUBCU(2004) = 3550.691; actualUBCU(2005)=3645.886 ;			 //Old-> #     956: actualUBCU(2004)=3550.691; actualUBCU(2005)=3645.886
          actualUBCU(2006) = 3837.139; actualUBCU(2007)=4120.767 ;			 //Old-> #     957: actualUBCU(2006)=3837.139; actualUBCU(2007)=4120.767
          actualUBCU(2008) = 4180.609; actualUBCU(2009)=4117.443 ;			 //Old-> #     958: actualUBCU(2008)=4180.609; actualUBCU(2009)=4117.443
          actualUBCU(2010) = 4001.442; actualUBCU(2011)=4100.000 ;			 //Old-> #     959: actualUBCU(2010)=4001.442; actualUBCU(2011)=4100.000
          actualUBCU(2012) = 4100.000 ;						 //Old-> #     960: actualUBCU(2012)=4100.000
 // 										 //Old-> #     961: !
 //             actualUBCU(2000)=4618.021						 //Old-> #     962:             actualUBCU(2000)=4618.021!            actualUBCU(2000)=4618.021
 //             actualUBCU(2001)=4835.292						 //Old-> #     963:             actualUBCU(2001)=4835.292!            actualUBCU(2001)=4835.292
 //             actualUBCU(2002)=4287.951						 //Old-> #     964:             actualUBCU(2002)=4287.951!            actualUBCU(2002)=4287.951
 //             actualUBCU(2003)=4217.664						 //Old-> #     965:             actualUBCU(2003)=4217.664!            actualUBCU(2003)=4217.664
 //             actualUBCU(2004)=3905.892						 //Old-> #     966:             actualUBCU(2004)=3905.892!            actualUBCU(2004)=3905.892
 //             actualUBCU(2005)=4039.762						 //Old-> #     967:             actualUBCU(2005)=4039.762!            actualUBCU(2005)=4039.762
 //             actualUBCU(2006)=4281.102						 //Old-> #     968:             actualUBCU(2006)=4281.102!            actualUBCU(2006)=4281.102
 //             actualUBCU(2007)=4573.771						 //Old-> #     969:             actualUBCU(2007)=4573.771!            actualUBCU(2007)=4573.771
 //             actualUBCU(2008)=4676.306						 //Old-> #     970:             actualUBCU(2008)=4676.306!            actualUBCU(2008)=4676.306
 //             actualUBCU(2009)=4650.962						 //Old-> #     971:             actualUBCU(2009)=4650.962!            actualUBCU(2009)=4650.962
 //             actualUBCU(2010)=4532.513 						 //Old-> #     972:             actualUBCU(2010)=4532.513 !            actualUBCU(2010)=4532.513 
 // 										 //Old-> #     973: !
          return;									 //Old-> #     974: return

          }// upperBasinEmpirical							 //Old-> #     975: end subroutine upperBasinEmpirical
 //  --------------------------------							 //Old-> #     976:  --------------------------------! --------------------------------

 //  -------------------------							 //Old-> #     978:  -------------------------! -------------------------

//-----------------------------------------------------
        public void aOutToInterface(T , T) {						 //Old-> #     979: subroutine aOutToInterface(T)
 // 										 //Old-> #     980: !
 //  -- Type Construct --								 //Old-> #     981:  -- Type Construct --! -- Type Construct --

          //* ## ?????  								 //OLD-> #     982: runTime)T


          //* ## ?????  								 //OLD-> #     982: 

 //  ====================								 //Old-> #     983:  ====================! ====================
 //  										 //Old-> #     984:  ! 
 //  Send to the interface the river flow data (moved here on 01.21.13)			 //Old-> #     985:  Send to the interface the river flow data (moved here on 01.21.13)! Send to the interface the river flow data (moved here on 01.21.13)
          go_riverFlowCO = 0 ;							 //Old-> #     986: go_riverFlowCO=0
          go_riverFlowCO = NINT((lv_flow_B_maf(T%year)) * (1./gpd_acftTomaf)) ;		 //Old-> #     987: go_riverFlowCO=NINT((lv_flow_B_maf(T%year)) * (1./gpd_acftTomaf))
 // 										 //Old-> #     988: !
 // 										 //Old-> #     989: !
          return;									 //Old-> #     990: return

          }// aOutToInterface							 //Old-> #     991: end subroutine aOutToInterface
 //  ----------------------------							 //Old-> #     992:  ----------------------------! ----------------------------

 //  ----------------------------							 //Old-> #     994:  ----------------------------! ----------------------------

//-----------------------------------------------------
        public void reservoirs_b(T , wsb) {						 //Old-> #     995: subroutine reservoirs_b(T,wsb)
 // 										 //Old-> #     996: !
 //  -- Type Construct --								 //Old-> #     997:  -- Type Construct --! -- Type Construct --

          //* ## ?????  								 //OLD-> #     998: watershed_B)::wsb


          //* ## ?????  								 //OLD-> #     998: 


          //* ## ?????  								 //OLD-> #     999: runTime)T


          //* ## ?????  								 //OLD-> #     999: 

 //  ====================								 //Old-> #    1000:  ====================! ====================
 // 										 //Old-> #    1001: !
 // 										 //Old-> #    1002: !
          if ((T%atStartOfSimulation) ) {						 //Old-> #    1003: if(T%atStartOfSimulation)then
            initial_CO(wsb) ;							 //Old-> #    1004: call initial_CO(wsb)
 // 										 //Old-> #    1005: !
            if ((gpl_runSensitivity) ) {						 //Old-> #    1006: if(gpl_runSensitivity)then
              initializeCOsensitivity() ;						 //Old-> #    1007: call initializeCOsensitivity()
              } // if (gpl_runSensitivity)						 //Old-> #    1008: endif

 // 										 //Old-> #    1009: !
            } // if (T%atStartOfSimulation)						 //Old-> #    1010: endif

 // 										 //Old-> #    1011: !
          initialStorage_B(T)            ! initial storage powell and mead ;		 //Old-> #    1012: call initialStorage_B(T)            ! initial storage powell and mead
          expectedStorage_ba(T,wsb)      ! initialize powell: pre-powell ;		 //Old-> #    1013: call expectedStorage_ba(T,wsb)      ! initialize powell: pre-powell
          expectedStorage_bb(T,wsb)      ! initialize Mead ;				 //Old-> #    1014: call expectedStorage_bb(T,wsb)      ! initialize Mead
          aModifyStorage_ba(T,wsb)       ! Powell equalizations - seven states rules ;	 //Old-> #    1015: call aModifyStorage_ba(T,wsb)       ! Powell equalizations - seven states rules
          aModifyStorage_bb(T,wsb)       ! lower basin water demand/use ;			 //Old-> #    1016: call aModifyStorage_bb(T,wsb)       ! lower basin water demand/use
          designations_B(T,wsb)          ! CAP allocations ;				 //Old-> #    1017: call designations_B(T,wsb)          ! CAP allocations
 // 										 //Old-> #    1018: !
 // 										 //Old-> #    1019: !
          return;									 //Old-> #    1020: return

          }// reservoirs_b								 //Old-> #    1021: end subroutine reservoirs_b
 // --------------------------							 //Old-> #    1022: --------------------------!--------------------------

 //  ----------------------------------						 //Old-> #    1024:  ----------------------------------! ----------------------------------

//-----------------------------------------------------
        public void initializeCOsensitivity() { 					 //Old-> #    1025: subroutine initializeCOsensitivity()

          mpf_pan_mead = gpf_panMead  ;						 //Old-> #    1027: mpf_pan_mead=gpf_panMead 
          mpf_pan_reach = gpf_panReach ;						 //Old-> #    1028: mpf_pan_reach=gpf_panReach
          mpf_pan_powell = gpf_panPowell   ;						 //Old-> #    1029: mpf_pan_powell=gpf_panPowell  
          mpf_mod_BankStorage = gpf_bankStorage ;					 //Old-> #    1030: mpf_mod_BankStorage=gpf_bankStorage
          mpf_bankStoragePowell = gpf_bankStoragePowell ;				 //Old-> #    1032: mpf_bankStoragePowell=gpf_bankStoragePowell
          mpf_bankStorageMead = gpf_bankStorageMead ;					 //Old-> #    1033: mpf_bankStorageMead=gpf_bankStorageMead

          return;									 //Old-> #    1035: return

          }// initializeCOsensitivity							 //Old-> #    1036: end subroutine initializeCOsensitivity
 //  ----------------------------------						 //Old-> #    1037:  ----------------------------------! ----------------------------------

 //  ----------------------------------						 //Old-> #    1039:  ----------------------------------! ----------------------------------

//-----------------------------------------------------
        public void expectedStorage_ba(T , wsb) {					 //Old-> #    1040: subroutine expectedStorage_ba(T,wsb)
 // 										 //Old-> #    1041: !
 //  ------ Types ---------------							 //Old-> #    1042:  ------ Types ---------------! ------ Types ---------------
          double 8);								 //Old-> #    1043: real(8) :: lv_Evap_ba
          double fEvaporation_Powell;							 //Old-> #    1044: real :: fEvaporation_Powell
          double lvf_flux;								 //Old-> #    1045: real :: lvf_flux
          double lvf_normalRelease = 8.23;						 //Old-> #    1046: real :: lvf_normalRelease=8.23
 //  ============================							 //Old-> #    1047:  ============================! ============================
 // 										 //Old-> #    1048: !

 //  ---- Type Construct ---								 //Old-> #    1050:  ---- Type Construct ---! ---- Type Construct ---

          //* ## ?????  								 //OLD-> #    1051: watershed_B)::wsb


          //* ## ?????  								 //OLD-> #    1051: 


          //* ## ?????  								 //OLD-> #    1052: runTime)T


          //* ## ?????  								 //OLD-> #    1052: 

 //  =======================								 //Old-> #    1053:  =======================! =======================
 // 										 //Old-> #    1054: !
 // 										 //Old-> #    1055: !
 //  Re-analyzed on 04.02.12 (maf)							 //Old-> #    1056:  Re-analyzed on 04.02.12 (maf)! Re-analyzed on 04.02.12 (maf)
 //  Re-check my addition of Evap back into the estimate (05.04.12)			 //Old-> #    1057:  Re-check my addition of Evap back into the estimate (05.04.12)! Re-check my addition of Evap back into the estimate (05.04.12)
 //  --------------------------------------------------------------------			 //Old-> #    1058:  --------------------------------------------------------------------! --------------------------------------------------------------------
          lv_Evap_ba = 0. ;								 //Old-> #    1059: lv_Evap_ba=0.
          lv_Evap_ba = fEvaporation_Powell(vState_Ba_maf(T%year),mpf_pan_powell)   ;	 //Old-> #    1060: lv_Evap_ba=fEvaporation_Powell(vState_Ba_maf(T%year),mpf_pan_powell)  
 // 										 //Old-> #    1061: !
          lvf_flux = 0 ;								 //Old-> #    1062: lvf_flux=0
          lvf_flux = (max(0.,vState_Ba_maf(T%year) &  ;					 //Old-> #    1063: lvf_flux=(max(0.,vState_Ba_maf(T%year) & 

          //* ## ?????  								 //OLD-> #    1064: lv_flow_B_maf(T%year)  &


          //* ## ?????  								 //OLD-> #    1064: T%year)  &


          //* ## ?????  								 //OLD-> #    1064:  &


          //* ## ?????  								 //OLD-> #    1064: 


          //* ## ?????  								 //OLD-> #    1065: (lvf_normalRelease + lv_Evap_ba) )) 


          //* ## ?????  								 //OLD-> #    1065: + lv_Evap_ba) )) 


          //* ## ?????  								 //OLD-> #    1065: lv_Evap_ba) )) 


          //* ## ?????  								 //OLD-> #    1065: )) 


          //* ## ?????  								 //OLD-> #    1065: 

 // 										 //Old-> #    1066: !
          if ((li_powelldeadpool < lvf_flux) ) {					 //Old-> #    1067: if(li_powelldeadpool < lvf_flux)then
            wsb%vState_Ba_pred_maf(T%year) =  lvf_flux ;				 //Old-> #    1068: wsb%vState_Ba_pred_maf(T%year)= lvf_flux

            //* ## ?????  								 //OLD-> #    1069: 

            wsb%vState_Ba_pred_maf(T%year) = li_powelldeadpool ;				 //Old-> #    1070: wsb%vState_Ba_pred_maf(T%year)=li_powelldeadpool
            } // if (li_powelldeadpool < lvf_flux)					 //Old-> #    1071: endif

 //    										 //Old-> #    1072:    !   
 //  04.30.13									 //Old-> #    1073:  04.30.13! 04.30.13
          wsb%powell_flux_maf(T%year) = lv_flow_B_maf(T%year)-lv_Evap_ba ;		 //Old-> #    1074: wsb%powell_flux_maf(T%year)=lv_flow_B_maf(T%year)-lv_Evap_ba
 // 										 //Old-> #    1075: !
 // 										 //Old-> #    1076: !
          return;									 //Old-> #    1077: return

          }// expectedStorage_ba							 //Old-> #    1078: end subroutine expectedStorage_ba
 // --------------------------------							 //Old-> #    1079: --------------------------------!--------------------------------

 //  ----------------------------							 //Old-> #    1081:  ----------------------------! ----------------------------

//-----------------------------------------------------
        public void initialStorage_B(T , T) {						 //Old-> #    1082: subroutine initialStorage_B(T)
 // 										 //Old-> #    1083: !
 //  -- Type Construct --								 //Old-> #    1084:  -- Type Construct --! -- Type Construct --

          //* ## ?????  								 //OLD-> #    1085: runTime)T


          //* ## ?????  								 //OLD-> #    1085: 

 //  ====================								 //Old-> #    1086:  ====================! ====================
 // 										 //Old-> #    1087: !
 //  Total Volume and NOT live volume (maf)						 //Old-> #    1088:  Total Volume and NOT live volume (maf)! Total Volume and NOT live volume (maf)
 //  --------------------------------------						 //Old-> #    1089:  --------------------------------------! --------------------------------------
          if ((T%year == T%startyear) ) {						 //Old-> #    1090: if(T%year == T%startyear)then
            lvf_initial_state_Powell = vState_Ba_maf(T%year) ;				 //Old-> #    1091: lvf_initial_state_Powell=vState_Ba_maf(T%year)
            lvf_initial_state_Mead =  vState_Bb_maf(T%year) ;				 //Old-> #    1092: lvf_initial_state_Mead= vState_Bb_maf(T%year)
            } // if (T%year == T%startyear)						 //Old-> #    1093: endif

 // 										 //Old-> #    1094: !
 // 										 //Old-> #    1095: !
          return;									 //Old-> #    1096: return

          }// initialStorage_B							 //Old-> #    1097: end subroutine initialStorage_B
 // ------------------------------							 //Old-> #    1098: ------------------------------!------------------------------

 //  ---------------------------------						 //Old-> #    1100:  ---------------------------------! ---------------------------------

//-----------------------------------------------------
        public void expectedStorage_bb(T , wsb) {					 //Old-> #    1101: subroutine expectedStorage_bb(T,wsb)
 // 										 //Old-> #    1102: !
 //  ----------- Types and parameters ----------					 //Old-> #    1103:  ----------- Types and parameters ----------! ----------- Types and parameters ----------
          double 8);								 //Old-> #    1104: real(8) :: lv_Evap_bb
          double fEvaporation_Mead;							 //Old-> #    1105: real :: fEvaporation_Mead
          double lvf_flux;								 //Old-> #    1106: real :: lvf_flux
          const double lvp_normalOut = 9.;						 //Old-> #    1107: real, parameter :: lvp_normalOut=9.
          const double lvp_normalIn = 8.23;						 //Old-> #    1108: real,parameter :: lvp_normalIn=8.23
 //  ===========================================					 //Old-> #    1109:  ===========================================! ===========================================

 //  - Type Constructs ----								 //Old-> #    1111:  - Type Constructs ----! - Type Constructs ----

          //* ## ?????  								 //OLD-> #    1112: watershed_B)::wsb


          //* ## ?????  								 //OLD-> #    1112: 


          //* ## ?????  								 //OLD-> #    1113: runTime)T


          //* ## ?????  								 //OLD-> #    1113: 

 //  ======================								 //Old-> #    1114:  ======================! ======================
 // 										 //Old-> #    1115: !
 //  Total volume and NOT live volume							 //Old-> #    1116:  Total volume and NOT live volume! Total volume and NOT live volume
 //  BUT, using live storage for predicted for the balancing 				 //Old-> #    1117:  BUT, using live storage for predicted for the balancing ! BUT, using live storage for predicted for the balancing 
 //  ------------------------------------------------------------------------		 //Old-> #    1118:  ------------------------------------------------------------------------! ------------------------------------------------------------------------
          lv_Evap_bb = 0. ;								 //Old-> #    1119: lv_Evap_bb=0.
          lv_Evap_bb = fEvaporation_Mead(vState_Bb_maf(T%year),gpf_panMead) ;		 //Old-> #    1120: lv_Evap_bb=fEvaporation_Mead(vState_Bb_maf(T%year),gpf_panMead)
 // 										 //Old-> #    1121: !
          lvf_flux = 0 ;								 //Old-> #    1122: lvf_flux=0
          lvf_flux = max(0.,vState_Bb_maf(T%year) & ;					 //Old-> #    1123: lvf_flux=max(0.,vState_Bb_maf(T%year) &

          //* ## ?????  								 //OLD-> #    1124: lvp_normalIn + mvf_powellToMeadInflows_maf &


          //* ## ?????  								 //OLD-> #    1124: + mvf_powellToMeadInflows_maf &


          //* ## ?????  								 //OLD-> #    1124: mvf_powellToMeadInflows_maf &


          //* ## ?????  								 //OLD-> #    1124: &


          //* ## ?????  								 //OLD-> #    1124: 


          //* ## ?????  								 //OLD-> #    1125: (lvp_normalOut+lv_Evap_bb))


          //* ## ?????  								 //OLD-> #    1125: 

 // 										 //Old-> #    1126: !
          if ((li_meaddeadpool < lvf_flux) ) {						 //Old-> #    1127: if(li_meaddeadpool < lvf_flux)then
            wsb%vState_Bb_pred_maf(T%year) =  lvf_flux  ;				 //Old-> #    1128: wsb%vState_Bb_pred_maf(T%year)= lvf_flux 

            //* ## ?????  								 //OLD-> #    1129: 

            wsb%vState_Bb_pred_maf(T%year) = li_meaddeadpool ;				 //Old-> #    1130: wsb%vState_Bb_pred_maf(T%year)=li_meaddeadpool
            } // if (li_meaddeadpool < lvf_flux)					 //Old-> #    1131: endif

 // 										 //Old-> #    1132: !
          wsb%mead_flux_maf(T%year) =  -(lv_Evap_bb + lvp_normalOut) + mvf_powellToMeadInflows_maf ; //Old-> #    1133: wsb%mead_flux_maf(T%year)= -(lv_Evap_bb + lvp_normalOut) + mvf_powellToMeadInflows_maf
 // 										 //Old-> #    1134: !
 // 										 //Old-> #    1135: !
          return;									 //Old-> #    1136: return

          }// expectedStorage_bb							 //Old-> #    1137: end subroutine expectedStorage_Bb
 // --------------------------------							 //Old-> #    1138: --------------------------------!--------------------------------

 //  Reservoir Bank Storage								 //Old-> #    1140:  Reservoir Bank Storage! Reservoir Bank Storage
 //  05.10.13									 //Old-> #    1141:  05.10.13! 05.10.13
 //  ------------------------------------------					 //Old-> #    1142:  ------------------------------------------! ------------------------------------------

//-----------------------------------------------------
        public double fBankStoragePowell(double lvf_diffStorage , double lvf_diffStorage) {  double result = 0; //Old-> #    1143: function fBankStoragePowell(lvf_diffStorage)
 // 										 //Old-> #    1144: !
 //  ------------- Types -----------------------					 //Old-> #    1145:  ------------- Types -----------------------! ------------- Types -----------------------
          // Skipped								 //OLD-> #    1146:             real :: lvf_diffStorage
          // Skipped								 //OLD-> #    1147:             real :: fBankStoragePowell
 // real, parameter :: lpf_bankStoragePowell=0.08					 //Old-> #    1148: real, parameter :: lpf_bankStoragePowell=0.08!real, parameter :: lpf_bankStoragePowell=0.08
 //  ===========================================					 //Old-> #    1149:  ===========================================! ===========================================
 // 										 //Old-> #    1150: !
 // 										 //Old-> #    1151: !
          result = lvf_diffStorage*mpf_bankStoragePowell;				 //Old-> #    1152: fBankStoragePowell=lvf_diffStorage*mpf_bankStoragePowell
 // 										 //Old-> #    1153: !
 // 										 //Old-> #    1154: !
          return result;								 //Old-> #    1155: return

           return result; }// fBankStoragePowell					 //Old-> #    1156: end function fBankStoragePowell
 //  -----------------------------							 //Old-> #    1157:  -----------------------------! -----------------------------

 //  ----------------------------------------						 //Old-> #    1159:  ----------------------------------------! ----------------------------------------

//-----------------------------------------------------
        public double fBankStorageMead(double lvf_diffStorage , double lvf_diffStorage) {  double result = 0; //Old-> #    1160: function fBankStorageMead(lvf_diffStorage)
 // 										 //Old-> #    1161: !
 //  ---------------- Types -------------------					 //Old-> #    1162:  ---------------- Types -------------------! ---------------- Types -------------------
          // Skipped								 //OLD-> #    1163:             real :: lvf_diffStorage
          // Skipped								 //OLD-> #    1164:             real :: fBankStorageMead
 // real, parameter :: lpf_bankStorageMead=0.065 ! 0.065				 //Old-> #    1165: real, parameter :: lpf_bankStorageMead=0.065 ! 0.065!real, parameter :: lpf_bankStorageMead=0.065 ! 0.065
 //  ==========================================					 //Old-> #    1166:  ==========================================! ==========================================
 // 										 //Old-> #    1167: !
          result = lvf_diffStorage*mpf_bankStorageMead;					 //Old-> #    1168: fBankStorageMead=lvf_diffStorage*mpf_bankStorageMead
 // 										 //Old-> #    1169: !
 // 										 //Old-> #    1170: !
          return result;								 //Old-> #    1171: return

           return result; }// fBankStorageMead						 //Old-> #    1172: end function fBankStorageMead
 //  ----------------------------							 //Old-> #    1173:  ----------------------------! ----------------------------

 //  ---------------------------------						 //Old-> #    1175:  ---------------------------------! ---------------------------------

//-----------------------------------------------------
        public void aModifyStorage_ba(T , wsb) {					 //Old-> #    1176: subroutine aModifyStorage_ba(T,wsb)
 // 										 //Old-> #    1177: !
 //  ---------------------- Types -----------------------------				 //Old-> #    1178:  ---------------------- Types -----------------------------! ---------------------- Types -----------------------------
          double 8);								 //Old-> #    1179: real(8) :: lv_Evap_ba
          double 8);								 //Old-> #    1180: real(8) :: lv_State_ba,lvd_Pp,lvd_Pm,lvd_balanceamount,state
          double 8);								 //Old-> #    1181: real(8) :: lv_Ssr
          double fEvaporation_Powell;							 //Old-> #    1182: real :: fEvaporation_Powell
          double lvf_diffStorage[]  = new double[3]  ;					 //Old-> #    1183: real :: lvf_diffStorage(3)
          double 8);								 //Old-> #    1184: real(8) :: lvd_annual
          double lvf_bankStorage_maf;							 //Old-> #    1185: real :: lvf_bankStorage_maf
          double lvf_fluxPreBanked, lvf_flux;						 //Old-> #    1186: real :: lvf_fluxPreBanked,lvf_flux

          bool lvl_testReservoirOps;							 //Old-> #    1188: logical :: lvl_testReservoirOps
 //  ==========================================================				 //Old-> #    1189:  ==========================================================! ==========================================================

 //  -- Type Constructs ---								 //Old-> #    1191:  -- Type Constructs ---! -- Type Constructs ---

          //* ## ?????  								 //OLD-> #    1192: watershed_B)::wsb


          //* ## ?????  								 //OLD-> #    1192: 


          //* ## ?????  								 //OLD-> #    1193: runTime)T


          //* ## ?????  								 //OLD-> #    1193: 

 //  ======================								 //Old-> #    1194:  ======================! ======================
 //   										 //Old-> #    1195:   !  
 //  ------------------------------							 //Old-> #    1196:  ------------------------------! ------------------------------
          lvl_testReservoirOps = .false. ;						 //Old-> #    1197: lvl_testReservoirOps=.false.
 // 										 //Old-> #    1198: !
          state = 0 ;								 //Old-> #    1199: state=0
          state = vState_Ba_maf(T%year)  ;						 //Old-> #    1200: state=vState_Ba_maf(T%year) 
 //                   								 //Old-> #    1201:                   !                  
          lv_Evap_ba = 0 ;								 //Old-> #    1202: lv_Evap_ba=0
          lv_Evap_ba = fEvaporation_Powell(vState_Ba_maf(T%year),mpf_pan_powell)   ;	 //Old-> #    1203: lv_Evap_ba=fEvaporation_Powell(vState_Ba_maf(T%year),mpf_pan_powell)  
 // 										 //Old-> #    1204: !
          mvf_powellEvaporation_acft = 0 ;						 //Old-> #    1205: mvf_powellEvaporation_acft=0
          mvf_powellEvaporation_acft = lv_Evap_ba*(1/gpd_acftTomaf) ;			 //Old-> #    1206: mvf_powellEvaporation_acft=lv_Evap_ba*(1/gpd_acftTomaf)
 // 										 //Old-> #    1207: !
          lvd_Pp = 0 ;								 //Old-> #    1208: lvd_Pp=0
          lvd_Pp =  wsb%vState_Ba_pred_maf(T%year)  ;					 //Old-> #    1209: lvd_Pp = wsb%vState_Ba_pred_maf(T%year) 
 // 										 //Old-> #    1210: !
          lvd_Pm = 0 ;								 //Old-> #    1211: lvd_Pm=0
          lvd_Pm =  wsb%vState_Bb_pred_maf(T%year)  ;					 //Old-> #    1212: lvd_Pm= wsb%vState_Bb_pred_maf(T%year) 
 // 										 //Old-> #    1213: !
          lvf_diffStorage(1) = 0 ;							 //Old-> #    1214: lvf_diffStorage(1)=0
          lvf_diffStorage(1) = state-lvd_Pp ;						 //Old-> #    1215: lvf_diffStorage(1)=state-lvd_Pp
 // 										 //Old-> #    1216: !
 //  --------------------------------------------------------------------------		 //Old-> #    1217:  --------------------------------------------------------------------------! --------------------------------------------------------------------------
 //  Verification of my code								 //Old-> #    1218:  Verification of my code! Verification of my code
 //  =========================							 //Old-> #    1219:  =========================! =========================
          if ((gpl_verify) ) {							 //Old-> #    1220: if(gpl_verify)then
            actualStorage(T,lvd_Pp,lvd_Pm,lvf_diffStorage) ;				 //Old-> #    1221: call actualStorage(T,lvd_Pp,lvd_Pm,lvf_diffStorage)
            } // if (gpl_verify)							 //Old-> #    1222: endif

 // 										 //Old-> #    1223: !
          lvf_diffStorage(3) =  lvf_diffStorage(1)*mpf_mod_BankStorage ;			 //Old-> #    1224: lvf_diffStorage(3)= lvf_diffStorage(1)*mpf_mod_BankStorage
 // 										 //Old-> #    1225: !
 //  =========================							 //Old-> #    1226:  =========================! =========================
 // 										 //Old-> #    1227: !
 //  Balance amount									 //Old-> #    1228:  Balance amount! Balance amount
 //  --------------------------------------						 //Old-> #    1229:  --------------------------------------! --------------------------------------
          lvd_balanceamount = 0 ;							 //Old-> #    1230: lvd_balanceamount=0
          lvd_balanceamount = (lvd_Pp-lvd_Pm)*0.5 ;					 //Old-> #    1231: lvd_balanceamount=(lvd_Pp-lvd_Pm)*0.5
 // 										 //Old-> #    1232: !
 //  Flux estiamtes used to estimate lv_Ssr						 //Old-> #    1233:  Flux estiamtes used to estimate lv_Ssr! Flux estiamtes used to estimate lv_Ssr
 //  ---------------------------------------						 //Old-> #    1234:  ---------------------------------------! ---------------------------------------
          mvf_powell_flux = wsb%powell_flux_maf(T%year) ;				 //Old-> #    1235: mvf_powell_flux=wsb%powell_flux_maf(T%year)
          mvf_mead_flux = wsb%mead_flux_maf(T%year) ;					 //Old-> #    1236: mvf_mead_flux=wsb%mead_flux_maf(T%year)
 // 										 //Old-> #    1237: !
 //                ! Threshold storage and associated release				 //Old-> #    1238:                ! Threshold storage and associated release!               ! Threshold storage and associated release
 //  ---------------------------------------						 //Old-> #    1239:  ---------------------------------------! ---------------------------------------
          threshold_b(T,lvd_Pp,lvd_balanceamount,lv_Ssr) ;				 //Old-> #    1240: call threshold_b(T,lvd_Pp,lvd_balanceamount,lv_Ssr)
 //  ------------------								 //Old-> #    1241:  ------------------! ------------------
 // 										 //Old-> #    1242: !
          wsb%lv_BaToBb(T%year) = 0 ;							 //Old-> #    1243: wsb%lv_BaToBb(T%year)=0
          wsb%lv_BaToBb(T%year) = lv_Ssr ;						 //Old-> #    1244: wsb%lv_BaToBb(T%year)=lv_Ssr
 // 										 //Old-> #    1245: !
 //  Overright with actual release estimates if running verify simulations		 //Old-> #    1246:  Overright with actual release estimates if running verify simulations! Overright with actual release estimates if running verify simulations
 //  ------------------------							 //Old-> #    1247:  ------------------------! ------------------------
          if ((gpl_verify) ) {							 //Old-> #    1248: if(gpl_verify)then
            actualRelease(T,wsb) ;							 //Old-> #    1249: call actualRelease(T,wsb)

            //* ## ?????  								 //OLD-> #    1250: 

 //  Override release (rules unknown 2000 to 2007)					 //Old-> #    1251:  Override release (rules unknown 2000 to 2007)! Override release (rules unknown 2000 to 2007)
            overrideRelease(T,wsb) ;							 //Old-> #    1252: call overrideRelease(T,wsb)
            } // if (gpl_verify)							 //Old-> #    1253: endif

 // 										 //Old-> #    1254: !
          if ((lvl_testReservoirOps) ) {						 //Old-> #    1255: if(lvl_testReservoirOps)then
            adwrRelease(T,wsb) ;							 //Old-> #    1256: call adwrRelease(T,wsb)
            } // if (lvl_testReservoirOps)						 //Old-> #    1257: endif

 // 										 //Old-> #    1258: !
          mvf_releaseFromPowell_acft = 0 ;						 //Old-> #    1259: mvf_releaseFromPowell_acft=0
          mvf_releaseFromPowell_acft = wsb%lv_BaToBb(T%year) ;				 //Old-> #    1260: mvf_releaseFromPowell_acft=wsb%lv_BaToBb(T%year)
 // 										 //Old-> #    1261: !
          lvf_fluxPreBanked = 0 ;							 //Old-> #    1262: lvf_fluxPreBanked=0
          lvf_fluxPreBanked = lv_flow_B_maf(T%year)-mvf_releaseFromPowell_acft-lv_Evap_ba ;	 //Old-> #    1263: lvf_fluxPreBanked=lv_flow_B_maf(T%year)-mvf_releaseFromPowell_acft-lv_Evap_ba
 // 										 //Old-> #    1264: !
          lvf_bankStorage_maf = 0 ;							 //Old-> #    1265: lvf_bankStorage_maf=0
          lvf_bankStorage_maf = fBankStoragePowell(lvf_diffStorage(3)) ;			 //Old-> #    1266: lvf_bankStorage_maf=fBankStoragePowell(lvf_diffStorage(3))
 // 										 //Old-> #    1267: !
          lvf_flux = 0 ;								 //Old-> #    1268: lvf_flux=0
          lvf_flux = lvf_fluxPreBanked+lvf_bankStorage_maf ;				 //Old-> #    1269: lvf_flux=lvf_fluxPreBanked+lvf_bankStorage_maf
 // 										 //Old-> #    1270: !
          lvd_annual = 0 ;								 //Old-> #    1271: lvd_annual=0
          lvd_annual =  state + lvf_flux  ;						 //Old-> #    1272: lvd_annual= state + lvf_flux 
 // 										 //Old-> #    1273: !
          wsb%lv_OverFlow_ba(T%year) = 0 ;						 //Old-> #    1274: wsb%lv_OverFlow_ba(T%year)=0
          if ((lvd_annual < lvp_powellMax) ) {						 //Old-> #    1275: if(lvd_annual < lvp_powellMax)then
            if ((mpf_powellDead <= lvd_annual) ) {					 //Old-> #    1276: if(mpf_powellDead <= lvd_annual)then
              lv_State_ba = lvd_annual ;						 //Old-> #    1277: lv_State_ba=lvd_annual

              //* ## ?????  								 //OLD-> #    1278: 

              wsb%lv_BaToBb(T%year) = max(0,state+lv_flow_B_maf(T%year)+lvf_bankStorage_maf -lv_Evap_ba) ; //Old-> #    1279: wsb%lv_BaToBb(T%year)=max(0,state+lv_flow_B_maf(T%year)+lvf_bankStorage_maf -lv_Evap_ba)
              lv_State_ba = mpf_powellDead ;						 //Old-> #    1280: lv_State_ba=mpf_powellDead
 //                     if(gvl_writeLog)write(7,*)"Powell at Dead Pool - line 1220 in WaterShed_CO.f90" //Old-> #    1281:                     if(gvl_writeLog)write(7,*)"Powell at Dead Pool - line 1220 in WaterShed_CO.f90"!                    if(gvl_writeLog)write(7,*)"Powell at Dead Pool - line 1220 in WaterShed_CO.f90"
              } // if (mpf_powellDead <= lvd_annual)					 //Old-> #    1282: endif


            //* ## ?????  								 //OLD-> #    1283: 

            lv_State_ba = lvp_powellMax ;						 //Old-> #    1284: lv_State_ba=lvp_powellMax
            wsb%lv_OverFlow_ba(T%year) = lvd_annual-lvp_powellMax ;			 //Old-> #    1285: wsb%lv_OverFlow_ba(T%year)=lvd_annual-lvp_powellMax
            } // if (lvd_annual < lvp_powellMax)					 //Old-> #    1286: endif

 // 										 //Old-> #    1287: !
          vState_Ba_maf(T%year) = lv_State_ba ;					 //Old-> #    1288: vState_Ba_maf(T%year)=lv_State_ba
 // 										 //Old-> #    1289: !
 // 										 //Old-> #    1290: !
          return;									 //Old-> #    1291: return

          }// aModifyStorage_ba							 //Old-> #    1292: end subroutine aModifyStorage_ba
 //  ---------------------------------						 //Old-> #    1293:  ---------------------------------! ---------------------------------

 //  -----------------------------							 //Old-> #    1295:  -----------------------------! -----------------------------

//-----------------------------------------------------
        public void actualRelease(T , wsb) {						 //Old-> #    1296: subroutine actualRelease(T,wsb)
 // 										 //Old-> #    1297: !
 //  -- Type Constructs ---								 //Old-> #    1298:  -- Type Constructs ---! -- Type Constructs ---

          //* ## ?????  								 //OLD-> #    1299: watershed_B)::wsb


          //* ## ?????  								 //OLD-> #    1299: 


          //* ## ?????  								 //OLD-> #    1300: runTime)T


          //* ## ?????  								 //OLD-> #    1300: 

 //  ======================								 //Old-> #    1301:  ======================! ======================
 // 										 //Old-> #    1302: !
 //  Where did this information come from? I cannot recall				 //Old-> #    1303:  Where did this information come from? I cannot recall! Where did this information come from? I cannot recall
 //                http://www.usbr.gov/lc/region/g4000/archives_report.cfm?DIR=cy2002&FILE=01_2002 //Old-> #    1304:                http://www.usbr.gov/lc/region/g4000/archives_report.cfm?DIR=cy2002&FILE=01_2002!               http://www.usbr.gov/lc/region/g4000/archives_report.cfm?DIR=cy2002&FILE=01_2002
          wsb%lv_BaToBb(2000) = 8.492000 ;						 //Old-> #    1305: wsb%lv_BaToBb(2000)=8.492000
          wsb%lv_BaToBb(2001) = 8.009909 ; wsb%lv_BaToBb(2002)=7.795931 ;			 //Old-> #    1306: wsb%lv_BaToBb(2001)=8.009909 ; wsb%lv_BaToBb(2002)=7.795931
          wsb%lv_BaToBb(2003) = 8.222020 ; wsb%lv_BaToBb(2004)=8.473741 ;			 //Old-> #    1307: wsb%lv_BaToBb(2003)=8.222020 ; wsb%lv_BaToBb(2004)=8.473741
          wsb%lv_BaToBb(2005) = 8.252576 ; wsb%lv_BaToBb(2006)=8.408633 ;			 //Old-> #    1308: wsb%lv_BaToBb(2005)=8.252576 ; wsb%lv_BaToBb(2006)=8.408633
          wsb%lv_BaToBb(2007) = 8.228612 ; wsb%lv_BaToBb(2008)=9.123499 ;			 //Old-> #    1309: wsb%lv_BaToBb(2007)=8.228612 ; wsb%lv_BaToBb(2008)=9.123499
          wsb%lv_BaToBb(2009) = 8.296381 ; wsb%lv_BaToBb(2010)=8.173804 ;			 //Old-> #    1310: wsb%lv_BaToBb(2009)=8.296381 ; wsb%lv_BaToBb(2010)=8.173804
          wsb%lv_BaToBb(2011) = 13.645000 ; wsb%lv_BaToBb(2012)=8.217000 ;		 //Old-> #    1311: wsb%lv_BaToBb(2011)=13.645000 ; wsb%lv_BaToBb(2012)=8.217000
 // 										 //Old-> #    1312: !
 // 										 //Old-> #    1313: !
 // 										 //Old-> #    1314: !
          return;									 //Old-> #    1315: return

          }// actualRelease								 //Old-> #    1316: end subroutine actualRelease 
 //  ---------------------------							 //Old-> #    1317:  ---------------------------! ---------------------------

 //  ------------------------------							 //Old-> #    1319:  ------------------------------! ------------------------------

//-----------------------------------------------------
        public void overrideRelease(T , wsb) {						 //Old-> #    1320: subroutine overrideRelease(T,wsb)
 // 										 //Old-> #    1321: !
 //  -- Type Constructs ---								 //Old-> #    1322:  -- Type Constructs ---! -- Type Constructs ---

          //* ## ?????  								 //OLD-> #    1323: watershed_B)::wsb


          //* ## ?????  								 //OLD-> #    1323: 


          //* ## ?????  								 //OLD-> #    1324: runTime)T


          //* ## ?????  								 //OLD-> #    1324: 

 //  ======================								 //Old-> #    1325:  ======================! ======================
 // 										 //Old-> #    1326: !
          wsb%lv_BaToBb(2000) = 8.492000 ;						 //Old-> #    1327: wsb%lv_BaToBb(2000)=8.492000
          wsb%lv_BaToBb(2001) = 8.009909 ; wsb%lv_BaToBb(2002)=7.795931 ;			 //Old-> #    1328: wsb%lv_BaToBb(2001)=8.009909 ; wsb%lv_BaToBb(2002)=7.795931
          wsb%lv_BaToBb(2003) = 8.222020 ; wsb%lv_BaToBb(2004)=8.473741 ;			 //Old-> #    1329: wsb%lv_BaToBb(2003)=8.222020 ; wsb%lv_BaToBb(2004)=8.473741
          wsb%lv_BaToBb(2005) = 8.252576 ; wsb%lv_BaToBb(2006)=8.408633 ;			 //Old-> #    1330: wsb%lv_BaToBb(2005)=8.252576 ; wsb%lv_BaToBb(2006)=8.408633
          wsb%lv_BaToBb(2007) = 8.228612  ;						 //Old-> #    1331: wsb%lv_BaToBb(2007)=8.228612 
 // 										 //Old-> #    1332: !
 // 										 //Old-> #    1333: !
          return;									 //Old-> #    1334: return

          }// overrideRelease							 //Old-> #    1335: end subroutine overrideRelease 
 //  ---------------------------							 //Old-> #    1336:  ---------------------------! ---------------------------

 //  -----------------------------							 //Old-> #    1338:  -----------------------------! -----------------------------

//-----------------------------------------------------
        public void adwrRelease(T , wsb) {						 //Old-> #    1339: subroutine adwrRelease(T,wsb)
 // 										 //Old-> #    1340: !
 //  -- Type Constructs ---								 //Old-> #    1341:  -- Type Constructs ---! -- Type Constructs ---

          //* ## ?????  								 //OLD-> #    1342: watershed_B)::wsb


          //* ## ?????  								 //OLD-> #    1342: 


          //* ## ?????  								 //OLD-> #    1343: runTime)T


          //* ## ?????  								 //OLD-> #    1343: 

 //  ======================								 //Old-> #    1344:  ======================! ======================
 // 										 //Old-> #    1345: !
          wsb%lv_BaToBb(2000) = 8.492000 ;						 //Old-> #    1346: wsb%lv_BaToBb(2000)=8.492000
          wsb%lv_BaToBb(2001) = 8.009909 ;						 //Old-> #    1347: wsb%lv_BaToBb(2001)=8.009909
          wsb%lv_BaToBb(2002) = 7.795931 ;						 //Old-> #    1348: wsb%lv_BaToBb(2002)=7.795931
          wsb%lv_BaToBb(2003) = 8.222020 ;						 //Old-> #    1349: wsb%lv_BaToBb(2003)=8.222020
          wsb%lv_BaToBb(2004) = 8.473741 ;						 //Old-> #    1350: wsb%lv_BaToBb(2004)=8.473741
          wsb%lv_BaToBb(2005) = 8.252576  ;						 //Old-> #    1351: wsb%lv_BaToBb(2005)=8.252576 
          wsb%lv_BaToBb(2006) = 8.408633 ;						 //Old-> #    1352: wsb%lv_BaToBb(2006)=8.408633
          wsb%lv_BaToBb(2007) = 8.228612  ;						 //Old-> #    1353: wsb%lv_BaToBb(2007)=8.228612 
          wsb%lv_BaToBb(2008) = 9.123499 ;						 //Old-> #    1354: wsb%lv_BaToBb(2008)=9.123499
          wsb%lv_BaToBb(2009) = 8.296381  ;						 //Old-> #    1355: wsb%lv_BaToBb(2009)=8.296381 
          wsb%lv_BaToBb(2010) = 8.173804 ;						 //Old-> #    1356: wsb%lv_BaToBb(2010)=8.173804
          wsb%lv_BaToBb(2011) = 13.645000  ;						 //Old-> #    1357: wsb%lv_BaToBb(2011)=13.645000 
          wsb%lv_BaToBb(2012) =  11.6452060 ;						 //Old-> #    1358: wsb%lv_BaToBb(2012)= 11.6452060
          wsb%lv_BaToBb(2013) =  9.2491570 ;						 //Old-> #    1359: wsb%lv_BaToBb(2013)= 9.2491570
          wsb%lv_BaToBb(2014) =  8.5310280 ;						 //Old-> #    1360: wsb%lv_BaToBb(2014)= 8.5310280
          wsb%lv_BaToBb(2015) =  10.3970470 ;						 //Old-> #    1361: wsb%lv_BaToBb(2015)= 10.3970470
          wsb%lv_BaToBb(2016) =  11.1453710 ;						 //Old-> #    1362: wsb%lv_BaToBb(2016)= 11.1453710
          wsb%lv_BaToBb(2017) =  11.3389100 ;						 //Old-> #    1363: wsb%lv_BaToBb(2017)= 11.3389100
          wsb%lv_BaToBb(2018) =  12.9610880 ;						 //Old-> #    1364: wsb%lv_BaToBb(2018)= 12.9610880
          wsb%lv_BaToBb(2019) =  10.1549250 ;						 //Old-> #    1365: wsb%lv_BaToBb(2019)= 10.1549250
          wsb%lv_BaToBb(2020) =  8.2299960 ;						 //Old-> #    1366: wsb%lv_BaToBb(2020)= 8.2299960
          wsb%lv_BaToBb(2021) =  8.2299970 ;						 //Old-> #    1367: wsb%lv_BaToBb(2021)= 8.2299970
          wsb%lv_BaToBb(2022) =  8.6887150 ;						 //Old-> #    1368: wsb%lv_BaToBb(2022)= 8.6887150
          wsb%lv_BaToBb(2023) =  8.2299970 ;						 //Old-> #    1369: wsb%lv_BaToBb(2023)= 8.2299970
          wsb%lv_BaToBb(2024) =  8.2299970 ;						 //Old-> #    1370: wsb%lv_BaToBb(2024)= 8.2299970
          wsb%lv_BaToBb(2025) =  8.2299970 ;						 //Old-> #    1371: wsb%lv_BaToBb(2025)= 8.2299970
          wsb%lv_BaToBb(2026) =  8.2299970 ;						 //Old-> #    1372: wsb%lv_BaToBb(2026)= 8.2299970
          wsb%lv_BaToBb(2027) =  8.2299970 ;						 //Old-> #    1373: wsb%lv_BaToBb(2027)= 8.2299970
          wsb%lv_BaToBb(2028) =  9.0000010 ;						 //Old-> #    1374: wsb%lv_BaToBb(2028)= 9.0000010
          wsb%lv_BaToBb(2029) =  9.0000010 ;						 //Old-> #    1375: wsb%lv_BaToBb(2029)= 9.0000010
          wsb%lv_BaToBb(2030) =  7.4800000 ;						 //Old-> #    1376: wsb%lv_BaToBb(2030)= 7.4800000
          wsb%lv_BaToBb(2031) =  9.0000020 ;						 //Old-> #    1377: wsb%lv_BaToBb(2031)= 9.0000020
          wsb%lv_BaToBb(2032) =  9.0000020 ;						 //Old-> #    1378: wsb%lv_BaToBb(2032)= 9.0000020
          wsb%lv_BaToBb(2033) =  9.0000010 ;						 //Old-> #    1379: wsb%lv_BaToBb(2033)= 9.0000010
          wsb%lv_BaToBb(2034) =  9.0000020 ;						 //Old-> #    1380: wsb%lv_BaToBb(2034)= 9.0000020
          wsb%lv_BaToBb(2035) =  9.0000020 ;						 //Old-> #    1381: wsb%lv_BaToBb(2035)= 9.0000020
          wsb%lv_BaToBb(2036) =  9.0000010 ;						 //Old-> #    1382: wsb%lv_BaToBb(2036)= 9.0000010
          wsb%lv_BaToBb(2037) =  9.0000020 ;						 //Old-> #    1383: wsb%lv_BaToBb(2037)= 9.0000020
          wsb%lv_BaToBb(2038) =  9.0000010 ;						 //Old-> #    1384: wsb%lv_BaToBb(2038)= 9.0000010
          wsb%lv_BaToBb(2039) =  9.0000020 ;						 //Old-> #    1385: wsb%lv_BaToBb(2039)= 9.0000020
          wsb%lv_BaToBb(2040) =  9.0000020 ;						 //Old-> #    1386: wsb%lv_BaToBb(2040)= 9.0000020
          wsb%lv_BaToBb(2041) =  9.0000020 ;						 //Old-> #    1387: wsb%lv_BaToBb(2041)= 9.0000020
          wsb%lv_BaToBb(2042) =  9.0000020 ;						 //Old-> #    1388: wsb%lv_BaToBb(2042)= 9.0000020
          wsb%lv_BaToBb(2043) =  9.0000020 ;						 //Old-> #    1389: wsb%lv_BaToBb(2043)= 9.0000020
          wsb%lv_BaToBb(2044) =  7.0600000 ;						 //Old-> #    1390: wsb%lv_BaToBb(2044)= 7.0600000
          wsb%lv_BaToBb(2045) =  7.9000000 ;						 //Old-> #    1391: wsb%lv_BaToBb(2045)= 7.9000000
          wsb%lv_BaToBb(2046) =  9.0799990 ;						 //Old-> #    1392: wsb%lv_BaToBb(2046)= 9.0799990
          wsb%lv_BaToBb(2047) =  7.9000000 ;						 //Old-> #    1393: wsb%lv_BaToBb(2047)= 7.9000000
          wsb%lv_BaToBb(2048) =  8.5800020 ;						 //Old-> #    1394: wsb%lv_BaToBb(2048)= 8.5800020
          wsb%lv_BaToBb(2049) =  7.9000000 ;						 //Old-> #    1395: wsb%lv_BaToBb(2049)= 7.9000000
          wsb%lv_BaToBb(2050) =  7.5417060 ;						 //Old-> #    1396: wsb%lv_BaToBb(2050)= 7.5417060
          wsb%lv_BaToBb(2051) =  9.4933840 ;						 //Old-> #    1397: wsb%lv_BaToBb(2051)= 9.4933840
          wsb%lv_BaToBb(2052) =  7.0320240 ;						 //Old-> #    1398: wsb%lv_BaToBb(2052)= 7.0320240
          wsb%lv_BaToBb(2053) =  6.2642940 ;						 //Old-> #    1399: wsb%lv_BaToBb(2053)= 6.2642940
          wsb%lv_BaToBb(2054) =  10.1212230 ;						 //Old-> #    1400: wsb%lv_BaToBb(2054)= 10.1212230
          wsb%lv_BaToBb(2055) =  7.5758510 ;						 //Old-> #    1401: wsb%lv_BaToBb(2055)= 7.5758510
          wsb%lv_BaToBb(2056) =  6.7785710 ;						 //Old-> #    1402: wsb%lv_BaToBb(2056)= 6.7785710
          wsb%lv_BaToBb(2057) =  7.5094350 ;						 //Old-> #    1403: wsb%lv_BaToBb(2057)= 7.5094350
          wsb%lv_BaToBb(2058) =  8.4482460 ;						 //Old-> #    1404: wsb%lv_BaToBb(2058)= 8.4482460
          wsb%lv_BaToBb(2059) =  9.1894930 ;						 //Old-> #    1405: wsb%lv_BaToBb(2059)= 9.1894930
          wsb%lv_BaToBb(2060) =  8.9231020 ;						 //Old-> #    1406: wsb%lv_BaToBb(2060)= 8.9231020
          wsb%lv_BaToBb(2061) =  8.1115650 ;						 //Old-> #    1407: wsb%lv_BaToBb(2061)= 8.1115650
          wsb%lv_BaToBb(2062) =  9.5000010 ;						 //Old-> #    1408: wsb%lv_BaToBb(2062)= 9.5000010
          wsb%lv_BaToBb(2063) =  9.4645810 ;						 //Old-> #    1409: wsb%lv_BaToBb(2063)= 9.4645810
          wsb%lv_BaToBb(2064) =  9.5000000 ;						 //Old-> #    1410: wsb%lv_BaToBb(2064)= 9.5000000
          wsb%lv_BaToBb(2065) =  8.0191600 ;						 //Old-> #    1411: wsb%lv_BaToBb(2065)= 8.0191600
          wsb%lv_BaToBb(2066) =  6.1058530 ;						 //Old-> #    1412: wsb%lv_BaToBb(2066)= 6.1058530
          wsb%lv_BaToBb(2067) =  7.7747520 ;						 //Old-> #    1413: wsb%lv_BaToBb(2067)= 7.7747520
          wsb%lv_BaToBb(2068) =  9.6258480 ;						 //Old-> #    1414: wsb%lv_BaToBb(2068)= 9.6258480
          wsb%lv_BaToBb(2069) =  8.9914990 ;						 //Old-> #    1415: wsb%lv_BaToBb(2069)= 8.9914990
          wsb%lv_BaToBb(2070) =  7.9000000 ;						 //Old-> #    1416: wsb%lv_BaToBb(2070)= 7.9000000
 // 										 //Old-> #    1417: !
 // 										 //Old-> #    1418: !
          return;									 //Old-> #    1419: return

          }// adwrRelease								 //Old-> #    1420: end subroutine adwrRelease 
 //  ---------------------------							 //Old-> #    1421:  ---------------------------! ---------------------------

 //  ------------------------------------------------					 //Old-> #    1423:  ------------------------------------------------! ------------------------------------------------

//-----------------------------------------------------
        public void actualStorage(T , double lvd_Pp , double lvd_Pm , double lvd_diff) {	 //Old-> #    1424: subroutine actualStorage(T,lvd_Pp,lvd_Pm,lvd_diff)
 // 										 //Old-> #    1425: !
 //  ---------------- Types -----------						 //Old-> #    1426:  ---------------- Types -----------! ---------------- Types -----------
          // Skipped								 //OLD-> #    1427:             real(8) :: lvd_Pp,lvd_Pm
          // Skipped								 //OLD-> #    1428:             real :: lvd_diff(2)
          double lvf_tempStorage[ , ]  = new double[(2012,2000 ),2]  ;			 //Old-> #    1429: real :: lvf_tempStorage(2000:2012,2)
 //  ==================================						 //Old-> #    1430:  ==================================! ==================================
 // 										 //Old-> #    1431: !

 //  -- Type Construct --								 //Old-> #    1433:  -- Type Construct --! -- Type Construct --

          //* ## ?????  								 //OLD-> #    1434: runTime)T


          //* ## ?????  								 //OLD-> #    1434: 

 //  ====================								 //Old-> #    1435:  ====================! ====================
 // 										 //Old-> #    1436: !
          lvf_tempStorage(2000,1) = 23.333075 ;  lvf_tempStorage(2000,2)=27.012167 ;	 //Old-> #    1437: lvf_tempStorage(2000,1)=23.333075 ;  lvf_tempStorage(2000,2)=27.012167
          lvf_tempStorage(2001,1) = 21.710577;  lvf_tempStorage(2001,2)=24.368162 ;	 //Old-> #    1438: lvf_tempStorage(2001,1)=21.710577;  lvf_tempStorage(2001,2)=24.368162
          lvf_tempStorage(2002,1) = 20.010000 ;  lvf_tempStorage(2002,2)=22.680000 ;	 //Old-> #    1439: lvf_tempStorage(2002,1)=20.010000 ;  lvf_tempStorage(2002,2)=22.680000
          lvf_tempStorage(2003,1) = 14.940000 ;  lvf_tempStorage(2003,2)=20.760000 ;	 //Old-> #    1440: lvf_tempStorage(2003,1)=14.940000 ;  lvf_tempStorage(2003,2)=20.760000
          lvf_tempStorage(2004,1) = 12.550000 ;  lvf_tempStorage(2004,2)=19.380000 ;	 //Old-> #    1441: lvf_tempStorage(2004,1)=12.550000 ;  lvf_tempStorage(2004,2)=19.380000
          lvf_tempStorage(2005,1) = 9.180000 ;  lvf_tempStorage(2005,2)=18.280000 ;	 //Old-> #    1442: lvf_tempStorage(2005,1)=9.180000 ;  lvf_tempStorage(2005,2)=18.280000
          lvf_tempStorage(2006,1) = 13.580000 ;  lvf_tempStorage(2006,2)=17.140000 ;	 //Old-> #    1443: lvf_tempStorage(2006,1)=13.580000 ;  lvf_tempStorage(2006,2)=17.140000
          lvf_tempStorage(2007,1) = 13.670000 ;  lvf_tempStorage(2007,2)=16.100000 ;	 //Old-> #    1444: lvf_tempStorage(2007,1)=13.670000 ;  lvf_tempStorage(2007,2)=16.100000
          lvf_tempStorage(2008,1) = 12.000000 ;  lvf_tempStorage(2008,2)=14.870000 ;	 //Old-> #    1445: lvf_tempStorage(2008,1)=12.000000 ;  lvf_tempStorage(2008,2)=14.870000
          lvf_tempStorage(2009,1) = 14.420000 ;  lvf_tempStorage(2009,2)=14.680000 ;	 //Old-> #    1446: lvf_tempStorage(2009,1)=14.420000 ;  lvf_tempStorage(2009,2)=14.680000
          lvf_tempStorage(2010,1) = 16.510000 ;  lvf_tempStorage(2010,2)=13.640000 ;	 //Old-> #    1447: lvf_tempStorage(2010,1)=16.510000 ;  lvf_tempStorage(2010,2)=13.640000
 // 										 //Old-> #    1448: !
          lvf_tempStorage(2011,1) = 14.457000 ;  lvf_tempStorage(2011,2)=10.3020000 ;	 //Old-> #    1449: lvf_tempStorage(2011,1)=14.457000 ;  lvf_tempStorage(2011,2)=10.3020000
          lvf_tempStorage(2012,1) = 15.958000 ;  lvf_tempStorage(2012,2)=14.8970000 ;	 //Old-> #    1450: lvf_tempStorage(2012,1)=15.958000 ;  lvf_tempStorage(2012,2)=14.8970000
 // 										 //Old-> #    1451: !
          lvd_Pm = 0 ;								 //Old-> #    1452: lvd_Pm=0
          if ((T%year <= 2012) ) {							 //Old-> #    1453: if(T%year <= 2012)then
            lvd_Pp = lvf_tempStorage(T%year,1) ;					 //Old-> #    1454: lvd_Pp=lvf_tempStorage(T%year,1)
            lvd_Pm = lvf_tempStorage(T%year,2) ;					 //Old-> #    1455: lvd_Pm=lvf_tempStorage(T%year,2)
            if ((T%year < 2012) ) {							 //Old-> #    1456: if(T%year < 2012)then
              lvd_diff(1) =  lvf_tempStorage(T%year,1)-lvf_tempStorage(T%year+1,1) ;	 //Old-> #    1457: lvd_diff(1)= lvf_tempStorage(T%year,1)-lvf_tempStorage(T%year+1,1)
              lvd_diff(2) =  lvf_tempStorage(T%year,2)-lvf_tempStorage(T%year+1,2) ;	 //Old-> #    1458: lvd_diff(2)= lvf_tempStorage(T%year,2)-lvf_tempStorage(T%year+1,2)
              } // if (T%year < 2012)							 //Old-> #    1459: endif

            } // if (T%year <= 2012)    						 //Old-> #    1460: endif   
 // 										 //Old-> #    1461: !
 // 										 //Old-> #    1462: !
          return;									 //Old-> #    1463: return

          }// actualStorage								 //Old-> #    1464: end subroutine actualStorage
 //  ---------------------------							 //Old-> #    1465:  ---------------------------! ---------------------------

 // --------------------------------------------------------				 //Old-> #    1467: --------------------------------------------------------!--------------------------------------------------------

//-----------------------------------------------------
        public void threshold_b(T , double lvd_Pp , double lvd_balanceamount , double lv_Ssr) { //Old-> #    1468: subroutine threshold_b(T,lvd_Pp,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1469: !
 //  Data from ModelingWorkshopPresentations.pdf (Bureau of Reclamation- 2007)		 //Old-> #    1470:  Data from ModelingWorkshopPresentations.pdf (Bureau of Reclamation- 2007)! Data from ModelingWorkshopPresentations.pdf (Bureau of Reclamation- 2007)
 //  Mead at 1075 feet, volume is 9.4 maf (active)					 //Old-> #    1471:  Mead at 1075 feet, volume is 9.4 maf (active)! Mead at 1075 feet, volume is 9.4 maf (active)
 //  Mead at 1050 feet, Volume is 7.5 maf active					 //Old-> #    1472:  Mead at 1050 feet, Volume is 7.5 maf active! Mead at 1050 feet, Volume is 7.5 maf active
 //  Mead at 1025 feet, volume is 5.8 maf (active)					 //Old-> #    1473:  Mead at 1025 feet, volume is 5.8 maf (active)! Mead at 1025 feet, volume is 5.8 maf (active)
 // 										 //Old-> #    1474: !
 //  ------------------------- Types ---------------------				 //Old-> #    1475:  ------------------------- Types ---------------------! ------------------------- Types ---------------------
          // Skipped								 //OLD-> #    1476:                 real(8) :: state,lvd_Pp,lvd_balanceamount,lvd_spill
          // Skipped								 //OLD-> #    1477:                 real(8) :: lv_Ssr
 //                 integer :: vTier							 //Old-> #    1478:                 integer :: vTier!                integer :: vTier
 //  										 //Old-> #    1479:  ! 
 //  I model total storage for the reservoirs, but for balancing I			 //Old-> #    1480:  I model total storage for the reservoirs, but for balancing I! I model total storage for the reservoirs, but for balancing I
 //  use live storage.								 //Old-> #    1481:  use live storage.! use live storage.
 //  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^			 //Old-> #    1482:  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 //   Total storage									 //Old-> #    1483:   Total storage!  Total storage
 //   real(8) :: vBa_Teir_1=7.82  ! Powell at 3,525 feet				 //Old-> #    1484:   real(8) :: vBa_Teir_1=7.82  ! Powell at 3,525 feet!  real(8) :: vBa_Teir_1=7.82  ! Powell at 3,525 feet
 //   real(8) :: vBa_Teir_2=11.41 ! Powell at 3,575 feet				 //Old-> #    1485:   real(8) :: vBa_Teir_2=11.41 ! Powell at 3,575 feet!  real(8) :: vBa_Teir_2=11.41 ! Powell at 3,575 feet
 //   real(8) :: vBa_Teir_3=17.43 ! Powell at 3,636 feet				 //Old-> #    1486:   real(8) :: vBa_Teir_3=17.43 ! Powell at 3,636 feet!  real(8) :: vBa_Teir_3=17.43 ! Powell at 3,636 feet
 //   real(8) :: vBa_Teir_4=21.18 ! Powell at 3,666 feet				 //Old-> #    1487:   real(8) :: vBa_Teir_4=21.18 ! Powell at 3,666 feet!  real(8) :: vBa_Teir_4=21.18 ! Powell at 3,666 feet
 //  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^			 //Old-> #    1488:  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 //  Live storage (active)								 //Old-> #    1489:  Live storage (active)! Live storage (active)
 //  -------------------------------------------------					 //Old-> #    1490:  -------------------------------------------------! -------------------------------------------------
 //                             							 //Old-> #    1491:                             !                            
          const double lvf_TierElevation_1 = 3525 ! live;				 //Old-> #    1492: real,parameter :: lvf_TierElevation_1=3525 ! live
          const double lvf_TierElevation_2 = 3575;					 //Old-> #    1493: real,parameter :: lvf_TierElevation_2=3575
          const double lvf_TierElevation_602a = 3630;					 //Old-> #    1494: real,parameter :: lvf_TierElevation_602a=3630
          const double lvf_TierElevation_3 = 3636;					 //Old-> #    1495: real,parameter :: lvf_TierElevation_3=3636
          const double lvf_TierElevation_4 = 3666;					 //Old-> #    1496: real,parameter :: lvf_TierElevation_4=3666

          const double lvf_TierElevation_s1 = 3560;					 //Old-> #    1498: real,parameter :: lvf_TierElevation_s1=3560
          const double lvf_TierElevation_s2 = 3595;					 //Old-> #    1499: real,parameter :: lvf_TierElevation_s2=3595
 // 										 //Old-> #    1500: !
          const double lvf_TierElevationMead_1 = 1025;					 //Old-> #    1501: real,parameter :: lvf_TierElevationMead_1=1025 
          const double lvf_TierElevationMead_2 = 1075;					 //Old-> #    1502: real,parameter :: lvf_TierElevationMead_2=1075
 // 										 //Old-> #    1503: !
          double lvf_min, lvf_max;							 //Old-> #    1504: real :: lvf_min,lvf_max
 //  model elevation = intercept + scaling * storage**slope				 //Old-> #    1505:  model elevation = intercept + scaling * storage**slope! model elevation = intercept + scaling * storage**slope
          double lvf_powell_elevation, lvf_mead_elevation;				 //Old-> #    1506: real :: lvf_powell_elevation,lvf_mead_elevation
 //  Powell max is 24.322- live 							 //Old-> #    1507:  Powell max is 24.322- live ! Powell max is 24.322- live 
 //  Mead max is 25.877 -live							 //Old-> #    1508:  Mead max is 25.877 -live! Mead max is 25.877 -live
 //  --------------------------							 //Old-> #    1509:  --------------------------! --------------------------

          bool lvl_RSA, lvl_WSA, lvl_CBSA, lvl_BSA, lvl_NAA;				 //Old-> #    1511: logical :: lvl_RSA,lvl_WSA,lvl_CBSA,lvl_BSA,lvl_NAA
 //  ===============================================================			 //Old-> #    1512:  ===============================================================! ===============================================================
 // 										 //Old-> #    1513: !

 //  -- Type Construct --								 //Old-> #    1515:  -- Type Construct --! -- Type Construct --

          //* ## ?????  								 //OLD-> #    1516: runTime)T


          //* ## ?????  								 //OLD-> #    1516: 

 //  ====================								 //Old-> #    1517:  ====================! ====================
 // 										 //Old-> #    1518: !
 //  =========================================================================		 //Old-> #    1519:  =========================================================================! =========================================================================
 //  Changed again on 16 November 2010, das						 //Old-> #    1520:  Changed again on 16 November 2010, das! Changed again on 16 November 2010, das
 //  Changed again on 25 April, 2013, DAS						 //Old-> #    1521:  Changed again on 25 April, 2013, DAS! Changed again on 25 April, 2013, DAS
 // 										 //Old-> #    1522: !
 //  Record of Decison, December 2007 (RecordofDecision.pdf)				 //Old-> #    1523:  Record of Decison, December 2007 (RecordofDecision.pdf)! Record of Decison, December 2007 (RecordofDecision.pdf)
 //  page 50-55									 //Old-> #    1524:  page 50-55! page 50-55
 // 										 //Old-> #    1525: !
 //  -------------------------------------------------------------------			 //Old-> #    1526:  -------------------------------------------------------------------! -------------------------------------------------------------------
 // 										 //Old-> #    1527: !
 //                     vTier=3							 //Old-> #    1528:                     vTier=3!                    vTier=3
          lvl_RSA = .false. ;							 //Old-> #    1529: lvl_RSA=.false.
          lvl_WSA = .false. ;							 //Old-> #    1530: lvl_WSA=.false.
          lvl_CBSA = .false. ;							 //Old-> #    1531: lvl_CBSA=.false.
          lvl_BSA = .false. ;							 //Old-> #    1532: lvl_BSA=.false.
          lvl_NAA = .false. ;							 //Old-> #    1533: lvl_NAA=.false.
 // 										 //Old-> #    1534: !
 // 										 //Old-> #    1535: !
          lvl_RSA = .true. ;								 //Old-> #    1536: lvl_RSA=.true.
 // 										 //Old-> #    1537: !
          lvf_powell_elevation = 0 ;							 //Old-> #    1538: lvf_powell_elevation=0
 //  04.26.13									 //Old-> #    1539:  04.26.13! 04.26.13
          state = lvd_Pp ;								 //Old-> #    1540: state=lvd_Pp
 //  05.02.13									 //Old-> #    1541:  05.02.13! 05.02.13
          state = vState_Ba_maf(T%year) ;						 //Old-> #    1542: state=vState_Ba_maf(T%year)
          elevationsPowell(state,lvf_powell_elevation) ;				 //Old-> #    1543: call elevationsPowell(state,lvf_powell_elevation)
 // 										 //Old-> #    1544: !
 //  Grab Mead elevation estimate							 //Old-> #    1545:  Grab Mead elevation estimate! Grab Mead elevation estimate
          state = vState_Bb_maf(T%year) ;						 //Old-> #    1546: state=vState_Bb_maf(T%year)
          elevationsMead(state,lvf_mead_elevation) ;					 //Old-> #    1547: call elevationsMead(state,lvf_mead_elevation)
 // 										 //Old-> #    1548: !
          lvd_spill = 0 ;								 //Old-> #    1549: lvd_spill=0
          if ((lvp_powellMax < lvd_Pp)lvd_spill=lvd_Pp-lvp_powellMax ) {			 //Old-> #    1550: if(lvp_powellMax < lvd_Pp)lvd_spill=lvd_Pp-lvp_powellMax
 // 										 //Old-> #    1551: !
            lv_Ssr = 0 ;								 //Old-> #    1552: lv_Ssr=0
 // 										 //Old-> #    1553: !
 //  ModelingWorkshopPresentations.pdf						 //Old-> #    1554:  ModelingWorkshopPresentations.pdf! ModelingWorkshopPresentations.pdf
 //  05.06.13									 //Old-> #    1555:  05.06.13! 05.06.13
 //  Reservoir Storage Alternative							 //Old-> #    1556:  Reservoir Storage Alternative! Reservoir Storage Alternative
 //  ----------------------------------						 //Old-> #    1557:  ----------------------------------! ----------------------------------
            if ((T%year < 2008) ) {							 //Old-> #    1558: if(T%year < 2008)then
              if ((lvl_RSA) ) {							 //Old-> #    1559: if(lvl_RSA)then
                if ((lvf_powell_elevation < lvf_TierElevation_s1) ) {			 //Old-> #    1560: if(lvf_powell_elevation < lvf_TierElevation_s1)then
                  lvf_min = mpf_sevenEight ;						 //Old-> #    1561: lvf_min=mpf_sevenEight
                  lvf_max = mpf_nineFive ;						 //Old-> #    1562: lvf_max=mpf_nineFive
 // 										 //Old-> #    1563: !
                  balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ;		 //Old-> #    1564: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)

                  //* ## ?????  							 //OLD-> #    1565: 

                  if ((lvf_powell_elevation < lvf_TierElevation_s2) ) {			 //Old-> #    1566: if(lvf_powell_elevation < lvf_TierElevation_s2)then                           
                    lv_Ssr = mpf_sevenEight ;						 //Old-> #    1567: lv_Ssr=mpf_sevenEight

                    //* ## ?????  							 //OLD-> #    1568: 

                    if ((lvf_powell_elevation < lvf_TierElevation_602a) ) {		 //Old-> #    1569: if(lvf_powell_elevation < lvf_TierElevation_602a)then
                      lv_Ssr = mpf_targetRelease    ;					 //Old-> #    1570: lv_Ssr=mpf_targetRelease   

                      //* ## ?????  							 //OLD-> #    1571: 

                      lvf_min = mpf_targetRelease !mpf_sevenEight ;			 //Old-> #    1572: lvf_min=mpf_targetRelease !mpf_sevenEight
                      lvf_max = mpf_nineFive ;						 //Old-> #    1573: lvf_max=mpf_nineFive
                      balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr) ;		 //Old-> #    1574: call balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr)
                      } // if (lvf_powell_elevation < lvf_TierElevation_602a)		 //Old-> #    1575: endif

                    } // if (lvf_powell_elevation < lvf_TierElevation_s2)			 //Old-> #    1576: endif

                  } // if (lvf_powell_elevation < lvf_TierElevation_s1)       		 //Old-> #    1577: endif      
                 } else if ( lvl_WSA) ) {						 //Old-> #    1578: else if(lvl_WSA)then
                if ((lvf_powell_elevation < lvf_TierElevation_2) ) {			 //Old-> #    1579: if(lvf_powell_elevation < lvf_TierElevation_2)then
                  lvf_min = mpf_seven ;						 //Old-> #    1580: lvf_min=mpf_seven
                  lvf_max = mpf_nineFive ;						 //Old-> #    1581: lvf_max=mpf_nineFive
 // 										 //Old-> #    1582: !
                  balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ;		 //Old-> #    1583: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)

                  //* ## ?????  							 //OLD-> #    1584: 

                  if ((lvf_powell_elevation < lvf_TierElevation_602a) ) {			 //Old-> #    1585: if(lvf_powell_elevation < lvf_TierElevation_602a)then                           
                    lv_Ssr = mpf_targetRelease ;					 //Old-> #    1586: lv_Ssr=mpf_targetRelease
 //  Mead at 1025 feet								 //Old-> #    1587:  Mead at 1025 feet! Mead at 1025 feet
                    if ((lvf_mead_elevation < lvf_TierElevationMead_2) ) {		 //Old-> #    1588: if(lvf_mead_elevation < lvf_TierElevationMead_2)then
                      lvf_min = mpf_seven ;						 //Old-> #    1589: lvf_min=mpf_seven
                      lvf_max = mpf_nineFive ;						 //Old-> #    1590: lvf_max=mpf_nineFive
                      balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ;		 //Old-> #    1591: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)
                      } // if (lvf_mead_elevation < lvf_TierElevationMead_2)		 //Old-> #    1592: endif


                    //* ## ?????  							 //OLD-> #    1593: 

                    lvf_min = mpf_targetRelease ;					 //Old-> #    1594: lvf_min=mpf_targetRelease
                    lvf_max = mpf_nineFive ;						 //Old-> #    1595: lvf_max=mpf_nineFive
                    balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr) ;			 //Old-> #    1596: call balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr)
                    } // if (lvf_powell_elevation < lvf_TierElevation_602a)		 //Old-> #    1597: endif

                  } // if (lvf_powell_elevation < lvf_TierElevation_2)     		 //Old-> #    1598: endif    
                 } else if ( lvl_CBSA .or. lvl_BSA) ) {					 //Old-> #    1599: else if(lvl_CBSA .or. lvl_BSA)then
                if ((lvf_powell_elevation < lvf_TierElevation_1) ) {			 //Old-> #    1600: if(lvf_powell_elevation < lvf_TierElevation_1)then
                  lvf_min = mpf_seven ;						 //Old-> #    1601: lvf_min=mpf_seven
                  lvf_max = mpf_nineFive ;						 //Old-> #    1602: lvf_max=mpf_nineFive
 // 										 //Old-> #    1603: !
                  balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ;		 //Old-> #    1604: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)

                  //* ## ?????  							 //OLD-> #    1605: 

                  if ((lvf_powell_elevation < lvf_TierElevation_2) ) {			 //Old-> #    1606: if(lvf_powell_elevation < lvf_TierElevation_2)then                           
                    lv_Ssr = mpf_sevenFourEight ;					 //Old-> #    1607: lv_Ssr=mpf_sevenFourEight
 //  Mead at 1025 feet								 //Old-> #    1608:  Mead at 1025 feet! Mead at 1025 feet
                    if ((lvf_mead_elevation < lvf_TierElevationMead_1) ) {		 //Old-> #    1609: if(lvf_mead_elevation < lvf_TierElevationMead_1)then
                      lv_Ssr = mpf_targetRelease ;					 //Old-> #    1610: lv_Ssr=mpf_targetRelease
                      } // if (lvf_mead_elevation < lvf_TierElevationMead_1)		 //Old-> #    1611: endif


                    //* ## ?????  							 //OLD-> #    1612: 

                    if ((lvf_powell_elevation < lvf_TierElevation_602a) ) {		 //Old-> #    1613: if(lvf_powell_elevation < lvf_TierElevation_602a)then
                      lv_Ssr = mpf_targetRelease    ;					 //Old-> #    1614: lv_Ssr=mpf_targetRelease   
                      if ((lvf_mead_elevation < lvf_TierElevationMead_2) ) {		 //Old-> #    1615: if(lvf_mead_elevation < lvf_TierElevationMead_2)then
                        lvf_min = mpf_seven ;						 //Old-> #    1616: lvf_min=mpf_seven
                        lvf_max = mpf_nine ;						 //Old-> #    1617: lvf_max=mpf_nine
                        balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr) ;		 //Old-> #    1618: call balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr)
                        } // if (lvf_mead_elevation < lvf_TierElevationMead_2)		 //Old-> #    1619: endif



                      //* ## ?????  							 //OLD-> #    1621: 

                      lvf_min = mpf_targetRelease ;					 //Old-> #    1622: lvf_min=mpf_targetRelease
                      lvf_max = mpf_nineFive ;						 //Old-> #    1623: lvf_max=mpf_nineFive
                      balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ;		 //Old-> #    1624: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)
                      } // if (lvf_powell_elevation < lvf_TierElevation_602a)		 //Old-> #    1625: endif

                    } // if (lvf_powell_elevation < lvf_TierElevation_2)			 //Old-> #    1626: endif

                  } // if (lvf_powell_elevation < lvf_TierElevation_1)     		 //Old-> #    1627: endif    
                 } else if ( lvl_NAA) ) {						 //Old-> #    1628: else if(lvl_NAA)then
                if ((lvf_powell_elevation < lvf_TierElevation_602a) ) {			 //Old-> #    1629: if(lvf_powell_elevation < lvf_TierElevation_602a)then
                  lv_Ssr = mpf_targetRelease    ;					 //Old-> #    1630: lv_Ssr=mpf_targetRelease   

                  //* ## ?????  							 //OLD-> #    1631: 

                  lvf_min = mpf_targetRelease ;					 //Old-> #    1632: lvf_min=mpf_targetRelease
                  lvf_max = mpf_nineFive ;						 //Old-> #    1633: lvf_max=mpf_nineFive
                  balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr) ;			 //Old-> #    1634: call balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr)
                  } // if (lvf_powell_elevation < lvf_TierElevation_602a)			 //Old-> #    1635: endif


                //* ## ?????  							 //OLD-> #    1636: 

                } // if (lvl_RSA)							 //Old-> #    1637: endif


              //* ## ?????  								 //OLD-> #    1638: 

 //   new on 04.29.13								 //Old-> #    1639:   new on 04.29.13!  new on 04.29.13
 // 										 //Old-> #    1640: !
              if ((lvf_powell_elevation < lvf_TierElevation_1) ) {			 //Old-> #    1641: if(lvf_powell_elevation < lvf_TierElevation_1)then
 // 										 //Old-> #    1642: !
 //                             vTier = 1                          			 //Old-> #    1643:                             vTier = 1                          !                            vTier = 1                          
 //  Section 6.D (page 53)								 //Old-> #    1644:  Section 6.D (page 53)! Section 6.D (page 53)
 //  Lower Elevation Balancing Teir							 //Old-> #    1645:  Lower Elevation Balancing Teir! Lower Elevation Balancing Teir
 //  3370 < Powell < 3525								 //Old-> #    1646:  3370 < Powell < 3525! 3370 < Powell < 3525
 // 										 //Old-> #    1647: !
                lvf_min = mpf_seven ;							 //Old-> #    1648: lvf_min=mpf_seven
                lvf_max = mpf_nineFive ;						 //Old-> #    1649: lvf_max=mpf_nineFive
                balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ;		 //Old-> #    1650: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1651: !

                //* ## ?????  							 //OLD-> #    1652: 

                if ((lvf_powell_elevation < lvf_TierElevation_2) ) {			 //Old-> #    1653: if(lvf_powell_elevation < lvf_TierElevation_2)then
 // 										 //Old-> #    1654: !
 //                              vTier=2						 //Old-> #    1655:                              vTier=2!                             vTier=2
 //  Mid-Elevation Balancing Tier							 //Old-> #    1656:  Mid-Elevation Balancing Tier! Mid-Elevation Balancing Tier
 //  3525 < Powell < 3575								 //Old-> #    1657:  3525 < Powell < 3575! 3525 < Powell < 3575
 //  Section 6.C.1									 //Old-> #    1658:  Section 6.C.1! Section 6.C.1
 //  --------------									 //Old-> #    1659:  --------------! --------------
                  lv_Ssr = mpf_sevenFourEight ;					 //Old-> #    1660: lv_Ssr=mpf_sevenFourEight
 // 										 //Old-> #    1661: !
 //  Mead at 1025 feet								 //Old-> #    1662:  Mead at 1025 feet! Mead at 1025 feet
                  if ((lvf_mead_elevation < lvf_TierElevationMead_1) ) {			 //Old-> #    1663: if(lvf_mead_elevation < lvf_TierElevationMead_1)then
                    lv_Ssr = mpf_targetRelease ;					 //Old-> #    1664: lv_Ssr=mpf_targetRelease
                    } // if (lvf_mead_elevation < lvf_TierElevationMead_1)		 //Old-> #    1665: endif

 // 										 //Old-> #    1666: !

                  //* ## ?????  							 //OLD-> #    1667: 

                  if ((lvf_powell_elevation < lvf_TierElevation_3) ) {			 //Old-> #    1668: if(lvf_powell_elevation < lvf_TierElevation_3)then 
 // 										 //Old-> #    1669: !
 //                                 vTier=3						 //Old-> #    1670:                                 vTier=3!                                vTier=3
 //   new on 04.29.13								 //Old-> #    1671:   new on 04.29.13!  new on 04.29.13
 //  Upper Elevation Balancing Tier and equalization (3636 to 3666)			 //Old-> #    1672:  Upper Elevation Balancing Tier and equalization (3636 to 3666)! Upper Elevation Balancing Tier and equalization (3636 to 3666)
 //  3575 < Powell < 3666								 //Old-> #    1673:  3575 < Powell < 3666! 3575 < Powell < 3666
 //  Section 6.B.?									 //Old-> #    1674:  Section 6.B.?! Section 6.B.?
 // 										 //Old-> #    1675: !
                    targetAmount(T,lvd_balanceamount,lv_Ssr) ;				 //Old-> #    1676: call targetAmount(T,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1677: !

                    //* ## ?????  							 //OLD-> #    1678: 

                    if ((lvf_powell_elevation < lvf_TierElevation_4) ) {			 //Old-> #    1679: if(lvf_powell_elevation < lvf_TierElevation_4)then
 //                                  vTier=4						 //Old-> #    1680:                                  vTier=4!                                 vTier=4
                      targetAmount(T,lvd_balanceamount,lv_Ssr) ;				 //Old-> #    1681: call targetAmount(T,lvd_balanceamount,lv_Ssr)

                      //* ## ?????  							 //OLD-> #    1682: 

 //  new on 05.02.13								 //Old-> #    1683:  new on 05.02.13! new on 05.02.13
 //  Equilization Tier								 //Old-> #    1684:  Equilization Tier! Equilization Tier
 //  3666 < Powell < 3700								 //Old-> #    1685:  3666 < Powell < 3700! 3666 < Powell < 3700
 //  Section 6.A.1									 //Old-> #    1686:  Section 6.A.1! Section 6.A.1
 //  --------------               							 //Old-> #    1687:  --------------               ! --------------               
 //                                     vTier=5					 //Old-> #    1688:                                     vTier=5!                                    vTier=5
                      if ((T%year < 2027) ) {						 //Old-> #    1689: if(T%year < 2027)then
                        targetAmount(T,lvd_balanceamount,lv_Ssr) ;			 //Old-> #    1690: call targetAmount(T,lvd_balanceamount,lv_Ssr)

                        //* ## ?????  						 //OLD-> #    1691: 

                        lvf_min = mpf_targetRelease ;					 //Old-> #    1692: lvf_min=mpf_targetRelease
                        lvf_max = mpf_nineFive ;					 //Old-> #    1693: lvf_max=mpf_nineFive
                        balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr) ;		 //Old-> #    1694: call balanceContent(T,lvf_min,lvf_max,lvd_spill,lv_Ssr)
                        } // if (T%year < 2027)					 //Old-> #    1695: endif

                      } // if (lvf_powell_elevation < lvf_TierElevation_4)		 //Old-> #    1696: endif

                    } // if (lvf_powell_elevation < lvf_TierElevation_3)			 //Old-> #    1697: endif

                  } // if (lvf_powell_elevation < lvf_TierElevation_2)			 //Old-> #    1698: endif

                } // if (lvf_powell_elevation < lvf_TierElevation_1)       		 //Old-> #    1699: endif      
              } // if (T%year < 2008)							 //Old-> #    1700: endif

 // 										 //Old-> #    1701: !
            if ((T%year ==2004)lv_Ssr=8.473741 ) {					 //Old-> #    1702: if(T%year ==2004)lv_Ssr=8.473741
              if ((T%year ==2008)lv_Ssr=9.123499 ) {					 //Old-> #    1703: if(T%year ==2008)lv_Ssr=9.123499
 // 										 //Old-> #    1704: !

                //* ## ?????  							 //OLD-> #    1705:               format(I4,1x,I1,1x,2(F10.6,1x),1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: I4,1x,I1,1x,2(F10.6,1x),1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: 1x,I1,1x,2(F10.6,1x),1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: I1,1x,2(F10.6,1x),1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: 1x,2(F10.6,1x),1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: 2(F10.6,1x),1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: F10.6,1x),1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: 1x),1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: 1x,2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: 2(F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: F6.1,1x))


                //* ## ?????  							 //OLD-> #    1705: 1x))


                //* ## ?????  							 //OLD-> #    1705: 

 // 										 //Old-> #    1706: !
 //  =========================================================================		 //Old-> #    1707:  =========================================================================! =========================================================================
 // 										 //Old-> #    1708: !
											 //Old-> #    1709: return


                //* ## ?????  							 //OLD-> #    1710: subroutine threshold_b


                //* ## ?????  							 //OLD-> #    1710: threshold_b


                //* ## ?????  							 //OLD-> #    1710: 

 // -------------------------							 //Old-> #    1711: -------------------------!-------------------------

 //  -------------------------------------------------					 //Old-> #    1713:  -------------------------------------------------! -------------------------------------------------

//-----------------------------------------------------
                public void targetAmount(T , double lvd_balanceamount , double lv_Ssr) {	 //Old-> #    1714: subroutine targetAmount(T,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1715: !
 //  ---- Types and parameters ----							 //Old-> #    1716:  ---- Types and parameters ----! ---- Types and parameters ----
                  double lvf_powell_elevation;						 //Old-> #    1717: real :: lvf_powell_elevation
                  double lvf_useElevation;						 //Old-> #    1718: real :: lvf_useElevation
                  double 8);								 //Old-> #    1719: real(8) :: state
                  // Skipped								 //OLD-> #    1720:                 real(8) :: lvd_balanceamount
                  // Skipped								 //OLD-> #    1721:                 real(8) :: lv_Ssr,lvd_tempSsr
                  double lvf_targetStorage;						 //Old-> #    1722: real :: lvf_targetStorage
 // 										 //Old-> #    1723: !
                  double lvf_min, lvf_max;						 //Old-> #    1724: real :: lvf_min,lvf_max
 //  ==============================							 //Old-> #    1725:  ==============================! ==============================
 // 										 //Old-> #    1726: !

 //  - Type Constructs -								 //Old-> #    1728:  - Type Constructs -! - Type Constructs -

                  //* ## ?????  							 //OLD-> #    1729: runTime)T


                  //* ## ?????  							 //OLD-> #    1729: 

 //  ===================								 //Old-> #    1730:  ===================! ===================
 // 										 //Old-> #    1731: !
                  lv_Ssr = 0 ;							 //Old-> #    1732: lv_Ssr=0
                  lvd_tempSsr = mpf_targetRelease    ;					 //Old-> #    1733: lvd_tempSsr=mpf_targetRelease   
 // 										 //Old-> #    1734: !
                  state = vState_Ba_maf(T%year) ;					 //Old-> #    1735: state=vState_Ba_maf(T%year)
                  state = vState_Ba_maf(T%year)+mvf_powell_flux-lvd_tempSsr   ;		 //Old-> #    1736: state=vState_Ba_maf(T%year)+mvf_powell_flux-lvd_tempSsr  
 // 										 //Old-> #    1737: !
                  lvf_powell_elevation = 0 ;						 //Old-> #    1738: lvf_powell_elevation=0
                  elevationsPowell(state,lvf_powell_elevation) ;				 //Old-> #    1739: call elevationsPowell(state,lvf_powell_elevation)
 // 										 //Old-> #    1740: !
                  lvf_useElevation = 0 ;						 //Old-> #    1741: lvf_useElevation=0
 // 										 //Old-> #    1742: !
                  if ((T%year < 2027) ) {						 //Old-> #    1743: if(T%year < 2027)then
 //  Table page 51 of the 2007 agreement						 //Old-> #    1744:  Table page 51 of the 2007 agreement! Table page 51 of the 2007 agreement
 //  -------------------------------------						 //Old-> #    1745:  -------------------------------------! -------------------------------------
                    targetElevations(T,lvf_useElevation) ;				 //Old-> #    1746: call targetElevations(T,lvf_useElevation)
 // 										 //Old-> #    1747: !
                    stateFromElevationPowell(lvf_targetStorage,lvf_useElevation) ;		 //Old-> #    1748: call stateFromElevationPowell(lvf_targetStorage,lvf_useElevation)
 // 										 //Old-> #    1749: !
 //  Both Tiers set by elevation of powell, only					 //Old-> #    1750:  Both Tiers set by elevation of powell, only! Both Tiers set by elevation of powell, only
 //  Avoid spill, equalize, or release 8.23						 //Old-> #    1751:  Avoid spill, equalize, or release 8.23! Avoid spill, equalize, or release 8.23
 //  05.02.13									 //Old-> #    1752:  05.02.13! 05.02.13
 //  6.A.1 page 53									 //Old-> #    1753:  6.A.1 page 53! 6.A.1 page 53
 //  ----------------------------------------------					 //Old-> #    1754:  ----------------------------------------------! ----------------------------------------------
                    if ((lvf_useElevation <= lvf_powell_elevation) ) {			 //Old-> #    1755: if(lvf_useElevation <= lvf_powell_elevation)then
 // 										 //Old-> #    1756: !
                      equalizationTier(T,lvf_powell_elevation,lvf_useElevation,lvd_balanceamount,lv_Ssr) ; //Old-> #    1757: call equalizationTier(T,lvf_powell_elevation,lvf_useElevation,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1758: !

                      //* ## ?????  							 //OLD-> #    1759: 

 // 										 //Old-> #    1760: !
                      upperElevationTier(T,lvd_balanceamount,lv_Ssr)          ;		 //Old-> #    1761: call upperElevationTier(T,lvd_balanceamount,lv_Ssr)         
 // 										 //Old-> #    1762: !
                      } // if (lvf_useElevation <= lvf_powell_elevation)			 //Old-> #    1763: endif

 // 										 //Old-> #    1764: !
                     } else { 							 //Old-> #    1765: else ! 2027 < year
 // 										 //Old-> #    1766: !
                    lvf_min = mpf_seven ;						 //Old-> #    1767: lvf_min=mpf_seven
                    lvf_max = mpf_nine !mpf_nineFive ;					 //Old-> #    1768: lvf_max=mpf_nine !mpf_nineFive
                    balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)    ;	 //Old-> #    1769: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)   
 // 										 //Old-> #    1770: !
                    } // if (T%year < 2027)						 //Old-> #    1771: endif

 // 										 //Old-> #    1772: !
                  return;								 //Old-> #    1773: return

                  }// targetAmount							 //Old-> #    1774: end subroutine targetAmount
 //  -------------------------							 //Old-> #    1775:  -------------------------! -------------------------

 //  ------------------------------------------------------------------------------------------- //Old-> #    1777:  -------------------------------------------------------------------------------------------! -------------------------------------------------------------------------------------------

//-----------------------------------------------------
                public void equalizationTier(T , lvf_powell_elevation , lvf_useElevation , double lvd_balanceamount , lv_Ssr) { //Old-> #    1778: subroutine equalizationTier(T,lvf_powell_elevation,lvf_useElevation,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1779: !
 //  ------------ Types and parameters -----------					 //Old-> #    1780:  ------------ Types and parameters -----------! ------------ Types and parameters -----------
                  int i, j, k;							 //Old-> #    1781: integer :: i,j,k
                  int loop = 500,lvi_count;						 //Old-> #    1782: integer :: loop=500,lvi_count

                  double lvf_mead_elev;						 //Old-> #    1784: real :: lvf_mead_elev
                  double 8);								 //Old-> #    1785: real(8) :: state,state_Mead,state_Powell
                  double 8);								 //Old-> #    1786: real(8) :: truncPowell,truncMead
                  double lvf_targetStorage;						 //Old-> #    1787: real :: lvf_targetStorage
                  // Skipped								 //OLD-> #    1788:                 real(8) :: lvd_balanceamount
                  double 8);								 //Old-> #    1789: real(8) :: lv_Ssr,lvd_tempSsr
                  double 8);								 //Old-> #    1790: real(8) :: lvd_holdRelease
                  double lvf_powell_elevation;						 //Old-> #    1791: real ::  lvf_powell_elevation
                  double lvf_useElevation;						 //Old-> #    1792: real :: lvf_useElevation
                  const double mead_elevationSpecial = 1105;				 //Old-> #    1793: real, parameter :: mead_elevationSpecial=1105
                  double x, y;							 //Old-> #    1794: real :: x,y
                  double lvf_min, lvf_max;						 //Old-> #    1795: real :: lvf_min,lvf_max

                  bool lvl_pass_i, lvl_pass_j, lvl_pass_k;				 //Old-> #    1797: logical :: lvl_pass_i,lvl_pass_j,lvl_pass_k
 //  =============================================					 //Old-> #    1798:  =============================================! =============================================
 // 										 //Old-> #    1799: !

 //  - Type Constructs -								 //Old-> #    1801:  - Type Constructs -! - Type Constructs -

                  //* ## ?????  							 //OLD-> #    1802: runTime)T


                  //* ## ?????  							 //OLD-> #    1802: 

 //  ===================								 //Old-> #    1803:  ===================! ===================
 // 										 //Old-> #    1804: !
                  lvd_holdRelease = 0 ;						 //Old-> #    1805: lvd_holdRelease=0
                  lvl_pass_i = .false. ; lvl_pass_j=.false. ; lvl_pass_k=.false. ;		 //Old-> #    1806: lvl_pass_i=.false. ; lvl_pass_j=.false. ; lvl_pass_k=.false.
 // 										 //Old-> #    1807: !
                  lvi_count = 0 ; x=0 ; y=0 ; lv_Ssr=0 ;				 //Old-> #    1808: lvi_count=0 ; x=0 ; y=0 ; lv_Ssr=0
                  lvd_tempSsr = mpf_targetRelease    ;					 //Old-> #    1809: lvd_tempSsr=mpf_targetRelease   
 // 										 //Old-> #    1810: !
 //  ----------------------------------------						 //Old-> #    1811:  ----------------------------------------! ----------------------------------------
 //                      !								 //Old-> #    1812:                      !!                     !
                  stateFromElevationPowell(lvf_targetStorage,lvf_useElevation) ;		 //Old-> #    1813: call stateFromElevationPowell(lvf_targetStorage,lvf_useElevation)
 // 										 //Old-> #    1814: !
 //  6.A.1 page 53									 //Old-> #    1815:  6.A.1 page 53! 6.A.1 page 53
 //  ----------------------------------------------					 //Old-> #    1816:  ----------------------------------------------! ----------------------------------------------

                  if ((lvf_useElevation <= lvf_powell_elevation) ) {			 //Old-> #    1818: if(lvf_useElevation <= lvf_powell_elevation)then
                    for (int i=1; i<=1; i++ ) {					 //Old-> #    1819: do i = 1,loop,1
 // 										 //Old-> #    1820: !
                      lvi_count = i ;							 //Old-> #    1821: lvi_count=i
 //  Place holder to use previous release before storage threshold is broached		 //Old-> #    1822:  Place holder to use previous release before storage threshold is broached! Place holder to use previous release before storage threshold is broached
                      lvd_holdRelease = lvd_tempSsr ;					 //Old-> #    1823: lvd_holdRelease=lvd_tempSsr
                      lvd_tempSsr = max(mpf_targetRelease,lvd_tempSsr+y) ;		 //Old-> #    1824: lvd_tempSsr=max(mpf_targetRelease,lvd_tempSsr+y)
 //  06.25.13 below....								 //Old-> #    1825:  06.25.13 below....! 06.25.13 below....
                      lvd_tempSsr = max(max(mpf_targetRelease,lvd_tempSsr+y),lvd_tempSsr+lvd_balanceamount) ; //Old-> #    1826: lvd_tempSsr=max(max(mpf_targetRelease,lvd_tempSsr+y),lvd_tempSsr+lvd_balanceamount)

 //  Section 6.A.1									 //Old-> #    1828:  Section 6.A.1! Section 6.A.1
 //  ---------------------------------------------------------------------------		 //Old-> #    1829:  ---------------------------------------------------------------------------! ---------------------------------------------------------------------------
                      state_Powell = 0 ;						 //Old-> #    1830: state_Powell=0
                      state_Powell =  vState_Ba_maf(T%year)+mvf_powell_flux-lvd_tempSsr  ;	 //Old-> #    1831: state_Powell = vState_Ba_maf(T%year)+mvf_powell_flux-lvd_tempSsr 
 // 										 //Old-> #    1832: !
                      state_Mead = 0 ;						 //Old-> #    1833: state_Mead=0
                      state_Mead = vState_Bb_maf(T%year)+mvf_mead_flux+lvd_tempSsr  ;	 //Old-> #    1834: state_Mead=vState_Bb_maf(T%year)+mvf_mead_flux+lvd_tempSsr 
 // 										 //Old-> #    1835: !
                      if (((state_Powell <= lvf_targetStorage) .or. (state_Powell < state_Mead)) ) { //Old-> #    1836: if((state_Powell <= lvf_targetStorage) .or. (state_Powell < state_Mead))then
 // 										 //Old-> #    1837: !
                        if ((1 < lvi_count) ) {					 //Old-> #    1838: if(1 < lvi_count)then
                          lvd_tempSsr = lvd_holdRelease ;				 //Old-> #    1839: lvd_tempSsr=lvd_holdRelease
                          lvl_pass_i = .true. ;					 //Old-> #    1840: lvl_pass_i=.true.

                          //* ## ?????  						 //OLD-> #    1841: 

                          } // if (1 < lvi_count)					 //Old-> #    1842: endif

 // 										 //Old-> #    1843: !
                        lv_Ssr = mpf_targetRelease  ;					 //Old-> #    1844: lv_Ssr=mpf_targetRelease 
 // 										 //Old-> #    1845: !
                        lvf_powell_elevation = 0 ;					 //Old-> #    1846: lvf_powell_elevation=0
                        state = state_Powell ;						 //Old-> #    1847: state=state_Powell
                        elevationsPowell(state,lvf_powell_elevation) ;			 //Old-> #    1848: call elevationsPowell(state,lvf_powell_elevation)
 //    										 //Old-> #    1849:    !   
                        lvf_mead_elev = 0 ;						 //Old-> #    1850: lvf_mead_elev=0
                        state = state_Mead ;						 //Old-> #    1851: state=state_Mead
                        elevationsMead(state,lvf_mead_elev) ;				 //Old-> #    1852: call elevationsMead(state,lvf_mead_elev)
 // 										 //Old-> #    1853: !
                        for (int j=1; j<=1; j++ ) {					 //Old-> #    1854: do j = 1,loop,1
                          if ((lvf_mead_elev <= mead_elevationSpecial) ) {		 //Old-> #    1855: if(lvf_mead_elev <= mead_elevationSpecial)then
                            for (int k=1; k<=1; k++ ) {					 //Old-> #    1856: do k = 1,loop,1

                              lv_Ssr = lv_Ssr+x ;					 //Old-> #    1858: lv_Ssr=lv_Ssr+x
 // 										 //Old-> #    1859: !
                              state_Powell =   vState_Ba_maf(T%year)+mvf_powell_flux-lv_Ssr  ; //Old-> #    1860: state_Powell =  vState_Ba_maf(T%year)+mvf_powell_flux-lv_Ssr 
                              lvf_powell_elevation = 0 ;				 //Old-> #    1861: lvf_powell_elevation=0
                              state = state_Powell ;					 //Old-> #    1862: state=state_Powell
                              elevationsPowell(state,lvf_powell_elevation) ;		 //Old-> #    1863: call elevationsPowell(state,lvf_powell_elevation)

                              state_Mead = vState_Bb_maf(T%year)+mvf_mead_flux+lv_Ssr  ;	 //Old-> #    1865: state_Mead=vState_Bb_maf(T%year)+mvf_mead_flux+lv_Ssr 
                              lvf_mead_elev = 0 ;					 //Old-> #    1866: lvf_mead_elev=0
                              state = state_Mead ;					 //Old-> #    1867: state=state_Mead
                              elevationsMead(state,lvf_mead_elev) ;			 //Old-> #    1868: call elevationsMead(state,lvf_mead_elev)
 // 										 //Old-> #    1869: !
                              truncPowell = 0 ;					 //Old-> #    1870: truncPowell=0
                              truncPowell = DINT(state_Powell*1000) ;			 //Old-> #    1871: truncPowell=DINT(state_Powell*1000)
                              truncMead = 0 ;						 //Old-> #    1872: truncMead=0
                              truncMead = DINT(state_Mead*1000) ;			 //Old-> #    1873: truncMead=DINT(state_Mead*1000)
 //  Nearest 1000 acre-feet comparison						 //Old-> #    1874:  Nearest 1000 acre-feet comparison! Nearest 1000 acre-feet comparison
 //  i.e., Powell and Mead are equilivent at +- 1000 AF					 //Old-> #    1875:  i.e., Powell and Mead are equilivent at +- 1000 AF! i.e., Powell and Mead are equilivent at +- 1000 AF
                              if ((truncPowell <= truncMead) ) {				 //Old-> #    1876: if(truncPowell <= truncMead)then
                                lvl_pass_k = .true. ;					 //Old-> #    1877: lvl_pass_k=.true.

                                //* ## ?????  						 //OLD-> #    1878: 

                                 } else if ( lvf_mead_elev >= mead_elevationSpecial) ) {	 //Old-> #    1879: else if(lvf_mead_elev >= mead_elevationSpecial)then
                                lvl_pass_k = .true. ;					 //Old-> #    1880: lvl_pass_k=.true.

                                //* ## ?????  						 //OLD-> #    1881: 

                                 } else if ( (lvf_powell_elevation  <= (lvf_useElevation-20)) ) { //Old-> #    1882: else if (lvf_powell_elevation  <= (lvf_useElevation-20))then
                                lvl_pass_k = .true. ;					 //Old-> #    1883: lvl_pass_k=.true.

                                //* ## ?????  						 //OLD-> #    1884: 

                                } // if (truncPowell <= truncMead)			 //Old-> #    1885: endif

 // 										 //Old-> #    1886: !
                              x = x+0.0025 ;						 //Old-> #    1887: x=x+0.0025
                              } //                             for (int k=1; k<=1; k++ ) {	 //Old-> #    1888: end do
 // 										 //Old-> #    1889: !

                            //* ## ?????  						 //OLD-> #    1890: 

                            lvl_pass_j = .true. ;					 //Old-> #    1891: lvl_pass_j=.true.
                            } // if (lvf_mead_elev <= mead_elevationSpecial)		 //Old-> #    1892: endif

 // 										 //Old-> #    1893: !

                          if ((lvl_pass_k .or. lvl_pass_j)exit ) {			 //Old-> #    1895: if(lvl_pass_k .or. lvl_pass_j)exit
											 //Old-> #    1896: end do

                            // ## ERROR 30						 //OLD-> #    1896: do

 // 										 //Old-> #    1897: !


                            //* ## ?????  						 //OLD-> #    1899: 

 // 										 //Old-> #    1900: !
                            y = y+0.001 ;						 //Old-> #    1901: y=y+0.001
 // 										 //Old-> #    1902: !
                            } // if (lvl_pass_k .or. lvl_pass_j)exit			 //Old-> #    1903: endif

 // 										 //Old-> #    1904: !
                          lv_Ssr = lvd_tempSsr ;					 //Old-> #    1905: lv_Ssr=lvd_tempSsr
 // 										 //Old-> #    1906: !
                          if ((lvl_pass_k .or. lvl_pass_j .or. lvl_pass_i)exit ) {		 //Old-> #    1907: if(lvl_pass_k .or. lvl_pass_j .or. lvl_pass_i)exit
											 //Old-> #    1908: end do

                            // ## ERROR 30						 //OLD-> #    1908: do

 // 										 //Old-> #    1909: !

                            //* ## ?????  						 //OLD-> #    1910: 


 //  Powell below target elevation							 //Old-> #    1912:  Powell below target elevation! Powell below target elevation
 //  04.30.13									 //Old-> #    1913:  04.30.13! 04.30.13
                            lvf_min = mpf_seven ;					 //Old-> #    1914: lvf_min=mpf_seven
                            lvf_max = mpf_nine ;					 //Old-> #    1915: lvf_max=mpf_nine
                            balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ;	 //Old-> #    1916: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1917: !
                            } // if (lvl_pass_k .or. lvl_pass_j .or. lvl_pass_i)exit	 //Old-> #    1918: endif

 // 										 //Old-> #    1919: !
											 //Old-> #    1920: return


                          //* ## ?????  						 //OLD-> #    1921: subroutine equalizationTier


                          //* ## ?????  						 //OLD-> #    1921: equalizationTier


                          //* ## ?????  						 //OLD-> #    1921: 

 //  -------------------------------							 //Old-> #    1922:  -------------------------------! -------------------------------

 //  -------------------------------------------------------				 //Old-> #    1924:  -------------------------------------------------------! -------------------------------------------------------

//-----------------------------------------------------
                          public void upperElevationTier(double TierElevation_2 , double lvd_balanceamount , double lv_Ssr) { //Old-> #    1925: subroutine upperElevationTier(T,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1926: !
 //  ----------- Types and parameters --------------					 //Old-> #    1927:  ----------- Types and parameters --------------! ----------- Types and parameters --------------
                            double lvf_powell_elevation, lvf_mead_elev;			 //Old-> #    1928: real :: lvf_powell_elevation,lvf_mead_elev
                            double lvf_useElevation;					 //Old-> #    1929: real :: lvf_useElevation
                            double lvf_targetStorage;					 //Old-> #    1930: real :: lvf_targetStorage
                            double 8);						 //Old-> #    1931: real(8) :: state,state_Mead,state_Powell
                            // Skipped						 //OLD-> #    1932:                 real(8) :: lvd_balanceamount
                            // Skipped						 //OLD-> #    1933:                 real(8) :: lv_Ssr
                            // Skipped						 //OLD-> #    1934:                 real, parameter :: lvf_TierElevation_2=3575
                            const double lvf_TierElevationMead_2 = 1075;			 //Old-> #    1935: real, parameter :: lvf_TierElevationMead_2=1075
                            double lvf_min, lvf_max;					 //Old-> #    1936: real :: lvf_min,lvf_max
 //  ===============================================					 //Old-> #    1937:  ===============================================! ===============================================
 // 										 //Old-> #    1938: !

 //  - Type Constructs -								 //Old-> #    1940:  - Type Constructs -! - Type Constructs -

                            //* ## ?????  						 //OLD-> #    1941: runTime)T


                            //* ## ?????  						 //OLD-> #    1941: 

 //  ===================								 //Old-> #    1942:  ===================! ===================
 // 										 //Old-> #    1943: !
 //  Upper Elevation Balancing Tier							 //Old-> #    1944:  Upper Elevation Balancing Tier! Upper Elevation Balancing Tier
 //  05.02.13									 //Old-> #    1945:  05.02.13! 05.02.13
 // 										 //Old-> #    1946: !
                            lv_Ssr = mpf_targetRelease ;				 //Old-> #    1947: lv_Ssr=mpf_targetRelease
                            state = 0 ;						 //Old-> #    1948: state=0
 // 										 //Old-> #    1949: !
                            targetElevations(T,lvf_useElevation) ;			 //Old-> #    1950: call targetElevations(T,lvf_useElevation)
 // 										 //Old-> #    1951: !
                            stateFromElevationPowell(lvf_targetStorage,lvf_useElevation) ;	 //Old-> #    1952: call stateFromElevationPowell(lvf_targetStorage,lvf_useElevation)
 // 										 //Old-> #    1953: !
                            state_Powell =  0    ;					 //Old-> #    1954: state_Powell = 0   
                            state_Powell =  vState_Ba_maf(T%year)+mvf_powell_flux-lv_Ssr      ; //Old-> #    1955: state_Powell = vState_Ba_maf(T%year)+mvf_powell_flux-lv_Ssr     
 // 										 //Old-> #    1956: !
                            lvf_powell_elevation = 0 ;					 //Old-> #    1957: lvf_powell_elevation=0
                            state = state_Powell ;					 //Old-> #    1958: state=state_Powell
                            elevationsPowell(state,lvf_powell_elevation) ;		 //Old-> #    1959: call elevationsPowell(state,lvf_powell_elevation)

                            state_Mead = 0 ;						 //Old-> #    1961: state_Mead=0
                            state_Mead = vState_Bb_maf(T%year)+mvf_mead_flux+lv_Ssr  ;	 //Old-> #    1962: state_Mead=vState_Bb_maf(T%year)+mvf_mead_flux+lv_Ssr 
 // 										 //Old-> #    1963: !
                            lvf_mead_elev = 0 ;					 //Old-> #    1964: lvf_mead_elev=0
                            state = state_Mead ;					 //Old-> #    1965: state=state_Mead
                            elevationsMead(state,lvf_mead_elev) ;			 //Old-> #    1966: call elevationsMead(state,lvf_mead_elev)
 // 										 //Old-> #    1967: !
                            if (( lvf_powell_elevation < lvf_useElevation) ) {		 //Old-> #    1968: if( lvf_powell_elevation < lvf_useElevation)then
                              if ((lvf_TierElevation_2 <= lvf_powell_elevation) ) {	 //Old-> #    1969: if(lvf_TierElevation_2 <= lvf_powell_elevation)then
 //  6.B.1 page 54									 //Old-> #    1970:  6.B.1 page 54! 6.B.1 page 54
                                if ((lvf_TierElevationMead_2 < lvf_mead_elev) ) {		 //Old-> #    1971: if(lvf_TierElevationMead_2 < lvf_mead_elev)then
                                  lv_Ssr = mpf_targetRelease    ;			 //Old-> #    1972: lv_Ssr=mpf_targetRelease   

                                  //* ## ?????  					 //OLD-> #    1973: 

 // 										 //Old-> #    1974: !
 //  6.B.2 page 54									 //Old-> #    1975:  6.B.2 page 54! 6.B.2 page 54
 //  04.30.13									 //Old-> #    1976:  04.30.13! 04.30.13
                                  lvf_min = mpf_seven ;					 //Old-> #    1977: lvf_min=mpf_seven
                                  lvf_max = mpf_nine ;					 //Old-> #    1978: lvf_max=mpf_nine
                                  balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ; //Old-> #    1979: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1980: !
                                  } // if (lvf_TierElevationMead_2 < lvf_mead_elev)	 //Old-> #    1981: endif

 //  6.B.4										 //Old-> #    1982:  6.B.4! 6.B.4
                                if ((lvf_mead_elev < lvf_TierElevationMead_2) ) {		 //Old-> #    1983: if(lvf_mead_elev < lvf_TierElevationMead_2)then
                                  if ((lvf_TierElevation_2 <= lvf_powell_elevation) ) {	 //Old-> #    1984: if(lvf_TierElevation_2 <= lvf_powell_elevation)then
                                    lvf_min = mpf_targetRelease ;			 //Old-> #    1985: lvf_min=mpf_targetRelease
                                    lvf_max = mpf_nine ;				 //Old-> #    1986: lvf_max=mpf_nine
                                    balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr) ; //Old-> #    1987: call balanceContent(T,lvf_min,lvf_max,lvd_balanceamount,lv_Ssr)
                                    } // if (lvf_TierElevation_2 <= lvf_powell_elevation)	 //Old-> #    1988: endif

                                  } // if (lvf_mead_elev < lvf_TierElevationMead_2)	 //Old-> #    1989: endif

                                } // if (lvf_TierElevation_2 <= lvf_powell_elevation)	 //Old-> #    1990: endif


                              //* ## ?????  						 //OLD-> #    1991: 

 //  6.B.3 page 54 (my best interpretation- cannot match exactly i.e., 			 //Old-> #    1992:  6.B.3 page 54 (my best interpretation- cannot match exactly i.e., ! 6.B.3 page 54 (my best interpretation- cannot match exactly i.e., 
 //   Water Year versus calendar year and annual versus monthly issues)			 //Old-> #    1993:   Water Year versus calendar year and annual versus monthly issues)!  Water Year versus calendar year and annual versus monthly issues)
 //  04.30.13									 //Old-> #    1994:  04.30.13! 04.30.13
 // 										 //Old-> #    1995: !
                              equalizationTier(T,lvf_powell_elevation,lvf_useElevation,lvd_balanceamount,lv_Ssr) ; //Old-> #    1996: call equalizationTier(T,lvf_powell_elevation,lvf_useElevation,lvd_balanceamount,lv_Ssr)
 // 										 //Old-> #    1997: !
                              } // if ( lvf_powell_elevation < lvf_useElevation)		 //Old-> #    1998: endif

 // 										 //Old-> #    1999: !
                            return;							 //Old-> #    2000: return

                            }// upperElevationTier					 //Old-> #    2001: end subroutine upperElevationTier
 //  --------------------------------							 //Old-> #    2002:  --------------------------------! --------------------------------

 //  ---------------------------------------------					 //Old-> #    2004:  ---------------------------------------------! ---------------------------------------------

//-----------------------------------------------------
                          public void targetElevations(T , double lvf_useElevation) {	 //Old-> #    2005: subroutine targetElevations(T,lvf_useElevation)
 // 										 //Old-> #    2006: !
 //  ------- Types --------								 //Old-> #    2007:  ------- Types --------! ------- Types --------
                            // Skipped						 //OLD-> #    2008:                 real :: lvf_useElevation
 //  ======================								 //Old-> #    2009:  ======================! ======================
 // 										 //Old-> #    2010: !

 //  - Type Constructs -								 //Old-> #    2012:  - Type Constructs -! - Type Constructs -

                            //* ## ?????  						 //OLD-> #    2013: runTime)T


                            //* ## ?????  						 //OLD-> #    2013: 

 //  ===================								 //Old-> #    2014:  ===================! ===================
 // 										 //Old-> #    2015: !
                            if ((T%year == 2008)lvf_useElevation=3636 ) {			 //Old-> #    2016: if(T%year == 2008)lvf_useElevation=3636
                              if ((T%year == 2009)lvf_useElevation=3639  ) {		 //Old-> #    2017: if(T%year == 2009)lvf_useElevation=3639 
                                if ((T%year == 2010)lvf_useElevation=3642  ) {		 //Old-> #    2018: if(T%year == 2010)lvf_useElevation=3642 
                                  if ((T%year == 2011)lvf_useElevation=3643  ) {		 //Old-> #    2019: if(T%year == 2011)lvf_useElevation=3643 
                                    if ((T%year == 2012)lvf_useElevation=3645  ) {		 //Old-> #    2020: if(T%year == 2012)lvf_useElevation=3645 
                                      if ((T%year == 2013)lvf_useElevation=3646  ) {	 //Old-> #    2021: if(T%year == 2013)lvf_useElevation=3646 
                                        if ((T%year == 2014)lvf_useElevation=3648  ) {	 //Old-> #    2022: if(T%year == 2014)lvf_useElevation=3648 
                                          if ((T%year == 2015)lvf_useElevation=3649  ) {	 //Old-> #    2023: if(T%year == 2015)lvf_useElevation=3649 
                                            if ((T%year == 2016)lvf_useElevation=3651  ) {	 //Old-> #    2024: if(T%year == 2016)lvf_useElevation=3651 
                                              if ((T%year == 2017)lvf_useElevation=3652  ) { //Old-> #    2025: if(T%year == 2017)lvf_useElevation=3652 
                                                if ((T%year == 2018)lvf_useElevation=3654  ) { //Old-> #    2026: if(T%year == 2018)lvf_useElevation=3654 
                                                  if ((T%year == 2019)lvf_useElevation=3655  ) { //Old-> #    2027: if(T%year == 2019)lvf_useElevation=3655 
                                                    if ((T%year == 2020)lvf_useElevation=3657  ) { //Old-> #    2028: if(T%year == 2020)lvf_useElevation=3657 
                                                      if ((T%year == 2021)lvf_useElevation=3659  ) { //Old-> #    2029: if(T%year == 2021)lvf_useElevation=3659 
                                                        if ((T%year == 2022)lvf_useElevation=3660  ) { //Old-> #    2030: if(T%year == 2022)lvf_useElevation=3660 
                                                          if ((T%year == 2023)lvf_useElevation=3662  ) { //Old-> #    2031: if(T%year == 2023)lvf_useElevation=3662 
                                                            if ((T%year == 2024)lvf_useElevation=3663  ) { //Old-> #    2032: if(T%year == 2024)lvf_useElevation=3663 
                                                              if ((T%year == 2025)lvf_useElevation=3664  ) { //Old-> #    2033: if(T%year == 2025)lvf_useElevation=3664 
                                                                if ((T%year == 2026)lvf_useElevation=3666 ) { //Old-> #    2034: if(T%year == 2026)lvf_useElevation=3666
 // 										 //Old-> #    2035: !
											 //Old-> #    2036: return


                                                                  //* ## ?????  		 //OLD-> #    2037: subroutine targetElevations


                                                                  //* ## ?????  		 //OLD-> #    2037: targetElevations


                                                                  //* ## ?????  		 //OLD-> #    2037: 

 //  -----------------------------							 //Old-> #    2038:  -----------------------------! -----------------------------
 //  ---------------------------------------------------------------			 //Old-> #    2040:  ---------------------------------------------------------------! ---------------------------------------------------------------

//-----------------------------------------------------
                                                                  public void balanceContent(T , lvf_Min , lvf_Max , double lvd_balance , double release) { //Old-> #    2041: subroutine balanceContent(T,lvf_Min,lvf_Max,lvd_balance,release)
 // 										 //Old-> #    2042: !
 //  ----------------------- Types ---------------------------				 //Old-> #    2043:  ----------------------- Types ---------------------------! ----------------------- Types ---------------------------
                                                                    int i, closure;	 //Old-> #    2044: integer :: i,closure

                                                                    double 8);		 //Old-> #    2046: real(8) :: release,lvd_balance,lvd_balanceIn,lvd_balanceUse
                                                                    double 8);		 //Old-> #    2047: real(8) :: lvd_holdRelease
                                                                    double 8);		 //Old-> #    2048: real(8) :: truncPowell,truncMead
                                                                    double 8);		 //Old-> #    2049: real(8) :: lvd_addWater
                                                                    double 8);		 //Old-> #    2050: real(8) :: state_Powell,state_Mead
                                                                    const double target = 8.23; //Old-> #    2051: real, parameter :: target=8.23
                                                                    double lvf_Min, lvf_Max; //Old-> #    2052: real :: lvf_Min,lvf_Max

                                                                    bool lvl_pass_i;	 //Old-> #    2054: logical ::  lvl_pass_i
 //  =========================================================				 //Old-> #    2055:  =========================================================! =========================================================
 // 										 //Old-> #    2056: !

 //  -- Type Constructs -								 //Old-> #    2058:  -- Type Constructs -! -- Type Constructs -

                                                                    //* ## ?????  		 //OLD-> #    2059: runTime)T


                                                                    //* ## ?????  		 //OLD-> #    2059: 

 //  ====================								 //Old-> #    2060:  ====================! ====================
 // 										 //Old-> #    2061: !
                                                                    release = 0. ;		 //Old-> #    2062: release=0.
                                                                    state_Powell = 0. ;	 //Old-> #    2063: state_Powell=0.
                                                                    state_Mead = 0. ;	 //Old-> #    2064: state_Mead=0.
                                                                    lvd_addWater = 0. ;	 //Old-> #    2065: lvd_addWater=0.
                                                                    lvd_balanceIn = 0 ;	 //Old-> #    2066: lvd_balanceIn=0
                                                                    lvd_balanceUse = 0 ;	 //Old-> #    2067: lvd_balanceUse=0
 // 										 //Old-> #    2068: !
                                                                    lvl_pass_i = .false. ;	 //Old-> #    2069: lvl_pass_i=.false.
 // 										 //Old-> #    2070: !
                                                                    state_Powell =  vState_Ba_maf(T%year)+mvf_powell_flux-target ; //Old-> #    2071: state_Powell = vState_Ba_maf(T%year)+mvf_powell_flux-target
                                                                    state_Mead =  vState_Bb_maf(T%year)+mvf_mead_flux+target ; //Old-> #    2072: state_Mead = vState_Bb_maf(T%year)+mvf_mead_flux+target
 // 										 //Old-> #    2073: !
                                                                    lvd_balanceIn = (state_Powell-state_Mead)*1/2. ; //Old-> #    2074: lvd_balanceIn=(state_Powell-state_Mead)*1/2.
                                                                    lvd_balanceUse = MIN(lvd_balanceIn,lvd_balance) ; //Old-> #    2075: lvd_balanceUse=MIN(lvd_balanceIn,lvd_balance)
 // 										 //Old-> #    2076: !
                                                                    closure = 0 ;		 //Old-> #    2077: closure=0
                                                                    lvd_holdRelease = 0 ;	 //Old-> #    2078: lvd_holdRelease=0
                                                                    for (int i=1; i<=1; i++ ) { //Old-> #    2079: do i = 1,5000,1
                                                                      closure = i ;	 //Old-> #    2080: closure=i
 // 										 //Old-> #    2081: !
                                                                      release = MAX(lvf_Min,MIN(lvf_Max,lvf_Min+lvd_balanceUse+lvd_addWater)) ; //Old-> #    2082: release=MAX(lvf_Min,MIN(lvf_Max,lvf_Min+lvd_balanceUse+lvd_addWater))

 //                         lvd_holdRelease=release					 //Old-> #    2084:                         lvd_holdRelease=release!                        lvd_holdRelease=release
 // 										 //Old-> #    2085: !
                                                                      state_Powell =  vState_Ba_maf(T%year)+mvf_powell_flux-release ; //Old-> #    2086: state_Powell = vState_Ba_maf(T%year)+mvf_powell_flux-release
                                                                      state_Mead =  vState_Bb_maf(T%year)+mvf_mead_flux+release ; //Old-> #    2087: state_Mead = vState_Bb_maf(T%year)+mvf_mead_flux+release
 // 										 //Old-> #    2088: !
                                                                      truncPowell = 0 ;	 //Old-> #    2089: truncPowell=0
                                                                      truncPowell = DINT(state_Powell*1000) ; //Old-> #    2090: truncPowell=DINT(state_Powell*1000)
                                                                      truncMead = 0 ;	 //Old-> #    2091: truncMead=0
                                                                      truncMead = DINT(state_Mead*1000) ; //Old-> #    2092: truncMead=DINT(state_Mead*1000)
 //  Nearest 1000 acre-feet comparison						 //Old-> #    2093:  Nearest 1000 acre-feet comparison! Nearest 1000 acre-feet comparison
 //  i.e., Powell and Mead are equilivent at +- 1000 AF					 //Old-> #    2094:  i.e., Powell and Mead are equilivent at +- 1000 AF! i.e., Powell and Mead are equilivent at +- 1000 AF
                                                                      if ((truncPowell <= truncMead)lvl_pass_i=.true. ) { //Old-> #    2095: if(truncPowell <= truncMead)lvl_pass_i=.true.
 // 										 //Old-> #    2096: !
                                                                        if ((truncPowell < truncMead) ) { //Old-> #    2097: if(truncPowell < truncMead)then
                                                                          lvd_addWater = 0 !lvd_addWater-0.0005 ; //Old-> #    2098: lvd_addWater=0 !lvd_addWater-0.0005

                                                                          //* ## ?????  	 //OLD-> #    2099: 

                                                                          lvd_addWater = lvd_addWater+0.0075 ; //Old-> #    2100: lvd_addWater=lvd_addWater+0.0075
                                                                          } // if (truncPowell < truncMead) //Old-> #    2101: endif

 // 										 //Old-> #    2102: !
                                                                        if ((lvd_balanceUse < 0) ) { //Old-> #    2103: if(lvd_balanceUse < 0)then
 // 										 //Old-> #    2104: !
                                                                          release = MAX(lvf_Min,mpf_targetRelease+lvd_balanceUse) ; //Old-> #    2105: release=MAX(lvf_Min,mpf_targetRelease+lvd_balanceUse)
                                                                          lvl_pass_i = .true. ; //Old-> #    2106: lvl_pass_i=.true.

                                                                          //* ## ?????  	 //OLD-> #    2107: 

                                                                          if ((500 < closure) ) { //Old-> #    2108: if(500 < closure)then
                                                                            if ((lvd_holdRelease < release) ) { //Old-> #    2109: if(lvd_holdRelease < release)then
                                                                              if ((release < lvd_holdRelease+0.1)lvl_pass_i=.true. ) { //Old-> #    2110: if(release < lvd_holdRelease+0.1)lvl_pass_i=.true.

                                                                                //* ## ?????   //OLD-> #    2111: 

                                                                                if ((lvd_holdRelease-0.1 < release)lvl_pass_i=.true. ) { //Old-> #    2112: if(lvd_holdRelease-0.1 < release)lvl_pass_i=.true.
                                                                                  } // if (lvd_holdRelease-0.1 < release)lvl_pass_i=.true. //Old-> #    2113: endif



                                                                                } // if (release < lvd_holdRelease+0.1)lvl_pass_i=.true. //Old-> #    2116: endif

                                                                              if ((4995 < closure) ) { //Old-> #    2117: if(4995 < closure)then
                                                                                release = max(mpf_targetRelease,min(lvf_MAX,release)) ; //Old-> #    2118: release=max(mpf_targetRelease,min(lvf_MAX,release))
                                                                                } // if (4995 < closure) //Old-> #    2119: endif

                                                                              } // if (lvd_holdRelease < release) //Old-> #    2120: endif

                                                                            lvd_holdRelease = release ; //Old-> #    2121: lvd_holdRelease=release

                                                                            if ((lvl_pass_i)exit ) { //Old-> #    2123: if(lvl_pass_i)exit
											 //Old-> #    2124: end do

                                                                              // ## ERROR 30 //OLD-> #    2124: do

 // 										 //Old-> #    2125: !
											 //Old-> #    2126: return


                                                                              //* ## ?????   //OLD-> #    2127: subroutine balanceContent


                                                                              //* ## ?????   //OLD-> #    2127: balanceContent


                                                                              //* ## ?????   //OLD-> #    2127: 

 //  -----------------------------							 //Old-> #    2128:  -----------------------------! -----------------------------

 //  ------------------------------------------------					 //Old-> #    2130:  ------------------------------------------------! ------------------------------------------------

//-----------------------------------------------------
                                                                              public void elevationsPowell(state , lvf_powell_elev) { //Old-> #    2131: subroutine elevationsPowell(state,lvf_powell_elev)
 //                                            Sum of        Mean               Approx	 //Old-> #    2132:                                            Sum of        Mean               Approx!                                           Sum of        Mean               Approx
 //            Source                    DF     Squares      Square    F Value    Pr > F	 //Old-> #    2133:            Source                    DF     Squares      Square    F Value    Pr > F!           Source                    DF     Squares      Square    F Value    Pr > F
 // 										 //Old-> #    2134: !
 //            Model                      2     3304288     1652144    2.323E8    <.0001	 //Old-> #    2135:            Model                      2     3304288     1652144    2.323E8    <.0001!           Model                      2     3304288     1652144    2.323E8    <.0001
 //            Error                    338      2.4037     0.00711			 //Old-> #    2136:            Error                    338      2.4037     0.00711!           Error                    338      2.4037     0.00711
 //            Corrected Total          340     3304290					 //Old-> #    2137:            Corrected Total          340     3304290!           Corrected Total          340     3304290
 // 										 //Old-> #    2138: !
 // 										 //Old-> #    2139: !
 //                                                 Approx				 //Old-> #    2140:                                                 Approx!                                                Approx
 //                   Parameter      Estimate    Std Error    Approximate 95% Confidence Limits //Old-> #    2141:                   Parameter      Estimate    Std Error    Approximate 95% Confidence Limits!                  Parameter      Estimate    Std Error    Approximate 95% Confidence Limits
 // 										 //Old-> #    2142: !
 //                   B0                382.8       0.3532       382.1       383.5		 //Old-> #    2143:                   B0                382.8       0.3532       382.1       383.5!                  B0                382.8       0.3532       382.1       383.5
 //                   B1               0.2136     0.000135      0.2134      0.2139		 //Old-> #    2144:                   B1               0.2136     0.000135      0.2134      0.2139!                  B1               0.2136     0.000135      0.2134      0.2139
 //                   B2               2931.0       0.3783      2930.3      2931.7		 //Old-> #    2145:                   B2               2931.0       0.3783      2930.3      2931.7!                  B2               2931.0       0.3783      2930.3      2931.7
 //                    y = B2 + B0* volume**B1;					 //Old-> #    2146:                    y = B2 + B0* volume**B1;!                   y = B2 + B0* volume**B1;

 //                State in units: maf						 //Old-> #    2148:                State in units: maf!               State in units: maf
 //                elevations in units: feet (msl)					 //Old-> #    2149:                elevations in units: feet (msl)!               elevations in units: feet (msl)
 //                New analyses on 04.02.12 DAS					 //Old-> #    2150:                New analyses on 04.02.12 DAS!               New analyses on 04.02.12 DAS
 // 										 //Old-> #    2151: !
 //                02.27.13--- I checked, I used total volume for these analyses		 //Old-> #    2152:                02.27.13--- I checked, I used total volume for these analyses!               02.27.13--- I checked, I used total volume for these analyses
 //                i.e., MeadElevationFromVolume.sas					 //Old-> #    2153:                i.e., MeadElevationFromVolume.sas!               i.e., MeadElevationFromVolume.sas



 //  ---------------- Types ---------------------					 //Old-> #    2157:  ---------------- Types ---------------------! ---------------- Types ---------------------
                                                                                const double lvf_slope = 0.2136; //Old-> #    2158: real,parameter :: lvf_slope=0.2136
                                                                                const double lvf_scaling = 382.8; //Old-> #    2159: real,parameter :: lvf_scaling=382.8
                                                                                const double lvf_intercept = 2931.0; //Old-> #    2160: real,parameter :: lvf_intercept=2931.0
                                                                                const double lvp_powellMaxElevation = 3710; //Old-> #    2161: real,parameter :: lvp_powellMaxElevation=3710
                                                                                double lvf_powell_elev; //Old-> #    2162: real :: lvf_powell_elev
                                                                                double 8);	 //Old-> #    2163: real(8) :: state
 //  =============================================					 //Old-> #    2164:  =============================================! =============================================
 // 										 //Old-> #    2165: !
 // 										 //Old-> #    2166: !
                                                                                lvf_powell_elev = 0 ; //Old-> #    2167: lvf_powell_elev=0
                                                                                mvf_powell_excess_elev = 0 ; //Old-> #    2168: mvf_powell_excess_elev=0
                                                                                if ((1.89500 <= state) ) { //Old-> #    2169: if(1.89500 <= state)then
                                                                                  if ((state <= lvp_powellMax) ) { //Old-> #    2170: if(state <= lvp_powellMax)then
                                                                                    lvf_powell_elev = (lvf_intercept + lvf_scaling*state**lvf_slope) ; //Old-> #    2171: lvf_powell_elev=(lvf_intercept + lvf_scaling*state**lvf_slope)

                                                                                    //* ## ?????   //OLD-> #    2172: 

 // lvf_powell_elev=(lvf_intercept + lvf_scaling*27.8659**lvf_slope)			 //Old-> #    2173: lvf_powell_elev=(lvf_intercept + lvf_scaling*27.8659**lvf_slope)!lvf_powell_elev=(lvf_intercept + lvf_scaling*27.8659**lvf_slope)
                                                                                    lvf_powell_elev = (lvf_intercept + lvf_scaling*state**lvf_slope) ; //Old-> #    2174: lvf_powell_elev=(lvf_intercept + lvf_scaling*state**lvf_slope)

                                                                                    } // if (state <= lvp_powellMax) //Old-> #    2176: endif


                                                                                  //* ## ?????   //OLD-> #    2177: 

                                                                                  lvf_powell_elev = (lvf_intercept + lvf_scaling*1.89500**lvf_slope) ; //Old-> #    2178: lvf_powell_elev=(lvf_intercept + lvf_scaling*1.89500**lvf_slope)
                                                                                  } // if (1.89500 <= state) //Old-> #    2179: endif

 // 										 //Old-> #    2180: !
                                                                                if ((lvp_powellMaxElevation < lvf_powell_elev) ) { //Old-> #    2181: if(lvp_powellMaxElevation < lvf_powell_elev)then
                                                                                  mvf_powell_excess_elev = lvf_powell_elev ; //Old-> #    2182: mvf_powell_excess_elev=lvf_powell_elev
                                                                                  lvf_powell_elev = lvp_powellMaxElevation ; //Old-> #    2183: lvf_powell_elev=lvp_powellMaxElevation
                                                                                  } // if (lvp_powellMaxElevation < lvf_powell_elev) //Old-> #    2184: endif

 // 										 //Old-> #    2185: !
 // 										 //Old-> #    2186: !
                                                                                return;	 //Old-> #    2187: return

                                                                                }// elevationsPowell //Old-> #    2188: end subroutine elevationsPowell
 //  -----------------------------							 //Old-> #    2189:  -----------------------------! -----------------------------

 //  --------------------------------------------------------				 //Old-> #    2191:  --------------------------------------------------------! --------------------------------------------------------

//-----------------------------------------------------
                                                                              public void stateFromElevationPowell(double state , double lvf_powell_elev) { //Old-> #    2192: subroutine stateFromElevationPowell(state,lvf_powell_elev)
 // 										 //Old-> #    2193: !
 //  -------------- Types and parameters ----------					 //Old-> #    2194:  -------------- Types and parameters ----------! -------------- Types and parameters ----------
                                                                                const double lvf_slope = 0.2136; //Old-> #    2195: real,parameter :: lvf_slope=0.2136
                                                                                const double lvf_scaling = 382.8; //Old-> #    2196: real,parameter :: lvf_scaling=382.8
                                                                                const double lvf_intercept = 2931.0; //Old-> #    2197: real,parameter :: lvf_intercept=2931.0
                                                                                // Skipped	 //OLD-> #    2198:                 real :: lvf_powell_elev
                                                                                // Skipped	 //OLD-> #    2199:                 real :: state
 //  ==============================================					 //Old-> #    2200:  ==============================================! ==============================================
 // 										 //Old-> #    2201: !
                                                                                state = ((lvf_powell_elev - lvf_intercept) * (1./lvf_scaling))**(1/lvf_slope)  ; //Old-> #    2202: state=((lvf_powell_elev - lvf_intercept) * (1./lvf_scaling))**(1/lvf_slope) 
 // 										 //Old-> #    2203: !
 // 										 //Old-> #    2204: !
                                                                                return;	 //Old-> #    2205: return

                                                                                }// stateFromElevationPowell //Old-> #    2206: end subroutine stateFromElevationPowell
 //  --------------------------------------						 //Old-> #    2207:  --------------------------------------! --------------------------------------

 //  -------------------------------------------					 //Old-> #    2209:  -------------------------------------------! -------------------------------------------

//-----------------------------------------------------
                                                                              public void elevationsMead(state , lvf_mead_elev) { //Old-> #    2210: subroutine elevationsMead(state,lvf_mead_elev)

 // 										 //Old-> #    2212: !
 //                                            Sum of        Mean               Approx	 //Old-> #    2213:                                            Sum of        Mean               Approx!                                           Sum of        Mean               Approx
 //            Source                    DF     Squares      Square    F Value    Pr > F	 //Old-> #    2214:            Source                    DF     Squares      Square    F Value    Pr > F!           Source                    DF     Squares      Square    F Value    Pr > F
 // 										 //Old-> #    2215: !
 //            Model                      2     3132617     1566309    1717356    <.0001	 //Old-> #    2216:            Model                      2     3132617     1566309    1717356    <.0001!           Model                      2     3132617     1566309    1717356    <.0001
 //            Error                    332       302.8      0.9120			 //Old-> #    2217:            Error                    332       302.8      0.9120!           Error                    332       302.8      0.9120
 //            Corrected Total          334     3132920					 //Old-> #    2218:            Corrected Total          334     3132920!           Corrected Total          334     3132920
 // 										 //Old-> #    2219: !
 //                                                 Approx				 //Old-> #    2220:                                                 Approx!                                                Approx
 //                   Parameter      Estimate    Std Error    Approximate 95% Confidence Limits //Old-> #    2221:                   Parameter      Estimate    Std Error    Approximate 95% Confidence Limits!                  Parameter      Estimate    Std Error    Approximate 95% Confidence Limits
 // 										 //Old-> #    2222: !
 //                   B0                178.1       1.4980       175.1       181.0		 //Old-> #    2223:                   B0                178.1       1.4980       175.1       181.0!                  B0                178.1       1.4980       175.1       181.0
 //                   B1               0.3420      0.00161      0.3388      0.3452		 //Old-> #    2224:                   B1               0.3420      0.00161      0.3388      0.3452!                  B1               0.3420      0.00161      0.3388      0.3452
 //                   B2                665.5       1.7903       662.0       669.0		 //Old-> #    2225:                   B2                665.5       1.7903       662.0       669.0!                  B2                665.5       1.7903       662.0       669.0
 //                    y = B2 + B0* volume**B1;					 //Old-> #    2226:                    y = B2 + B0* volume**B1;!                   y = B2 + B0* volume**B1;

 //                State in units: maf						 //Old-> #    2228:                State in units: maf!               State in units: maf
 //                elevations in units: feet (msl)					 //Old-> #    2229:                elevations in units: feet (msl)!               elevations in units: feet (msl)
 //               04.02.12 DAS							 //Old-> #    2230:               04.02.12 DAS!              04.02.12 DAS


 //  ------------------ Types ----------------						 //Old-> #    2233:  ------------------ Types ----------------! ------------------ Types ----------------
                                                                                const double lvf_slope = 0.3420; //Old-> #    2234: real,parameter :: lvf_slope=0.3420
                                                                                const double lvf_scaling = 178.1; //Old-> #    2235: real,parameter :: lvf_scaling=178.1
                                                                                const double lvf_intercept = 664; //Old-> #    2236: real,parameter :: lvf_intercept=664
                                                                                const double lvp_meadMaxElevation = 1229; //Old-> #    2237: real,parameter :: lvp_meadMaxElevation=1229
                                                                                double lvf_mead_elev; //Old-> #    2238: real :: lvf_mead_elev
                                                                                double 8);	 //Old-> #    2239: real(8) :: state
 //  =========================================						 //Old-> #    2240:  =========================================! =========================================
 // 										 //Old-> #    2241: !
                                                                                lvf_mead_elev = 0 ; //Old-> #    2242: lvf_mead_elev=0
                                                                                if ((2.03500 <= state) ) { //Old-> #    2243: if(2.03500 <= state)then
                                                                                  if ((state <= 29.4182) ) { //Old-> #    2244: if(state <= 29.4182)then
                                                                                    lvf_mead_elev = (lvf_intercept + lvf_scaling*state**lvf_slope) ; //Old-> #    2245: lvf_mead_elev=(lvf_intercept + lvf_scaling*state**lvf_slope)

                                                                                    //* ## ?????   //OLD-> #    2246: 

                                                                                    lvf_mead_elev = (lvf_intercept + lvf_scaling*29.4182**lvf_slope) ; //Old-> #    2247: lvf_mead_elev=(lvf_intercept + lvf_scaling*29.4182**lvf_slope)
                                                                                    } // if (state <= 29.4182) //Old-> #    2248: endif


                                                                                  //* ## ?????   //OLD-> #    2249: 

                                                                                  lvf_mead_elev = (lvf_intercept + lvf_scaling*2.035**lvf_slope) ; //Old-> #    2250: lvf_mead_elev=(lvf_intercept + lvf_scaling*2.035**lvf_slope)
                                                                                  } // if (2.03500 <= state) //Old-> #    2251: endif

 // 										 //Old-> #    2252: !
                                                                                if ((lvp_meadMaxElevation < lvf_mead_elev)lvf_mead_elev=lvp_meadMaxElevation ) { //Old-> #    2253: if(lvp_meadMaxElevation < lvf_mead_elev)lvf_mead_elev=lvp_meadMaxElevation
 // 										 //Old-> #    2254: !
 // 										 //Old-> #    2255: !
											 //Old-> #    2256: return


                                                                                  //* ## ?????   //OLD-> #    2257: subroutine elevationsMead


                                                                                  //* ## ?????   //OLD-> #    2257: elevationsMead


                                                                                  //* ## ?????   //OLD-> #    2257: 

 //  -----------------------------							 //Old-> #    2258:  -----------------------------! -----------------------------

 //  ---------------------------------						 //Old-> #    2260:  ---------------------------------! ---------------------------------

//-----------------------------------------------------
                                                                                  public void aModifyStorage_bb(double ToMead , wsb) { //Old-> #    2261: subroutine aModifyStorage_bb(T,wsb) 
 // 										 //Old-> #    2262: !
 //  --------------------------- Types -------------------------------------------------------------- //Old-> #    2263:  --------------------------- Types --------------------------------------------------------------! --------------------------- Types --------------------------------------------------------------
                                                                                    int lvi_tract; //Old-> #    2264: integer :: lvi_tract

                                                                                    double 8); //Old-> #    2266: real(8) :: lv_State_bb,lvd_state,lv_Evap_bb
                                                                                    double fBankStorageReach; //Old-> #    2267: real :: fBankStorageReach
                                                                                    double 8); //Old-> #    2268: real(8) :: lvd_Pp,lvd_Pm
                                                                                    // Skipped //OLD-> #    2269:             real(8) :: lv_overflow_PowellToMead  ! Overflow from the original powersim flow variable
                                                                                    double 8); //Old-> #    2270: real(8) :: lv_allocation_nv,lv_allocation_ca,lv_allocation_az,lv_allocation_mx
                                                                                    double 8); //Old-> #    2271: real(8) :: vNallocation_nv,vNallocation_ca,vNallocation_az,vNallocation_mx,lv_allocation_normal

                                                                                    //* ## ?????   //OLD-> #    2272:     vSsmult_nv,vSsmult_az,vSsmult_mx


                                                                                    //* ## ?????   //OLD-> #    2272: vSsmult_az,vSsmult_mx


                                                                                    //* ## ?????   //OLD-> #    2272: vSsmult_mx


                                                                                    //* ## ?????   //OLD-> #    2272: 

                                                                                    double 8); //Old-> #    2273: real(8) :: lvd_predictedmead,lv_shortfall_b
                                                                                    double 8); //Old-> #    2274: real(8) :: lv_Mead_Add_Flow
                                                                                    double 8); //Old-> #    2275: real(8) :: lv_Sss
                                                                                    double lv_SevenStatesLCshortage; //Old-> #    2276: real :: lv_SevenStatesLCshortage
                                                                                    double 8); //Old-> #    2277: real(8) :: lvd_preCAavail,lvd_postCAavail,lvd_postMXavail
                                                                                    double 8); //Old-> #    2278: real(8) :: lv_available
                                                                                    double fEvaporation_reach; //Old-> #    2279: real :: fEvaporation_reach
                                                                                    double lvf_meadElevation, lvf_powellElevation; //Old-> #    2280: real :: lvf_meadElevation,lvf_powellElevation
                                                                                    double fEvaporation_Mead; //Old-> #    2281: real :: fEvaporation_Mead
                                                                                    double lvf_fluxMead; //Old-> #    2282: real :: lvf_fluxMead
                                                                                    double lvf_check1, lvf_check2; //Old-> #    2283: real :: lvf_check1,lvf_check2
                                                                                    double lvi_errorLevel = 0.001 ! thousandth of a percent error in allocations; //Old-> #    2284: real :: lvi_errorLevel=0.001 ! thousandth of a percent error in allocations
                                                                                    double lvf_bankStorage_maf; //Old-> #    2285: real :: lvf_bankStorage_maf
                                                                                    double lvf_fluxPreBanked, lvf_inFlowBanked_maf, lvf_diffInFlow; //Old-> #    2286: real :: lvf_fluxPreBanked,lvf_inFlowBanked_maf,lvf_diffInFlow
                                                                                    double lvf_channelEvaporation; //Old-> #    2287: real :: lvf_channelEvaporation
                                                                                    double state, lvf_flux; //Old-> #    2288: real :: state,lvf_flux
                                                                                    double lvf_temp; //Old-> #    2289: real :: lvf_temp
                                                                                    double lvf_diffStorage[]  = new double[3]  ; //Old-> #    2290: real :: lvf_diffStorage(3) ! Used for actual storage differences in bank storage estimates
 // 										 //Old-> #    2291: !

                                                                                    //* ## ?????   //OLD-> #    2292: lvf_requestCOdeltaWater_nv,lvf_requestCOdeltaWater_ca,lvf_requestCOdeltaWater_mx


                                                                                    //* ## ?????   //OLD-> #    2292: lvf_requestCOdeltaWater_ca,lvf_requestCOdeltaWater_mx


                                                                                    //* ## ?????   //OLD-> #    2292: lvf_requestCOdeltaWater_mx


                                                                                    //* ## ?????   //OLD-> #    2292: 

 //  The current estimate is: 158,088 acre-feet (195 million cubic meters) 		 //Old-> #    2293:  The current estimate is: 158,088 acre-feet (195 million cubic meters) ! The current estimate is: 158,088 acre-feet (195 million cubic meters) 
 //  Reference:  http://ibwc.state.gov/Files/Minutes/Minute_319.pdf			 //Old-> #    2294:  Reference:  http://ibwc.state.gov/Files/Minutes/Minute_319.pdf! Reference:  http://ibwc.state.gov/Files/Minutes/Minute_319.pdf
 // real,parameter:: lpf_COriverDeltaNeeds=158088					 //Old-> #    2295: real,parameter:: lpf_COriverDeltaNeeds=158088!real,parameter:: lpf_COriverDeltaNeeds=158088

                                                                                    //* ## ?????   //OLD-> #    2296: lvf_totalCOallocatedLB


                                                                                    //* ## ?????   //OLD-> #    2296: 

 // 										 //Old-> #    2297: !
                                                                                    bool lvl_meadFlag, lvl_normalShortage, lvl_abnormalDifference; //Old-> #    2298: logical :: lvl_meadFlag,lvl_normalShortage,lvl_abnormalDifference
 //  ===================================================================================================== //Old-> #    2299:  =====================================================================================================! =====================================================================================================

 //  ------------------------------ Data ------------------------------------------------------------ //Old-> #    2301:  ------------------------------ Data ------------------------------------------------------------! ------------------------------ Data ------------------------------------------------------------

                                                                                    //* ## ?????   //OLD-> #    2302: vNallocation_nv,vNallocation_ca,vNallocation_az,vNallocation_mx /0.3,4.4,2.8,1.5/   


                                                                                    //* ## ?????   //OLD-> #    2302: vNallocation_ca,vNallocation_az,vNallocation_mx /0.3,4.4,2.8,1.5/   


                                                                                    //* ## ?????   //OLD-> #    2302: vNallocation_az,vNallocation_mx /0.3,4.4,2.8,1.5/   


                                                                                    //* ## ?????   //OLD-> #    2302: vNallocation_mx /0.3,4.4,2.8,1.5/   


                                                                                    //* ## ?????   //OLD-> #    2302: /0.3,4.4,2.8,1.5/   


                                                                                    //* ## ?????   //OLD-> #    2302: 4.4,2.8,1.5/   


                                                                                    //* ## ?????   //OLD-> #    2302: 2.8,1.5/   


                                                                                    //* ## ?????   //OLD-> #    2302: 1.5/   


                                                                                    //* ## ?????   //OLD-> #    2302:   

 //  normal flow allocations/ designations						 //Old-> #    2303:  normal flow allocations/ designations! normal flow allocations/ designations
 // data vSsmult_nv,vSsmult_az,vSsmult_mx /0.0325,0.8,0.1675/  				 //Old-> #    2304: data vSsmult_nv,vSsmult_az,vSsmult_mx /0.0325,0.8,0.1675/  !data vSsmult_nv,vSsmult_az,vSsmult_mx /0.0325,0.8,0.1675/  
 // 										 //Old-> #    2305: !
 //  02.19.15 DAS									 //Old-> #    2306:  02.19.15 DAS! 02.19.15 DAS
 // data vSsmult_nv,vSsmult_az,vSsmult_mx /0.0349,0.8214,0.1437/  			 //Old-> #    2307: data vSsmult_nv,vSsmult_az,vSsmult_mx /0.0349,0.8214,0.1437/  !data vSsmult_nv,vSsmult_az,vSsmult_mx /0.0349,0.8214,0.1437/  
 //  ------------------------------------------------------------------------------------------------ //Old-> #    2308:  ------------------------------------------------------------------------------------------------! ------------------------------------------------------------------------------------------------
 //  http:/www.drought.gov/imageserver/NIDIS/workshops/copilot/Fulp_Powell_Mead_NIDIS2008-10-01.pps slide 6 //Old-> #    2309:  http:/www.drought.gov/imageserver/NIDIS/workshops/copilot/Fulp_Powell_Mead_NIDIS2008-10-01.pps slide 6! http:/www.drought.gov/imageserver/NIDIS/workshops/copilot/Fulp_Powell_Mead_NIDIS2008-10-01.pps slide 6
 //  and, RecordofDecision.pdf - December 2007, The Secretary of the Interior, Washington	 //Old-> #    2310:  and, RecordofDecision.pdf - December 2007, The Secretary of the Interior, Washington! and, RecordofDecision.pdf - December 2007, The Secretary of the Interior, Washington
 //       Robert Johnson, Commissioner, Bureau of Rec, and Dirk Kempthorne,Sec of the Dept of Interior //Old-> #    2311:       Robert Johnson, Commissioner, Bureau of Rec, and Dirk Kempthorne,Sec of the Dept of Interior!      Robert Johnson, Commissioner, Bureau of Rec, and Dirk Kempthorne,Sec of the Dept of Interior
 // 										 //Old-> #    2312: !
 //  ===================================================================================================== //Old-> #    2313:  =====================================================================================================! =====================================================================================================
 //             data vSsmult_nv,vSsmult_az /0.03903904,0.96096096/  ! Revised on 05.28.10 das using CRC of NV notes from the workshop //Old-> #    2314:             data vSsmult_nv,vSsmult_az /0.03903904,0.96096096/  ! Revised on 05.28.10 das using CRC of NV notes from the workshop!            data vSsmult_nv,vSsmult_az /0.03903904,0.96096096/  ! Revised on 05.28.10 das using CRC of NV notes from the workshop
 //  1050 to 1075 elev - shortages are 13,000 AF NV and 320,000 AF AZ			 //Old-> #    2315:  1050 to 1075 elev - shortages are 13,000 AF NV and 320,000 AF AZ! 1050 to 1075 elev - shortages are 13,000 AF NV and 320,000 AF AZ
 //  1025 to 1050 elev - shortages are 17,000 AF NV and 400,000 AF AZ			 //Old-> #    2316:  1025 to 1050 elev - shortages are 17,000 AF NV and 400,000 AF AZ! 1025 to 1050 elev - shortages are 17,000 AF NV and 400,000 AF AZ
 //  below 1025   elev - shortages are 20,000 AF NV and 480,000 AF for AZ         		 //Old-> #    2317:  below 1025   elev - shortages are 20,000 AF NV and 480,000 AF for AZ         ! below 1025   elev - shortages are 20,000 AF NV and 480,000 AF for AZ         
 // 										 //Old-> #    2318: !
 //  ---- Type Constructs ---							 //Old-> #    2319:  ---- Type Constructs ---! ---- Type Constructs ---

                                                                                    //* ## ?????   //OLD-> #    2320: watershed_B)::wsb


                                                                                    //* ## ?????   //OLD-> #    2320: 


                                                                                    //* ## ?????   //OLD-> #    2321: runTime)T


                                                                                    //* ## ?????   //OLD-> #    2321: 

 //  ========================							 //Old-> #    2322:  ========================! ========================
 // 										 //Old-> #    2323: !
 //  01.20.15 DAS									 //Old-> #    2324:  01.20.15 DAS! 01.20.15 DAS
                                                                                    lvf_totalCOallocatedLB = vNallocation_nv+vNallocation_ca+vNallocation_az+vNallocation_mx  ; //Old-> #    2325: lvf_totalCOallocatedLB=vNallocation_nv+vNallocation_ca+vNallocation_az+vNallocation_mx 
                                                                                    if ((gvl_AZdeltaBurden) ) { //Old-> #    2326: if(gvl_AZdeltaBurden)then
                                                                                      lvf_requestCOdeltaWater_nv = 0 ; //Old-> #    2327: lvf_requestCOdeltaWater_nv=0
                                                                                      lvf_requestCOdeltaWater_ca = 0 ; //Old-> #    2328: lvf_requestCOdeltaWater_ca=0
                                                                                      lvf_requestCOdeltaWater_mx = 0 ; //Old-> #    2329: lvf_requestCOdeltaWater_mx=0

                                                                                      //* ## ?????   //OLD-> #    2330: 

                                                                                      lvf_requestCOdeltaWater_nv = gvi_WaterToCOdelta_acft_a* & ; //Old-> #    2331: lvf_requestCOdeltaWater_nv=gvi_WaterToCOdelta_acft_a* &

                                                                                      //* ## ?????   //OLD-> #    2332: lvf_totalCOallocatedLB+(mvf_totalCOallocatedUB*gpd_acftTomaf)))


                                                                                      //* ## ?????   //OLD-> #    2332: mvf_totalCOallocatedUB*gpd_acftTomaf)))


                                                                                      //* ## ?????   //OLD-> #    2332: 

                                                                                      lvf_requestCOdeltaWater_ca = gvi_WaterToCOdelta_acft_a* & ; //Old-> #    2333: lvf_requestCOdeltaWater_ca=gvi_WaterToCOdelta_acft_a* &

                                                                                      //* ## ?????   //OLD-> #    2334: lvf_totalCOallocatedLB+(mvf_totalCOallocatedUB*gpd_acftTomaf)))


                                                                                      //* ## ?????   //OLD-> #    2334: mvf_totalCOallocatedUB*gpd_acftTomaf)))


                                                                                      //* ## ?????   //OLD-> #    2334: 

                                                                                      lvf_requestCOdeltaWater_mx = gvi_WaterToCOdelta_acft_a* & ; //Old-> #    2335: lvf_requestCOdeltaWater_mx=gvi_WaterToCOdelta_acft_a* &

                                                                                      //* ## ?????   //OLD-> #    2336: lvf_totalCOallocatedLB+(mvf_totalCOallocatedUB*gpd_acftTomaf)))


                                                                                      //* ## ?????   //OLD-> #    2336: mvf_totalCOallocatedUB*gpd_acftTomaf)))


                                                                                      //* ## ?????   //OLD-> #    2336: 

                                                                                      } // if (gvl_AZdeltaBurden) //Old-> #    2337: endif

 // 										 //Old-> #    2338: !
                                                                                    lvf_temp = 0 ; //Old-> #    2339: lvf_temp=0
                                                                                    if ((T%year < 2003) ) { //Old-> #    2340: if(T%year < 2003)then
                                                                                      lvf_temp = 1.4 ; //Old-> #    2341: lvf_temp=1.4
                                                                                      } // if (T%year < 2003) //Old-> #    2342: endif

 // 										 //Old-> #    2343: !
                                                                                    lvl_normalShortage = .false. ; //Old-> #    2344: lvl_normalShortage=.false.
                                                                                    lvl_abnormalDifference = .false. ; //Old-> #    2345: lvl_abnormalDifference=.false.
 // 										 //Old-> #    2346: !
                                                                                    wsb%lv_AZshareCO = 0. ; //Old-> #    2347: wsb%lv_AZshareCO=0.
 // 										 //Old-> #    2348: !
                                                                                    lv_allocation_normal = 0 ; //Old-> #    2349: lv_allocation_normal=0
                                                                                    lv_allocation_normal = vNallocation_nv+vNallocation_ca+vNallocation_az+vNallocation_mx ; //Old-> #    2350: lv_allocation_normal=vNallocation_nv+vNallocation_ca+vNallocation_az+vNallocation_mx
 // 										 //Old-> #    2351: !
                                                                                    lv_Evap_bb = 0 ; //Old-> #    2352: lv_Evap_bb=0
                                                                                    lv_Evap_bb = fEvaporation_Mead(vState_Bb_maf(T%year),gpf_panMead) ; //Old-> #    2353: lv_Evap_bb=fEvaporation_Mead(vState_Bb_maf(T%year),gpf_panMead)
 // 										 //Old-> #    2354: !
                                                                                    lvd_Pm = 0 ; //Old-> #    2355: lvd_Pm=0
                                                                                    lvd_Pm = wsb%vState_Bb_pred_maf(T%year)  ; //Old-> #    2356: lvd_Pm=wsb%vState_Bb_pred_maf(T%year) 
 // 										 //Old-> #    2357: !
                                                                                    state = 0 ; //Old-> #    2358: state=0
                                                                                    state = vState_Bb_maf(T%year) ; //Old-> #    2359: state=vState_Bb_maf(T%year)
 // 										 //Old-> #    2360: !
                                                                                    lvd_state = 0 ; //Old-> #    2361: lvd_state=0
                                                                                    lvd_state = vState_Bb_maf(T%year) ; //Old-> #    2362: lvd_state=vState_Bb_maf(T%year)
                                                                                    lvd_state = vState_Bb_maf(T%year)-lv_Evap_bb ; //Old-> #    2363: lvd_state=vState_Bb_maf(T%year)-lv_Evap_bb

 // 										 //Old-> #    2365: !
                                                                                    lvf_diffStorage(2) = 0 ; //Old-> #    2366: lvf_diffStorage(2)=0
                                                                                    lvf_diffStorage(2) = lvd_state-lvd_Pm ; //Old-> #    2367: lvf_diffStorage(2)=lvd_state-lvd_Pm

 //  =========================							 //Old-> #    2369:  =========================! =========================
                                                                                    if ((gpl_verify) ) { //Old-> #    2370: if(gpl_verify)then
                                                                                      actualStorage(T,lvd_Pp,lvd_Pm,lvf_diffStorage) ; //Old-> #    2371: call actualStorage(T,lvd_Pp,lvd_Pm,lvf_diffStorage)
                                                                                      } // if (gpl_verify) //Old-> #    2372: endif

 // 										 //Old-> #    2373: !
                                                                                    lvf_diffStorage(3) = lvf_diffStorage(2) * mpf_mod_BankStorage  ; //Old-> #    2374: lvf_diffStorage(3)=lvf_diffStorage(2) * mpf_mod_BankStorage 
 // 										 //Old-> #    2375: !
 //  =========================							 //Old-> #    2376:  =========================! =========================
 // 										 //Old-> #    2377: !
                                                                                    mvf_meadEvaporation_acft = 0 ; //Old-> #    2378: mvf_meadEvaporation_acft=0
                                                                                    mvf_meadEvaporation_acft = lv_Evap_bb*(1/gpd_acftTomaf) ; //Old-> #    2379: mvf_meadEvaporation_acft=lv_Evap_bb*(1/gpd_acftTomaf)
 // 										 //Old-> #    2380: !
 //  Overflow from Powell								 //Old-> #    2381:  Overflow from Powell! Overflow from Powell
                                                                                    lv_overflow_PowellToMead = 0. ; //Old-> #    2382: lv_overflow_PowellToMead=0.
                                                                                    lv_overflow_PowellToMead = wsb%lv_OverFlow_ba(T%year) ; //Old-> #    2383: lv_overflow_PowellToMead=wsb%lv_OverFlow_ba(T%year)
 // 										 //Old-> #    2384: !
 //  Inflows for the Reach Powell to Mead						 //Old-> #    2385:  Inflows for the Reach Powell to Mead! Inflows for the Reach Powell to Mead
                                                                                    lv_Mead_Add_Flow = 0. ; //Old-> #    2386: lv_Mead_Add_Flow=0.
                                                                                    lv_Mead_Add_Flow = lv_overflow_PowellToMead + mvf_powellToMeadInflows_maf  ; //Old-> #    2387: lv_Mead_Add_Flow=lv_overflow_PowellToMead + mvf_powellToMeadInflows_maf 
 // 										 //Old-> #    2388: !
 //  Flux pre-banked storage (release from powell plus added flows minus evap)		 //Old-> #    2389:  Flux pre-banked storage (release from powell plus added flows minus evap)! Flux pre-banked storage (release from powell plus added flows minus evap)
                                                                                    lvf_fluxPreBanked = 0 ; //Old-> #    2390: lvf_fluxPreBanked=0
                                                                                    lvf_fluxPreBanked = wsb%lv_BaToBb(T%year) + lv_Mead_Add_Flow - lv_Evap_bb - lvf_temp ; //Old-> #    2391: lvf_fluxPreBanked=wsb%lv_BaToBb(T%year) + lv_Mead_Add_Flow - lv_Evap_bb - lvf_temp
 // 										 //Old-> #    2392: !
 //  Flux from banked storage water in the reservoir (Mead)				 //Old-> #    2393:  Flux from banked storage water in the reservoir (Mead)! Flux from banked storage water in the reservoir (Mead)
                                                                                    lvf_bankStorage_maf = 0 ; //Old-> #    2394: lvf_bankStorage_maf=0
                                                                                    lvf_bankStorage_maf = fBankStorageMead(lvf_diffStorage(3)) ; //Old-> #    2395: lvf_bankStorage_maf=fBankStorageMead(lvf_diffStorage(3))
 // 										 //Old-> #    2396: !
 //  Flux from bank storage along the reach from Powell to Mead				 //Old-> #    2397:  Flux from bank storage along the reach from Powell to Mead! Flux from bank storage along the reach from Powell to Mead
                                                                                    lvf_diffInFlow = 0 ; //Old-> #    2398: lvf_diffInFlow=0
                                                                                    if ((T%startyear < T%year) ) { //Old-> #    2399: if(T%startyear < T%year)then
                                                                                      lvf_diffInFlow = mvf_powellToMeadInflows_maf- lvf_powToMeadInFlowsYearMinus1(T%simyear) ; //Old-> #    2400: lvf_diffInFlow=mvf_powellToMeadInflows_maf- lvf_powToMeadInFlowsYearMinus1(T%simyear)
                                                                                      } // if (T%startyear < T%year) //Old-> #    2401: endif

 // 										 //Old-> #    2402: !
                                                                                    lvf_inFlowBanked_maf = 0 ; //Old-> #    2403: lvf_inFlowBanked_maf=0
                                                                                    lvf_inFlowBanked_maf = fBankStorageReach(-lvf_diffInFlow) ; //Old-> #    2404: lvf_inFlowBanked_maf=fBankStorageReach(-lvf_diffInFlow)
 //          									 //Old-> #    2405:          !         
 //  433 km long x 90 m wide = 38,970,000 m2 						 //Old-> #    2406:  433 km long x 90 m wide = 38,970,000 m2 ! 433 km long x 90 m wide = 38,970,000 m2 
                                                                                    lvf_channelEvaporation = 0 ; //Old-> #    2407: lvf_channelEvaporation=0
                                                                                    lvf_channelEvaporation = fEvaporation_reach(mpf_pan_reach) ; //Old-> #    2408: lvf_channelEvaporation=fEvaporation_reach(mpf_pan_reach)
 //  =================================================================			 //Old-> #    2409:  =================================================================! =================================================================
 // 										 //Old-> #    2410: !
                                                                                    lvf_flux = 0 ; //Old-> #    2411: lvf_flux=0
                                                                                    lvf_flux = lvf_fluxPreBanked + lvf_bankStorage_maf + lvf_inFlowBanked_maf - lvf_channelEvaporation ; //Old-> #    2412: lvf_flux=lvf_fluxPreBanked + lvf_bankStorage_maf + lvf_inFlowBanked_maf - lvf_channelEvaporation
                                                                                    lvf_flux = lvf_fluxPreBanked + lvf_bankStorage_maf - lvf_channelEvaporation + lvf_inFlowBanked_maf ; //Old-> #    2413: lvf_flux=lvf_fluxPreBanked + lvf_bankStorage_maf - lvf_channelEvaporation + lvf_inFlowBanked_maf

 //  delta state									 //Old-> #    2415:  delta state! delta state
                                                                                    lv_State_bb = 0. ; //Old-> #    2416: lv_State_bb=0.
                                                                                    lv_State_bb = state + lvf_flux ; //Old-> #    2417: lv_State_bb=state + lvf_flux
 // 										 //Old-> #    2418: !
                                                                                    lvf_fluxMead = 0 ; //Old-> #    2419: lvf_fluxMead=0
                                                                                    lvf_fluxMead =  lvf_flux  ; //Old-> #    2420: lvf_fluxMead= lvf_flux 
 // 										 //Old-> #    2421: !
 //  02.28.13 changed again (total volume)						 //Old-> #    2422:  02.28.13 changed again (total volume)! 02.28.13 changed again (total volume)
                                                                                    lvd_predictedmead = 0 ; //Old-> #    2423: lvd_predictedmead=0
                                                                                    lvd_predictedmead = max(0,state+lvf_fluxMead) ; //Old-> #    2424: lvd_predictedmead=max(0,state+lvf_fluxMead)
 // 										 //Old-> #    2425: !
                                                                                    lvd_predictedmead = lvd_Pm ; //Old-> #    2426: lvd_predictedmead=lvd_Pm
 // 										 //Old-> #    2427: !


                                                                                    //* ## ?????   //OLD-> #    2429:               format(I4,1x,4(f10.6))


                                                                                    //* ## ?????   //OLD-> #    2429: I4,1x,4(f10.6))


                                                                                    //* ## ?????   //OLD-> #    2429: 1x,4(f10.6))


                                                                                    //* ## ?????   //OLD-> #    2429: 4(f10.6))


                                                                                    //* ## ?????   //OLD-> #    2429: f10.6))


                                                                                    //* ## ?????   //OLD-> #    2429: 


                                                                                    //* ## ?????   //OLD-> #    2430:               format(I4,1x,7(f10.6))


                                                                                    //* ## ?????   //OLD-> #    2430: I4,1x,7(f10.6))


                                                                                    //* ## ?????   //OLD-> #    2430: 1x,7(f10.6))


                                                                                    //* ## ?????   //OLD-> #    2430: 7(f10.6))


                                                                                    //* ## ?????   //OLD-> #    2430: f10.6))


                                                                                    //* ## ?????   //OLD-> #    2430: 

 //  To check for mass balance							 //Old-> #    2431:  To check for mass balance! To check for mass balance
                                                                                    lv_available = 0. ; //Old-> #    2432: lv_available=0.
                                                                                    lvd_preCAavail = 0. ; //Old-> #    2433: lvd_preCAavail=0.
                                                                                    lv_available = vState_Bb_maf(T%year)-li_meaddeadpool+lvf_fluxMead ; //Old-> #    2434: lv_available=vState_Bb_maf(T%year)-li_meaddeadpool+lvf_fluxMead
                                                                                    lvd_preCAavail = lv_available ; //Old-> #    2435: lvd_preCAavail=lv_available
 // 										 //Old-> #    2436: !
                                                                                    lvf_meadElevation = 0. ; //Old-> #    2437: lvf_meadElevation=0.
                                                                                     elevationsMead(lvd_predictedmead,lvf_meadElevation) ; //Old-> #    2438: call  elevationsMead(lvd_predictedmead,lvf_meadElevation)
                                                                                     elevationsMead(lvd_state,lvf_meadElevation) ; //Old-> #    2439: call  elevationsMead(lvd_state,lvf_meadElevation)

                                                                                     sevenstates(T,lvf_meadElevation,lvd_predictedmead,lv_SevenStatesLCshortage) ; //Old-> #    2441: call  sevenstates(T,lvf_meadElevation,lvd_predictedmead,lv_SevenStatesLCshortage)
                                                                                    lv_Sss = lv_SevenStatesLCshortage ; //Old-> #    2442: lv_Sss=lv_SevenStatesLCshortage
 // 										 //Old-> #    2443: !
                                                                                    statesShortageRatios(lv_SevenStatesLCshortage,vSsmult_az,vSsmult_nv,vSsmult_mx) ; //Old-> #    2444: call statesShortageRatios(lv_SevenStatesLCshortage,vSsmult_az,vSsmult_nv,vSsmult_mx)
 // 										 //Old-> #    2445: !
 //  New analysis of the shortfall							 //Old-> #    2446:  New analysis of the shortfall! New analysis of the shortfall
                                                                                    lv_shortfall_b = 0. ; //Old-> #    2447: lv_shortfall_b=0.
                                                                                    lv_shortfall_b = max(0.,-lv_available+lv_allocation_normal-lv_Sss) ; //Old-> #    2448: lv_shortfall_b=max(0.,-lv_available+lv_allocation_normal-lv_Sss)

 //  12.02.10 das new code								 //Old-> #    2450:  12.02.10 das new code! 12.02.10 das new code
                                                                                    lv_Sss = lv_SevenStatesLCshortage ; //Old-> #    2451: lv_Sss=lv_SevenStatesLCshortage
 // 										 //Old-> #    2452: !
                                                                                    wsb%lv_AZshortageCO = lv_SevenStatesLCshortage*vSsmult_az ; //Old-> #    2453: wsb%lv_AZshortageCO=lv_SevenStatesLCshortage*vSsmult_az
 // 										 //Old-> #    2454: !

                                                                                    lv_allocation_ca = vNallocation_ca ; //Old-> #    2456: lv_allocation_ca=vNallocation_ca
                                                                                    lv_allocation_ca = 0 ; //Old-> #    2457: lv_allocation_ca=0
 //  First Level allocations - satisfy California first					 //Old-> #    2458:  First Level allocations - satisfy California first! First Level allocations - satisfy California first
 //  ---------------------------------------------------------				 //Old-> #    2459:  ---------------------------------------------------------! ---------------------------------------------------------
                                                                                    if ((li_meaddeadpool < lv_State_bb) ) { //Old-> #    2460: if(li_meaddeadpool < lv_State_bb)then
                                                                                      if ((li_meaddeadpool < lv_State_bb-lv_allocation_ca) ) { //Old-> #    2461: if(li_meaddeadpool < lv_State_bb-lv_allocation_ca)then
 //  Deliver to CA first								 //Old-> #    2462:  Deliver to CA first! Deliver to CA first
                                                                                        vState_Bb_maf(T%year) = lv_State_bb-vNallocation_ca ; //Old-> #    2463: vState_Bb_maf(T%year)=lv_State_bb-vNallocation_ca
 // 										 //Old-> #    2464: !
                                                                                        if ((vNallocation_ca < lvf_fluxMead) ) { //Old-> #    2465: if(vNallocation_ca < lvf_fluxMead)then
                                                                                          lv_allocation_ca = vNallocation_ca ; //Old-> #    2466: lv_allocation_ca=vNallocation_ca

                                                                                          //* ## ?????   //OLD-> #    2467: 

                                                                                          lv_allocation_ca = max(0,lvf_fluxMead) ; //Old-> #    2468: lv_allocation_ca=max(0,lvf_fluxMead)
                                                                                          } // if (vNallocation_ca < lvf_fluxMead) //Old-> #    2469: endif


                                                                                        //* ## ?????   //OLD-> #    2470: 

                                                                                        vState_Bb_maf(T%year) = li_meaddeadpool ; //Old-> #    2471: vState_Bb_maf(T%year)=li_meaddeadpool
                                                                                        lv_allocation_ca = lvf_fluxMead ; //Old-> #    2472: lv_allocation_ca=lvf_fluxMead
                                                                                        } // if (li_meaddeadpool < lv_State_bb-lv_allocation_ca) //Old-> #    2473: endif


                                                                                      //* ## ?????   //OLD-> #    2474: 

                                                                                      vState_Bb_maf(T%year) = li_meaddeadpool ; //Old-> #    2475: vState_Bb_maf(T%year)=li_meaddeadpool
                                                                                      lv_allocation_ca = 0. ; //Old-> #    2476: lv_allocation_ca=0.
                                                                                      } // if (li_meaddeadpool < lv_State_bb) //Old-> #    2477: endif

 // 										 //Old-> #    2478: !
                                                                                    lv_allocation_nv = 0. ; //Old-> #    2479: lv_allocation_nv=0.
                                                                                    lv_allocation_az = 0. ; //Old-> #    2480: lv_allocation_az=0.
                                                                                    lv_allocation_mx = 0. ; //Old-> #    2481: lv_allocation_mx=0.
 // 										 //Old-> #    2482: !
 //  lvf_fluxMead									 //Old-> #    2483:  lvf_fluxMead! lvf_fluxMead
                                                                                    lvd_postCAavail = max(0., vState_Bb_maf(T%year)-li_meaddeadpool) ; //Old-> #    2484: lvd_postCAavail=max(0., vState_Bb_maf(T%year)-li_meaddeadpool)
 //  New on 03.28.12								 //Old-> #    2485:  New on 03.28.12! New on 03.28.12
                                                                                    if ((lv_allocation_ca < lvd_preCAavail) ) { //Old-> #    2486: if(lv_allocation_ca < lvd_preCAavail)then

                                                                                      //* ## ?????   //OLD-> #    2487: 

                                                                                      lv_allocation_ca = lvd_preCAavail ; //Old-> #    2488: lv_allocation_ca=lvd_preCAavail
                                                                                      lvd_postCAavail = 0 ; //Old-> #    2489: lvd_postCAavail=0
                                                                                      } // if (lv_allocation_ca < lvd_preCAavail) //Old-> #    2490: endif


                                                                                    if ((0 < lv_Sss) ) { //Old-> #    2492: if(0 < lv_Sss)then
                                                                                      if ((li_meaddeadpool < vState_Bb_maf(T%year)) ) { //Old-> #    2493: if(li_meaddeadpool < vState_Bb_maf(T%year))then
 // 										 //Old-> #    2494: !
                                                                                        lvd_postMXavail = 0. ; //Old-> #    2495: lvd_postMXavail=0.
                                                                                        if ((0 < lv_shortfall_b) ) { //Old-> #    2496: if(0 < lv_shortfall_b)then
 // 										 //Old-> #    2497: !
                                                                                          lvi_tract = 2 ; //Old-> #    2498: lvi_tract=2
 //  Abnormal operations of a shortage- i.e. not enough water to meet shortage allocations	 //Old-> #    2499:  Abnormal operations of a shortage- i.e. not enough water to meet shortage allocations! Abnormal operations of a shortage- i.e. not enough water to meet shortage allocations
                                                                                          if ((0 < lvd_postCAavail) ) { //Old-> #    2500: if(0 < lvd_postCAavail)then
                                                                                            lvd_postMXavail = lvd_postCAavail ; //Old-> #    2501: lvd_postMXavail=lvd_postCAavail
 //  03.24.12									 //Old-> #    2502:  03.24.12! 03.24.12
                                                                                            lv_allocation_nv = max(0.,(lvd_postMXavail*vSsmult_nv)) ; //Old-> #    2503: lv_allocation_nv=max(0.,(lvd_postMXavail*vSsmult_nv))
                                                                                            lv_allocation_az = max(0.,lvd_postMXavail*vSsmult_az) ; //Old-> #    2504: lv_allocation_az=max(0.,lvd_postMXavail*vSsmult_az)
 //  04.04.12 added mexico back in							 //Old-> #    2505:  04.04.12 added mexico back in! 04.04.12 added mexico back in
                                                                                            lv_allocation_mx = max(0.,(lvd_postMXavail-(lv_allocation_nv+lv_allocation_az))) ; //Old-> #    2506: lv_allocation_mx=max(0.,(lvd_postMXavail-(lv_allocation_nv+lv_allocation_az)))
                                                                                            } // if (0 < lvd_postCAavail) //Old-> #    2507: endif


                                                                                          //* ## ?????   //OLD-> #    2508: 

                                                                                          lvi_tract = 3 ; //Old-> #    2509: lvi_tract=3
 // 										 //Old-> #    2510: !
                                                                                          lvl_normalShortage = .true. ; //Old-> #    2511: lvl_normalShortage=.true.
 // 										 //Old-> #    2512: !
 //  "Normal" operations of a shortage						 //Old-> #    2513:  "Normal" operations of a shortage! "Normal" operations of a shortage
 //  -----------------------------------------------------------------			 //Old-> #    2514:  -----------------------------------------------------------------! -----------------------------------------------------------------
 //                      lv_allocation_mx=vNallocation_mx 				 //Old-> #    2515:                      lv_allocation_mx=vNallocation_mx !                     lv_allocation_mx=vNallocation_mx 
 //  04.04.12 added mexico back in							 //Old-> #    2516:  04.04.12 added mexico back in! 04.04.12 added mexico back in
                                                                                          lv_allocation_mx = max(vNallocation_mx-vSsmult_mx*lv_Sss,0.) ; //Old-> #    2517: lv_allocation_mx=max(vNallocation_mx-vSsmult_mx*lv_Sss,0.)
                                                                                          lv_allocation_nv = max(vNallocation_nv-vSsmult_nv*lv_Sss,0.) ; //Old-> #    2518: lv_allocation_nv=max(vNallocation_nv-vSsmult_nv*lv_Sss,0.)
                                                                                          lv_allocation_az = min(2.8,max(vNallocation_az-vSsmult_az*lv_Sss,0.)) ; //Old-> #    2519: lv_allocation_az=min(2.8,max(vNallocation_az-vSsmult_az*lv_Sss,0.))
 // 										 //Old-> #    2520: !
                                                                                          } // if (0 < lv_shortfall_b) //Old-> #    2521: endif

 // 										 //Old-> #    2522: !

                                                                                        //* ## ?????   //OLD-> #    2523: 

                                                                                        lvi_tract = 4 ; //Old-> #    2524: lvi_tract=4

 // 										 //Old-> #    2526: !
 //  Mead At dead pool								 //Old-> #    2527:  Mead At dead pool! Mead At dead pool
 //  -----------------------------------------------					 //Old-> #    2528:  -----------------------------------------------! -----------------------------------------------
                                                                                        vState_Bb_maf(T%year) =  li_meaddeadpool ; //Old-> #    2529: vState_Bb_maf(T%year)= li_meaddeadpool
 // 										 //Old-> #    2530: !
                                                                                        lvl_abnormalDifference = .true. ; //Old-> #    2531: lvl_abnormalDifference=.true.
 // 										 //Old-> #    2532: !
 //                    if(gvl_writeLog)&						 //Old-> #    2533:                    if(gvl_writeLog)&!                   if(gvl_writeLog)&
 //                     write(7,*)"Mead Dead Pool- line 2477 in WaterShed_CO.f90--> Tract = ", lvi_tract //Old-> #    2534:                     write(7,*)"Mead Dead Pool- line 2477 in WaterShed_CO.f90--> Tract = ", lvi_tract!                    write(7,*)"Mead Dead Pool- line 2477 in WaterShed_CO.f90--> Tract = ", lvi_tract
                                                                                        } // if (li_meaddeadpool < vState_Bb_maf(T%year)) //Old-> #    2535: endif

 // 										 //Old-> #    2536: !

                                                                                      //* ## ?????   //OLD-> #    2537: 

 // 										 //Old-> #    2538: !
                                                                                      if ((lvd_postCAavail >= vNallocation_nv+vNallocation_az+vNallocation_mx) ) { //Old-> #    2539: if(lvd_postCAavail >= vNallocation_nv+vNallocation_az+vNallocation_mx)then
                                                                                        lv_allocation_nv = vNallocation_nv ; //Old-> #    2540: lv_allocation_nv=vNallocation_nv
                                                                                        lv_allocation_az = vNallocation_az ; //Old-> #    2541: lv_allocation_az=vNallocation_az
                                                                                        lv_allocation_mx = vNallocation_mx ; //Old-> #    2542: lv_allocation_mx=vNallocation_mx
                                                                                        lvi_tract = 5 ; //Old-> #    2543: lvi_tract=5

                                                                                        //* ## ?????   //OLD-> #    2544: 

                                                                                        lvi_tract = 6 ; //Old-> #    2545: lvi_tract=6
 //                      if(gvl_writeLog)&						 //Old-> #    2546:                      if(gvl_writeLog)&!                     if(gvl_writeLog)&
 //                       write(7,*)"Mead Error- line is 2490 in WaterShed_CO.f90--> Tract= ",lvi_tract //Old-> #    2547:                       write(7,*)"Mead Error- line is 2490 in WaterShed_CO.f90--> Tract= ",lvi_tract!                      write(7,*)"Mead Error- line is 2490 in WaterShed_CO.f90--> Tract= ",lvi_tract
                                                                                        } // if (lvd_postCAavail >= vNallocation_nv+vNallocation_az+vNallocation_mx) //Old-> #    2548: endif

                                                                                      } // if (0 < lv_Sss) //Old-> #    2549: endif

 //  --------------------------------------------------------------------------------------------------- //Old-> #    2550:  ---------------------------------------------------------------------------------------------------! ---------------------------------------------------------------------------------------------------
 // 										 //Old-> #    2551: !
                                                                                    if ((lvl_abnormalDifference) ) { //Old-> #    2552: if(lvl_abnormalDifference)then
 //  Mead at Dead Pool								 //Old-> #    2553:  Mead at Dead Pool! Mead at Dead Pool

                                                                                      //* ## ?????   //OLD-> #    2554: 

                                                                                      vState_Bb_maf(T%year) =  vState_Bb_maf(T%year) - (lv_allocation_nv+lv_allocation_az+lv_allocation_mx) ; //Old-> #    2555: vState_Bb_maf(T%year)= vState_Bb_maf(T%year) - (lv_allocation_nv+lv_allocation_az+lv_allocation_mx)
                                                                                      } // if (lvl_abnormalDifference) //Old-> #    2556: endif

 // 										 //Old-> #    2557: !
                                                                                    if ((0 < lv_Sss) ) { //Old-> #    2558: if(0 < lv_Sss)then
 // 										 //Old-> #    2559: !
                                                                                      lvf_check1 = lv_allocation_nv+lv_allocation_az+lv_allocation_mx ; //Old-> #    2560: lvf_check1=lv_allocation_nv+lv_allocation_az+lv_allocation_mx
                                                                                      lvf_check2 = lvd_postCAavail ; //Old-> #    2561: lvf_check2=lvd_postCAavail
                                                                                      sCompareControl(lvf_check1,lvf_check2,lvi_errorLevel,lvl_meadFlag) ; //Old-> #    2562: call sCompareControl(lvf_check1,lvf_check2,lvi_errorLevel,lvl_meadFlag)
                                                                                      if ((lvl_normalShortage) ) { //Old-> #    2563: if(lvl_normalShortage)then


                                                                                        //* ## ?????   //OLD-> #    2565: 

                                                                                        if ((lvl_meadFlag) ) { //Old-> #    2566: if(lvl_meadFlag)then
                                                                                          if ((gvl_writeLog) ) { //Old-> #    2567: if(gvl_writeLog)then

                                                                                            //* ## ?????   //OLD-> #    2568: 7,*)T%year,"Mead Error in allocations- line 1473 in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: *)T%year,"Mead Error in allocations- line 1473 in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: "Mead Error in allocations- line 1473 in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: Error in allocations- line 1473 in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: in allocations- line 1473 in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: allocations- line 1473 in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: line 1473 in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: 1473 in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: in WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: WaterShed_CO.f90"


                                                                                            //* ## ?????   //OLD-> #    2568: 


                                                                                            //* ## ?????   //OLD-> #    2569: 7,*)lv_allocation_nv,lv_allocation_az,lv_allocation_mx,lvd_postCAavail,lvi_tract


                                                                                            //* ## ?????   //OLD-> #    2569: *)lv_allocation_nv,lv_allocation_az,lv_allocation_mx,lvd_postCAavail,lvi_tract


                                                                                            //* ## ?????   //OLD-> #    2569: lv_allocation_az,lv_allocation_mx,lvd_postCAavail,lvi_tract


                                                                                            //* ## ?????   //OLD-> #    2569: lv_allocation_mx,lvd_postCAavail,lvi_tract


                                                                                            //* ## ?????   //OLD-> #    2569: lvd_postCAavail,lvi_tract


                                                                                            //* ## ?????   //OLD-> #    2569: lvi_tract


                                                                                            //* ## ?????   //OLD-> #    2569: 

                                                                                            } // if (gvl_writeLog) //Old-> #    2570: endif

                                                                                          } // if (lvl_meadFlag) //Old-> #    2571: endif

                                                                                        } // if (lvl_normalShortage) //Old-> #    2572: endif


                                                                                      //* ## ?????   //OLD-> #    2573: 

 // 										 //Old-> #    2574: !
                                                                                      if ((lvp_meadMax < vState_Bb_maf(T%year)) ) { //Old-> #    2575: if(lvp_meadMax < vState_Bb_maf(T%year))then
                                                                                        vState_Bb_maf(T%year) =  lvp_meadMax !li_meadmax ; //Old-> #    2576: vState_Bb_maf(T%year)= lvp_meadMax !li_meadmax
                                                                                        } // if (lvp_meadMax < vState_Bb_maf(T%year)) //Old-> #    2577: endif

 // 										 //Old-> #    2578: !
                                                                                      } // if (0 < lv_Sss) //Old-> #    2579: endif

 //  ======================================================================================================== //Old-> #    2580:  ========================================================================================================! ========================================================================================================
 // 										 //Old-> #    2581: !
 //  01.20.15 DAS Colorado River delta water allocation of 158,088.00 from		 //Old-> #    2582:  01.20.15 DAS Colorado River delta water allocation of 158,088.00 from! 01.20.15 DAS Colorado River delta water allocation of 158,088.00 from
 //  CAP MandI if available when true, otherwise, share proportionally with 		 //Old-> #    2583:  CAP MandI if available when true, otherwise, share proportionally with ! CAP MandI if available when true, otherwise, share proportionally with 
 //  the other states (plus Mexico)							 //Old-> #    2584:  the other states (plus Mexico)! the other states (plus Mexico)
                                                                                    if ((gvl_AZdeltaBurden) ) { //Old-> #    2585: if(gvl_AZdeltaBurden)then


                                                                                      //* ## ?????   //OLD-> #    2587: 

                                                                                      lv_allocation_nv = max(0,lv_allocation_nv-(lvf_requestCOdeltaWater_nv*gpd_acftTomaf)) ; //Old-> #    2588: lv_allocation_nv=max(0,lv_allocation_nv-(lvf_requestCOdeltaWater_nv*gpd_acftTomaf))
                                                                                      lv_allocation_mx = max(0,lv_allocation_mx-(lvf_requestCOdeltaWater_mx*gpd_acftTomaf)) ; //Old-> #    2589: lv_allocation_mx=max(0,lv_allocation_mx-(lvf_requestCOdeltaWater_mx*gpd_acftTomaf))
                                                                                      lv_allocation_ca = max(0,lv_allocation_ca-(lvf_requestCOdeltaWater_ca*gpd_acftTomaf)) ; //Old-> #    2590: lv_allocation_ca=max(0,lv_allocation_ca-(lvf_requestCOdeltaWater_ca*gpd_acftTomaf))
 // 										 //Old-> #    2591: !
                                                                                      go_COdeltaWater_nv = nint(lvf_requestCOdeltaWater_nv*(lv_allocation_nv/vNallocation_nv)) ; //Old-> #    2592: go_COdeltaWater_nv=nint(lvf_requestCOdeltaWater_nv*(lv_allocation_nv/vNallocation_nv))
                                                                                      go_COdeltaWater_ca = nint(lvf_requestCOdeltaWater_ca*(lv_allocation_ca/vNallocation_ca)) ; //Old-> #    2593: go_COdeltaWater_ca=nint(lvf_requestCOdeltaWater_ca*(lv_allocation_ca/vNallocation_ca))
                                                                                      go_COdeltaWater_mx = nint(lvf_requestCOdeltaWater_mx*(lv_allocation_mx/vNallocation_mx)) ; //Old-> #    2594: go_COdeltaWater_mx=nint(lvf_requestCOdeltaWater_mx*(lv_allocation_mx/vNallocation_mx))
 // 										 //Old-> #    2595: !
                                                                                      } // if (gvl_AZdeltaBurden) //Old-> #    2596: endif

 // 										 //Old-> #    2597: !
                                                                                    lvf_powellElevation = 0. ; //Old-> #    2598: lvf_powellElevation=0.
                                                                                    go_powellElevation = 0 ; //Old-> #    2599: go_powellElevation=0
                                                                                     elevationsPowell(vState_Ba_maf(T%year),lvf_powellElevation) ; //Old-> #    2600: call  elevationsPowell(vState_Ba_maf(T%year),lvf_powellElevation)
                                                                                    go_powellElevation = nint(lvf_powellElevation) ; //Old-> #    2601: go_powellElevation=nint(lvf_powellElevation)

                                                                                    lvf_meadElevation = 0. ; //Old-> #    2603: lvf_meadElevation=0.
                                                                                    go_meadElevation = 0 ; //Old-> #    2604: go_meadElevation=0
                                                                                     elevationsMead(vState_Bb_maf(T%year),lvf_meadElevation) ; //Old-> #    2605: call  elevationsMead(vState_Bb_maf(T%year),lvf_meadElevation)
                                                                                    go_meadElevation = nint(lvf_meadElevation) ; //Old-> #    2606: go_meadElevation=nint(lvf_meadElevation)
 // 										 //Old-> #    2607: !
                                                                                    if ((gpl_validate) ) { //Old-> #    2608: if(gpl_validate)then
                                                                                      actualStorage(T,lvd_Pp,lvd_Pm,lvf_diffStorage) ; //Old-> #    2609: call actualStorage(T,lvd_Pp,lvd_Pm,lvf_diffStorage)
                                                                                       elevationsPowell(lvd_Pp,lvf_powellElevation) ; //Old-> #    2610: call  elevationsPowell(lvd_Pp,lvf_powellElevation)
                                                                                       elevationsMead(lvd_Pm,lvf_meadElevation) ; //Old-> #    2611: call  elevationsMead(lvd_Pm,lvf_meadElevation)

                                                                                      //* ## ?????   //OLD-> #    2612: 

                                                                                       elevationsPowell(vState_Ba_maf(T%year),lvf_powellElevation) ; //Old-> #    2613: call  elevationsPowell(vState_Ba_maf(T%year),lvf_powellElevation)
                                                                                       elevationsMead(vState_Bb_maf(T%year),lvf_meadElevation) ; //Old-> #    2614: call  elevationsMead(vState_Bb_maf(T%year),lvf_meadElevation)
                                                                                      if ((T%year < 2012) ) { //Old-> #    2615: if(T%year < 2012)then
                                                                                        } // if (T%year < 2012) //Old-> #    2616: endif

                                                                                      } // if (gpl_validate) //Old-> #    2617: endif

 //  -----------------------------------------------------				 //Old-> #    2618:  -----------------------------------------------------! -----------------------------------------------------

 //  ---------------------------------------------------------------------------------------------------- //Old-> #    2620:  ----------------------------------------------------------------------------------------------------! ----------------------------------------------------------------------------------------------------
 // 										 //Old-> #    2621: !
                                                                                    wsb%lv_AZshareCO = lv_allocation_az ; //Old-> #    2622: wsb%lv_AZshareCO=lv_allocation_az
 // 										 //Old-> #    2623: !
                                                                                    return;	 //Old-> #    2624: return

                                                                                    }// aModifyStorage_bb //Old-> #    2625: end subroutine aModifyStorage_bb
 // -------------------------------							 //Old-> #    2626: -------------------------------!-------------------------------
 //  ------------------------------							 //Old-> #    2628:  ------------------------------! ------------------------------

//-----------------------------------------------------
                                                                                  public void statesShortageRatios(double shortage_2 , double az , double nv , double mx) { //Old-> #    2629: subroutine statesShortageRatios(shortage,az,nv,mx)
 // 										 //Old-> #    2630: !
 //  --------- Types ----------							 //Old-> #    2631:  --------- Types ----------! --------- Types ----------
 // real:: shortage_1=0.383								 //Old-> #    2632: real:: shortage_1=0.383!real:: shortage_1=0.383
                                                                                    // Skipped //OLD-> #    2633:             real:: shortage_2=0.487

                                                                                    //* ## ?????   //OLD-> #    2634: shortage_3=0.625


                                                                                    //* ## ?????   //OLD-> #    2634: 0.625


                                                                                    //* ## ?????   //OLD-> #    2634: 


                                                                                    //* ## ?????   //OLD-> #    2635: shortage


                                                                                    //* ## ?????   //OLD-> #    2635: 

                                                                                    // Skipped //OLD-> #    2636:             real:: az,nv,mx
 //  ==========================							 //Old-> #    2637:  ==========================! ==========================
 //              									 //Old-> #    2638:              !             
                                                                                    az = 1 ; //Old-> #    2639: az=1
                                                                                    nv = 1 ; //Old-> #    2640: nv=1
                                                                                    mx = 1 ; //Old-> #    2641: mx=1
 // 										 //Old-> #    2642: !
 //  NOTE: values (decimal place) chosen to remove rounding errors			 //Old-> #    2643:  NOTE: values (decimal place) chosen to remove rounding errors! NOTE: values (decimal place) chosen to remove rounding errors
 //  i.e., 13k & 320k, 17k & 400k, and 20k & 480k for NV and AZ, respectively		 //Old-> #    2644:  i.e., 13k & 320k, 17k & 400k, and 20k & 480k for NV and AZ, respectively! i.e., 13k & 320k, 17k & 400k, and 20k & 480k for NV and AZ, respectively
                                                                                    if ((0 < shortage) ) { //Old-> #    2645: if(0 < shortage)then
                                                                                      if ((shortage < shortage_2) ) { //Old-> #    2646: if(shortage < shortage_2)then
                                                                                        az = 0.835510 ; //Old-> #    2647: az=0.835510
                                                                                        nv = 0.033943 ; //Old-> #    2648: nv=0.033943
                                                                                         } else if ( shortage < shortage_3) ) { //Old-> #    2649: else if(shortage < shortage_3)then
                                                                                        az = 0.821357 ; //Old-> #    2650: az=0.821357
                                                                                        nv = 0.034908 ; //Old-> #    2651: nv=0.034908

                                                                                        //* ## ?????   //OLD-> #    2652:  

                                                                                        az = 0.768 ; //Old-> #    2653: az=0.768
                                                                                        nv = 0.032 ; //Old-> #    2654: nv=0.032
                                                                                        } // if (shortage < shortage_2) //Old-> #    2655: endif

                                                                                      mx = 1.0-az-nv ; //Old-> #    2656: mx=1.0-az-nv
                                                                                      } // if (0 < shortage) //Old-> #    2657: endif

 // 										 //Old-> #    2658: !
                                                                                    return;	 //Old-> #    2659: return

                                                                                    }// statesShortageRatios //Old-> #    2660: end subroutine statesShortageRatios

 //  ---------------------------------------------------------				 //Old-> #    2662:  ---------------------------------------------------------! ---------------------------------------------------------

//-----------------------------------------------------
                                                                                  public void sevenstates(T , lvf_meadElevation , lv_PMead , lv_SevenStatesLCshortage) { //Old-> #    2663: subroutine sevenstates(T,lvf_meadElevation,lv_PMead,lv_SevenStatesLCshortage)
 // 										 //Old-> #    2664: !
 //  Live is "active"								 //Old-> #    2665:  Live is "active"! Live is "active"
 // 										 //Old-> #    2666: !
 //  Heretofore I was simulating with live volumes for the parameters, but		 //Old-> #    2667:  Heretofore I was simulating with live volumes for the parameters, but! Heretofore I was simulating with live volumes for the parameters, but
 //  modeling total, so I threshold volumes are off...					 //Old-> #    2668:  modeling total, so I threshold volumes are off...! modeling total, so I threshold volumes are off...
 // 										 //Old-> #    2669: !
 //               real(8) :: vMeadVolThresh_2=4.33  ! Mead < 1,025 feet			 //Old-> #    2670:               real(8) :: vMeadVolThresh_2=4.33  ! Mead < 1,025 feet!              real(8) :: vMeadVolThresh_2=4.33  ! Mead < 1,025 feet
 //               real(8) :: vMeadVolThresh_3=5.8   ! Mead at 1,025 feet			 //Old-> #    2671:               real(8) :: vMeadVolThresh_3=5.8   ! Mead at 1,025 feet!              real(8) :: vMeadVolThresh_3=5.8   ! Mead at 1,025 feet
 //               real(8) :: vMeadVolThresh_4=7.47  ! mead at 1,050 feet 			 //Old-> #    2672:               real(8) :: vMeadVolThresh_4=7.47  ! mead at 1,050 feet !              real(8) :: vMeadVolThresh_4=7.47  ! mead at 1,050 feet 
 //               real(8) :: vMeadVolThresh_5=9.37  ! mead at 1,075 feet (live, not total)	 //Old-> #    2673:               real(8) :: vMeadVolThresh_5=9.37  ! mead at 1,075 feet (live, not total)!              real(8) :: vMeadVolThresh_5=9.37  ! mead at 1,075 feet (live, not total)
 //  04.02.12 DAS									 //Old-> #    2674:  04.02.12 DAS! 04.02.12 DAS


 //  ------------------ Types ----------------------------------------			 //Old-> #    2677:  ------------------ Types ----------------------------------------! ------------------ Types ----------------------------------------
                                                                                    double 8) = 7.83602  ! Mead < 1,025 feet; //Old-> #    2678: real(8) :: vMeadVolThresh_2=7.83602  ! Mead < 1,025 feet
                                                                                    double 8) = 7.83602   ! Mead at 1,025 feet; //Old-> #    2679: real(8) :: vMeadVolThresh_3=7.83602   ! Mead at 1,025 feet
                                                                                    double 8) = 9.5059 ! mead at 1,050 feet; //Old-> #    2680: real(8) :: vMeadVolThresh_4=9.5059 ! mead at 1,050 feet 
                                                                                    double 8) = 11.4049  ! mead at 1,075 feet (total); //Old-> #    2681: real(8) :: vMeadVolThresh_5=11.4049  ! mead at 1,075 feet (total)
 // 										 //Old-> #    2682: !
                                                                                    const double lvp_StepOne = 1075; //Old-> #    2683: real,parameter :: lvp_StepOne=1075
                                                                                    const double lvp_StepTwo = 1050; //Old-> #    2684: real,parameter :: lvp_StepTwo=1050
                                                                                    const double lvp_StepThree = 1025; //Old-> #    2685: real,parameter :: lvp_StepThree=1025
 // 										 //Old-> #    2686: !
                                                                                    double 8); //Old-> #    2687: real(8) :: lv_PMead
                                                                                    double lv_SevenStatesLCshortage; //Old-> #    2688: real :: lv_SevenStatesLCshortage
                                                                                    double lvf_meadElevation; //Old-> #    2689: real :: lvf_meadElevation
                                                                                    bool lvl_mass = .false.; //Old-> #    2690: logical :: lvl_mass=.false.
 //  ==================================================================			 //Old-> #    2691:  ==================================================================! ==================================================================
 // 										 //Old-> #    2692: !

 //  - Type Construct -								 //Old-> #    2694:  - Type Construct -! - Type Construct -

                                                                                    //* ## ?????   //OLD-> #    2695: runTime)T


                                                                                    //* ## ?????   //OLD-> #    2695: 

 //  ==================								 //Old-> #    2696:  ==================! ==================
 //            									 //Old-> #    2697:            !           
                                                                                    lv_SevenStatesLCshortage = 0. ; //Old-> #    2698: lv_SevenStatesLCshortage=0.
 // 										 //Old-> #    2699: !
                                                                                    if ((lvl_mass) ) { //Old-> #    2700: if(lvl_mass)then
                                                                                      if ((lv_PMead < vMeadVolThresh_2) ) { //Old-> #    2701: if(lv_PMead < vMeadVolThresh_2)then
                                                                                        lv_SevenStatesLCshortage = 0.6 ; //Old-> #    2702: lv_SevenStatesLCshortage=0.6
                                                                                        lv_SevenStatesLCshortage = 0.625 ! w/ mexico ; //Old-> #    2703: lv_SevenStatesLCshortage=0.625 ! w/ mexico

                                                                                        //* ## ?????   //OLD-> #    2704: 

                                                                                        if ((lv_PMead < vMeadVolThresh_3) ) { //Old-> #    2705: if(lv_PMead < vMeadVolThresh_3)then
                                                                                          lv_SevenStatesLCshortage = 0.5 ! w/o mexico ; //Old-> #    2706: lv_SevenStatesLCshortage=0.5 ! w/o mexico
                                                                                          lv_SevenStatesLCshortage = 0.6 ; //Old-> #    2707: lv_SevenStatesLCshortage=0.6
 //  02.19.15									 //Old-> #    2708:  02.19.15! 02.19.15
                                                                                          lv_SevenStatesLCshortage = 0.625 ! w/ mexico ; //Old-> #    2709: lv_SevenStatesLCshortage=0.625 ! w/ mexico

                                                                                          //* ## ?????   //OLD-> #    2710: 

                                                                                          if ((lv_PMead < vMeadVolThresh_4) ) { //Old-> #    2711: if(lv_PMead < vMeadVolThresh_4)then
                                                                                            lv_SevenStatesLCshortage = 0.417 ! w/o mexico ; //Old-> #    2712: lv_SevenStatesLCshortage=0.417 ! w/o mexico
                                                                                            lv_SevenStatesLCshortage = 0.5 ; //Old-> #    2713: lv_SevenStatesLCshortage=0.5
 //  02.19.15									 //Old-> #    2714:  02.19.15! 02.19.15
                                                                                            lv_SevenStatesLCshortage = 0.487 ! w/ mexico ; //Old-> #    2715: lv_SevenStatesLCshortage=0.487 ! w/ mexico


                                                                                            //* ## ?????   //OLD-> #    2717: 

                                                                                            if ((lv_PMead < vMeadVolThresh_5) ) { //Old-> #    2718: if(lv_PMead < vMeadVolThresh_5)then
                                                                                              lv_SevenStatesLCshortage = 0.333 ! w/o mexico ; //Old-> #    2719: lv_SevenStatesLCshortage=0.333 ! w/o mexico
                                                                                              lv_SevenStatesLCshortage = 0.4 ; //Old-> #    2720: lv_SevenStatesLCshortage=0.4
 //  02.19.15 AZ=320k, nv=13k, mx=50k							 //Old-> #    2721:  02.19.15 AZ=320k, nv=13k, mx=50k! 02.19.15 AZ=320k, nv=13k, mx=50k
                                                                                              lv_SevenStatesLCshortage = 0.383 ! w/ mexico ; //Old-> #    2722: lv_SevenStatesLCshortage=0.383 ! w/ mexico

                                                                                              //* ## ?????   //OLD-> #    2723: 

                                                                                              lv_SevenStatesLCshortage = 0.           ; //Old-> #    2724: lv_SevenStatesLCshortage=0.          
                                                                                              } // if (lv_PMead < vMeadVolThresh_5) //Old-> #    2725: endif

                                                                                            } // if (lv_PMead < vMeadVolThresh_4) //Old-> #    2726: endif

                                                                                          } // if (lv_PMead < vMeadVolThresh_3) //Old-> #    2727: endif

                                                                                        } // if (lv_PMead < vMeadVolThresh_2)                 //Old-> #    2728: endif               

                                                                                      //* ## ?????   //OLD-> #    2729: 

                                                                                      if ((lvf_meadElevation <=lvp_StepThree) ) { //Old-> #    2730: if(lvf_meadElevation <=lvp_StepThree)then
                                                                                        lv_SevenStatesLCshortage = 0.6 ; //Old-> #    2731: lv_SevenStatesLCshortage=0.6
                                                                                        lv_SevenStatesLCshortage = 0.625 ; //Old-> #    2732: lv_SevenStatesLCshortage=0.625

                                                                                        //* ## ?????   //OLD-> #    2733: 

                                                                                        if ((lvf_meadElevation <=lvp_StepTwo) ) { //Old-> #    2734: if(lvf_meadElevation <=lvp_StepTwo)then
                                                                                          lv_SevenStatesLCshortage = 0.5 ; //Old-> #    2735: lv_SevenStatesLCshortage=0.5
                                                                                          lv_SevenStatesLCshortage = 0.487 ; //Old-> #    2736: lv_SevenStatesLCshortage=0.487

                                                                                          //* ## ?????   //OLD-> #    2737: 

                                                                                          if ((lvf_meadElevation <=lvp_StepOne) ) { //Old-> #    2738: if(lvf_meadElevation <=lvp_StepOne)then
                                                                                            lv_SevenStatesLCshortage = 0.4 ; //Old-> #    2739: lv_SevenStatesLCshortage=0.4
                                                                                            lv_SevenStatesLCshortage = 0.383  ; //Old-> #    2740: lv_SevenStatesLCshortage=0.383 

                                                                                            //* ## ?????   //OLD-> #    2741: 

                                                                                            lv_SevenStatesLCshortage = 0. ; //Old-> #    2742: lv_SevenStatesLCshortage=0.
                                                                                            } // if (lvf_meadElevation <=lvp_StepOne) //Old-> #    2743: endif

                                                                                          } // if (lvf_meadElevation <=lvp_StepTwo) //Old-> #    2744: endif

                                                                                        } // if (lvf_meadElevation <=lvp_StepThree) //Old-> #    2745: endif

                                                                                      } // if (lvl_mass) //Old-> #    2746: endif

 // 										 //Old-> #    2747: !
                                                                                    return;	 //Old-> #    2748: return

                                                                                    }// sevenstates //Old-> #    2749: end subroutine sevenstates
 // -------------------------							 //Old-> #    2750: -------------------------!-------------------------

 //  ------------------------------							 //Old-> #    2752:  ------------------------------! ------------------------------

//-----------------------------------------------------
                                                                                  public void designations_B(T , wsb) { //Old-> #    2753: subroutine designations_B(T,wsb)
 // 										 //Old-> #    2754: !
 //  ------------- Types ------------------						 //Old-> #    2755:  ------------- Types ------------------! ------------- Types ------------------
                                                                                    double 8); //Old-> #    2756: real(8) :: vPreCap
                                                                                    double lv_onRiver, cv_onRiver = 1.2; //Old-> #    2757: real :: lv_onRiver,cv_onRiver=1.2
                                                                                    double 8); //Old-> #    2758: real(8) :: lv_CAPwater(gpi_lBY:gpi_uBY)
                                                                                    double lv_capcapacity = 2.17; //Old-> #    2759: real :: lv_capcapacity=2.17
                                                                                    double lv_capmaricopashare = 0.75; //Old-> #    2760: real :: lv_capmaricopashare=0.75
 //  ======================================						 //Old-> #    2761:  ======================================! ======================================
 // 										 //Old-> #    2762: !

 //  --- Type Constructs ---								 //Old-> #    2764:  --- Type Constructs ---! --- Type Constructs ---

                                                                                    //* ## ?????   //OLD-> #    2765: watershed_B)::wsb


                                                                                    //* ## ?????   //OLD-> #    2765: 


                                                                                    //* ## ?????   //OLD-> #    2766: runTime)T


                                                                                    //* ## ?????   //OLD-> #    2766: 

 //  =======================								 //Old-> #    2767:  =======================! =======================
 // 										 //Old-> #    2768: !
 //  Tim's original code								 //Old-> #    2769:  Tim's original code! Tim's original code
 //               vYuma=min(wsb%lv_AZshareCO/2,1.2)					 //Old-> #    2770:               vYuma=min(wsb%lv_AZshareCO/2,1.2)!              vYuma=min(wsb%lv_AZshareCO/2,1.2)
 //               vPreCap=wsb%lv_AZshareCO-vYuma					 //Old-> #    2771:               vPreCap=wsb%lv_AZshareCO-vYuma!              vPreCap=wsb%lv_AZshareCO-vYuma
 // 										 //Old-> #    2772: !
 //    Added on 06.09.10 based on a talk last night by Dee Fuerst at the monthly		 //Old-> #    2773:    Added on 06.09.10 based on a talk last night by Dee Fuerst at the monthly!   Added on 06.09.10 based on a talk last night by Dee Fuerst at the monthly
 //  AHS meeting in PHX- CAP has to take 90% of the AZ shortage.. On-river take 10%	 //Old-> #    2774:  AHS meeting in PHX- CAP has to take 90% of the AZ shortage.. On-river take 10%! AHS meeting in PHX- CAP has to take 90% of the AZ shortage.. On-river take 10%
                                                                                    lv_onRiver = min(wsb%lv_AZshareCO,cv_onRiver-(0.1*wsb%lv_AZshortageCO)) ; //Old-> #    2775: lv_onRiver=min(wsb%lv_AZshareCO,cv_onRiver-(0.1*wsb%lv_AZshortageCO))
                                                                                    vPreCap = max(wsb%lv_AZshareCO-lv_onRiver,0) ; //Old-> #    2776: vPreCap=max(wsb%lv_AZshareCO-lv_onRiver,0)
 // 										 //Old-> #    2777: !
 //  08.20.15 I removed evaporation from these analyses					 //Old-> #    2778:  08.20.15 I removed evaporation from these analyses! 08.20.15 I removed evaporation from these analyses
 //  Now, 1.6 maf is delivered							 //Old-> #    2779:  Now, 1.6 maf is delivered! Now, 1.6 maf is delivered
                                                                                    if ((vPreCap <= lv_capcapacity) ) { //Old-> #    2780: if(vPreCap <= lv_capcapacity)then
                                                                                      lv_CAPwater(T%year) = vPreCap ; //Old-> #    2781: lv_CAPwater(T%year)=vPreCap

                                                                                      //* ## ?????   //OLD-> #    2782: 

                                                                                      lv_CAPwater(T%year) = lv_capcapacity   ; //Old-> #    2783: lv_CAPwater(T%year)=lv_capcapacity  
                                                                                      } // if (vPreCap <= lv_capcapacity) //Old-> #    2784: endif

 //                									 //Old-> #    2785:                !               
                                                                                    wsb%lv_CAPmaricopa(T%year) = 0. ; //Old-> #    2786: wsb%lv_CAPmaricopa(T%year)=0.
                                                                                    wsb%lv_CAPmaricopa(T%year) = lv_CAPwater(T%year)*lv_capmaricopashare ; //Old-> #    2787: wsb%lv_CAPmaricopa(T%year)=lv_CAPwater(T%year)*lv_capmaricopashare
                                                                                    wsb%lv_CAP(T%year) = lv_CAPwater(T%year) ; //Old-> #    2788: wsb%lv_CAP(T%year)=lv_CAPwater(T%year)
 // 										 //Old-> #    2789: !
                                                                                    go_CAP = 0 ; //Old-> #    2790: go_CAP=0
                                                                                    go_CAP = nint(lv_CAPwater(T%year)*1e6) ; //Old-> #    2791: go_CAP=nint(lv_CAPwater(T%year)*1e6)
 // 										 //Old-> #    2792: !
                                                                                    return;	 //Old-> #    2793: return

                                                                                    }// designations_B //Old-> #    2794: end subroutine designations_B
 // -----------------------------							 //Old-> #    2795: -----------------------------!-----------------------------

 //  ---------------------------------						 //Old-> #    2797:  ---------------------------------! ---------------------------------

//-----------------------------------------------------
                                                                                  public void updateState_b(T , Bout , wsb) { //Old-> #    2798: subroutine updateState_b(T,Bout,wsb)
 // 										 //Old-> #    2799: !
 //  ------------- Types -----------							 //Old-> #    2800:  ------------- Types -----------! ------------- Types -----------
                                                                                    double lvf_mead_acft = 13647000; //Old-> #    2801: real :: lvf_mead_acft=13647000
                                                                                    double lvf_powell_acft = 12692000; //Old-> #    2802: real :: lvf_powell_acft=12692000
 //  ===============================							 //Old-> #    2803:  ===============================! ===============================
 // 										 //Old-> #    2804: !

 //  -- Type Construct --								 //Old-> #    2806:  -- Type Construct --! -- Type Construct --

                                                                                    //* ## ?????   //OLD-> #    2807: runTime)T


                                                                                    //* ## ?????   //OLD-> #    2807: 


                                                                                    //* ## ?????   //OLD-> #    2808: RiverB)Bout


                                                                                    //* ## ?????   //OLD-> #    2808: 


                                                                                    //* ## ?????   //OLD-> #    2809: watershed_B)::wsb


                                                                                    //* ## ?????   //OLD-> #    2809: 

 //  ====================								 //Old-> #    2810:  ====================! ====================
 // 										 //Old-> #    2811: !
                                                                                    if ((gpl_comparisons) ) { //Old-> #    2812: if(gpl_comparisons)then
 //   										 //Old-> #    2813:   !  
                                                                                      vState_Ba_maf(2012) = (lvf_powell_acft/1e6)+mpf_powellDead ; //Old-> #    2814: vState_Ba_maf(2012)=(lvf_powell_acft/1e6)+mpf_powellDead
                                                                                      vState_Bb_maf(2012) = (lvf_mead_acft/1e6)+mpf_meadDead ; //Old-> #    2815: vState_Bb_maf(2012)=(lvf_mead_acft/1e6)+mpf_meadDead
 // 										 //Old-> #    2816: !
                                                                                      if ((gpl_verify .or. gpl_validate) ) { //Old-> #    2817: if(gpl_verify .or. gpl_validate)then
                                                                                        if ((T%year <=2012) ) { //Old-> #    2818: if(T%year <=2012)then

                                                                                          //* ## ?????   //OLD-> #    2819: 100,*)T%year, mvf_inflow_acft,mvf_LeeFerry_acft,mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2819: *)T%year, mvf_inflow_acft,mvf_LeeFerry_acft,mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2819:  mvf_inflow_acft,mvf_LeeFerry_acft,mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2819: mvf_LeeFerry_acft,mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2819: mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2819: mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2819: &


                                                                                          //* ## ?????   //OLD-> #    2819: 


                                                                                          //* ## ?????   //OLD-> #    2820: mvf_meadEvaporation_acft,go_powellElevation,go_meadElevation, &


                                                                                          //* ## ?????   //OLD-> #    2820: go_powellElevation,go_meadElevation, &


                                                                                          //* ## ?????   //OLD-> #    2820: go_meadElevation, &


                                                                                          //* ## ?????   //OLD-> #    2820:  &


                                                                                          //* ## ?????   //OLD-> #    2820: 


                                                                                          //* ## ?????   //OLD-> #    2821: T%year),vState_Bb_maf(T%year)


                                                                                          //* ## ?????   //OLD-> #    2821: vState_Bb_maf(T%year)


                                                                                          //* ## ?????   //OLD-> #    2821: T%year)


                                                                                          //* ## ?????   //OLD-> #    2821: 

                                                                                          } // if (T%year <=2012) //Old-> #    2822: endif


                                                                                        //* ## ?????   //OLD-> #    2823: 

                                                                                        if ((2011 < T%year) ) { //Old-> #    2824: if(2011 < T%year)then

                                                                                          //* ## ?????   //OLD-> #    2825: 100,*)T%year, mvf_inflow_acft,mvf_LeeFerry_acft,mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2825: *)T%year, mvf_inflow_acft,mvf_LeeFerry_acft,mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2825:  mvf_inflow_acft,mvf_LeeFerry_acft,mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2825: mvf_LeeFerry_acft,mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2825: mvf_upperBasin_acft,mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2825: mvf_releaseFromPowell_acft,&


                                                                                          //* ## ?????   //OLD-> #    2825: &


                                                                                          //* ## ?????   //OLD-> #    2825: 


                                                                                          //* ## ?????   //OLD-> #    2826: mvf_meadEvaporation_acft,go_powellElevation,go_meadElevation, &


                                                                                          //* ## ?????   //OLD-> #    2826: go_powellElevation,go_meadElevation, &


                                                                                          //* ## ?????   //OLD-> #    2826: go_meadElevation, &


                                                                                          //* ## ?????   //OLD-> #    2826:  &


                                                                                          //* ## ?????   //OLD-> #    2826: 


                                                                                          //* ## ?????   //OLD-> #    2827: T%year),vState_Bb_maf(T%year)


                                                                                          //* ## ?????   //OLD-> #    2827: vState_Bb_maf(T%year)


                                                                                          //* ## ?????   //OLD-> #    2827: T%year)


                                                                                          //* ## ?????   //OLD-> #    2827: 

                                                                                          } // if (2011 < T%year) //Old-> #    2828: endif

                                                                                        } // if (gpl_verify .or. gpl_validate) //Old-> #    2829: endif

 //             									 //Old-> #    2830:             !            
                                                                                      } // if (gpl_comparisons) //Old-> #    2831: endif

 // 										 //Old-> #    2832: !
                                                                                    vState_Ba_maf(T%year+1) = vState_Ba_maf(T%year) ; //Old-> #    2833: vState_Ba_maf(T%year+1)=vState_Ba_maf(T%year)
                                                                                    vState_Bb_maf(T%year+1) = vState_Bb_maf(T%year) ; //Old-> #    2834: vState_Bb_maf(T%year+1)=vState_Bb_maf(T%year)
                                                                                    vState_B_maf(T%year) = 0 ; //Old-> #    2835: vState_B_maf(T%year)=0
                                                                                    vState_B_maf(T%year) = vState_Ba_maf(T%year)+vState_Bb_maf(T%year) ; //Old-> #    2836: vState_B_maf(T%year)=vState_Ba_maf(T%year)+vState_Bb_maf(T%year)
 // 										 //Old-> #    2837: !
                                                                                    Bout%bFlow = 0 ; //Old-> #    2838: Bout%bFlow=0
                                                                                    Bout%bFlow = lv_flow_B_maf(T%year) ; //Old-> #    2839: Bout%bFlow=lv_flow_B_maf(T%year)
                                                                                    Bout%bCAP_maf = 0 ; //Old-> #    2840: Bout%bCAP_maf=0
                                                                                    Bout%bCAP_maf = wsb%lv_CAP(T%year) ; //Old-> #    2841: Bout%bCAP_maf=wsb%lv_CAP(T%year)
 // 										 //Old-> #    2842: !
 //  Send to interface								 //Old-> #    2843:  Send to interface! Send to interface
                                                                                    go_AZshareCO = 0. ; //Old-> #    2844: go_AZshareCO=0.
                                                                                    go_AZshareCO = nint(wsb%lv_AZshareCO* (1./gpd_acftTomaf)) ; //Old-> #    2845: go_AZshareCO=nint(wsb%lv_AZshareCO* (1./gpd_acftTomaf))
 // 										 //Old-> #    2846: !
 // 										 //Old-> #    2847: !
                                                                                    return;	 //Old-> #    2848: return

                                                                                    }// updateState_b //Old-> #    2849: end subroutine updateState_b
 //  --------------------------							 //Old-> #    2850:  --------------------------! --------------------------

 //  -----------------------								 //Old-> #    2852:  -----------------------! -----------------------

//-----------------------------------------------------
                                                                                  public void outinitialB(T , T) { //Old-> #    2853: subroutine outinitialB(T) 
 // 										 //Old-> #    2854: !
 //  - Type Construct -								 //Old-> #    2855:  - Type Construct -! - Type Construct -

                                                                                    //* ## ?????   //OLD-> #    2856: runTime)T


                                                                                    //* ## ?????   //OLD-> #    2856: 

 //  ==================								 //Old-> #    2857:  ==================! ==================
 // 										 //Old-> #    2858: !
 // 										 //Old-> #    2859: !
                                                                                    if ((T%year /= T%startyear) ) { //Old-> #    2860: if(T%year /= T%startyear)then

                                                                                      //* ## ?????   //OLD-> #    2861: 

                                                                                      } // if (T%year /= T%startyear) //Old-> #    2862: endif

 // 										 //Old-> #    2863: !
 // 										 //Old-> #    2864: !
                                                                                    return;	 //Old-> #    2865: return

                                                                                    }// outinitialB //Old-> #    2866: end subroutine outinitialB
 //  --------------------------							 //Old-> #    2867:  --------------------------! --------------------------

 //  --------------------								 //Old-> #    2869:  --------------------! --------------------

//-----------------------------------------------------
                                                                                  public void outputsB(T , T) { //Old-> #    2870: subroutine outputsB(T)
 // 										 //Old-> #    2871: !
 //  - Type Construct -								 //Old-> #    2872:  - Type Construct -! - Type Construct -

                                                                                    //* ## ?????   //OLD-> #    2873: runTime)T


                                                                                    //* ## ?????   //OLD-> #    2873: 

 // ===================								 //Old-> #    2874: ===================!===================
 // 										 //Old-> #    2875: !
 //  Send to the interface								 //Old-> #    2876:  Send to the interface! Send to the interface
 //  ---------------------								 //Old-> #    2877:  ---------------------! ---------------------
                                                                                    go_StateCO = NINT((vState_Ba_maf(T%year)+vState_Bb_maf(T%year))*(1./gpd_acftTomaf)) ; //Old-> #    2878: go_StateCO=NINT((vState_Ba_maf(T%year)+vState_Bb_maf(T%year))*(1./gpd_acftTomaf))
                                                                                    go_StatePowell = 0. ; //Old-> #    2879: go_StatePowell=0.
                                                                                    go_StatePowell = NINT(vState_Ba_maf(T%year)* (1./gpd_acftTomaf)) ; //Old-> #    2880: go_StatePowell=NINT(vState_Ba_maf(T%year)* (1./gpd_acftTomaf))
                                                                                    go_StateMead = 0. ; //Old-> #    2881: go_StateMead=0.
                                                                                    go_StateMead = NINT(vState_Bb_maf(T%year)* (1./gpd_acftTomaf)) ; //Old-> #    2882: go_StateMead=NINT(vState_Bb_maf(T%year)* (1./gpd_acftTomaf))
 // 										 //Old-> #    2883: !
                                                                                    if ((T%year .EQ. T%startyear) ) { //Old-> #    2884: if(T%year .EQ. T%startyear)then
                                                                                      if ((gvl_writeLog) ) { //Old-> #    2885: if(gvl_writeLog)then
                                                                                        string = 4 ; //Old-> #    2886: string=4
                                                                                        LU = 0 ; //Old-> #    2887: LU=0
                                                                                        sOnceThrough(string,streamString) ; //Old-> #    2888: call sOnceThrough(string,streamString)
                                                                                        sWrite(streamString,LU) ; //Old-> #    2889: call sWrite(streamString,LU)
                                                                                        } // if (gvl_writeLog) //Old-> #    2890: endif

                                                                                      } // if (T%year .EQ. T%startyear) //Old-> #    2891: endif

 // 										 //Old-> #    2892: !
 // 										 //Old-> #    2893: !
                                                                                    return;	 //Old-> #    2894: return

                                                                                    }// outputsB //Old-> #    2895: end subroutine outputsB
 //  ----------------------								 //Old-> #    2896:  ----------------------! ----------------------
 // 										 //Old-> #    2897: !

                                                                                  //* ## ?????   //OLD-> #    2898: Module lms_River_Ba


                                                                                  //* ## ?????   //OLD-> #    2898: lms_River_Ba


                                                                                  //* ## ?????   //OLD-> #    2898: 

 // 										 //Old-> #    2899: !
 //  -----------------------------------------------					 //Old-> #    2900:  -----------------------------------------------! -----------------------------------------------

//-----------------------------------------------------
                                                                                  public void pFlowsReservoirsColorado(T , int acft , Bout) { //Old-> #    2901: subroutine pFlowsReservoirsColorado(T,acft,Bout)

                                                                                    //* ## ?????   //OLD-> #    2902: lms_River_Ba


                                                                                    //* ## ?????   //OLD-> #    2902: 

 // 										 //Old-> #    2903: !
 //  ----- Types -----								 //Old-> #    2904:  ----- Types -----! ----- Types -----
                                                                                    // Skipped //OLD-> #    2905:         integer :: acft
 // ==================								 //Old-> #    2906: ==================!==================
 // 										 //Old-> #    2907: !

 //  ---- Type Constructs ---							 //Old-> #    2909:  ---- Type Constructs ---! ---- Type Constructs ---

                                                                                    //* ## ?????   //OLD-> #    2910: RiverB)Bout


                                                                                    //* ## ?????   //OLD-> #    2910: 


                                                                                    //* ## ?????   //OLD-> #    2911: watershed_B)::wsb


                                                                                    //* ## ?????   //OLD-> #    2911: 


                                                                                    //* ## ?????   //OLD-> #    2912: runTime)T


                                                                                    //* ## ?????   //OLD-> #    2912: 

 //  ========================							 //Old-> #    2913:  ========================! ========================
 // 										 //Old-> #    2914: !
                                                                                    if ((gvl_errorFlag) ) { //Old-> #    2915: IF(gvl_errorFlag)THEN
                                                                                      aFlow_b(T,acft)        ! Read historical data ; //Old-> #    2916: call aFlow_b(T,acft)        ! Read historical data
                                                                                      aModifyFlow_ba(T)      ! Drought,climate, inflows adjustments ; //Old-> #    2917: call aModifyFlow_ba(T)      ! Drought,climate, inflows adjustments
                                                                                      aOutToInterface(T) ; //Old-> #    2918: call aOutToInterface(T)
 //             call aModifyFlow_bb(T)      ! Water for the Environment 			 //Old-> #    2919:             call aModifyFlow_bb(T)      ! Water for the Environment !            call aModifyFlow_bb(T)      ! Water for the Environment 
                                                                                      aModifyFlow_bc(T)      ! Upper Basin water use removed ; //Old-> #    2920: call aModifyFlow_bc(T)      ! Upper Basin water use removed
                                                                                      reservoirs_b(T,wsb) ; //Old-> #    2921: call reservoirs_b(T,wsb)
 // 										 //Old-> #    2922: !
                                                                                      updateState_b(T,Bout,wsb) ; //Old-> #    2923: call updateState_b(T,Bout,wsb)
                                                                                      outinitialB(T) ; //Old-> #    2924: call outinitialB(T)
                                                                                      outputsB(T) ; //Old-> #    2925: call outputsB(T)

                                                                                      //* ## ?????   //OLD-> #    2926: 

                                                                                      if ((gvl_writeLog) ) { //Old-> #    2927: if(gvl_writeLog)then
                                                                                        string = 9 ; //Old-> #    2928: string=9
                                                                                        LU = 0 ; //Old-> #    2929: LU=0
                                                                                        sStrings(string,errorString) ; //Old-> #    2930: call sStrings(string,errorString)
                                                                                        eWrite(errorString,LU) ; //Old-> #    2931: call eWrite(errorString,LU)
                                                                                        } // if (gvl_writeLog) //Old-> #    2932: endif

                                                                                      gvl_errorFlag = .false. ; //Old-> #    2933: gvl_errorFlag=.false.
                                                                                      } // if (gvl_errorFlag) //Old-> #    2934: ENDIF

 // 										 //Old-> #    2935: !
                                                                                    return;	 //Old-> #    2936: return

                                                                                    }// pFlowsReservoirsColorado //Old-> #    2937: end subroutine pFlowsReservoirsColorado
 // ---------------------------------------						 //Old-> #    2938: ---------------------------------------!---------------------------------------
 // 										 //Old-> #    2939: !
 //  ====================================================================================================== //Old-> #    2940:  ======================================================================================================! ======================================================================================================
 //  E.O.F. WaterShed_CO.f90								 //Old-> #    2941:  E.O.F. WaterShed_CO.f90! E.O.F. WaterShed_CO.f90
  }  // Class
}  // namespace
